{"file_contents":{"README.md":{"content":"# React\n\nA modern React-based project utilizing the latest frontend technologies and tools for building responsive web applications.\n\n## üöÄ Features\n\n- **React 18** - React version with improved rendering and concurrent features\n- **Vite** - Lightning-fast build tool and development server\n- **Redux Toolkit** - State management with simplified Redux setup\n- **TailwindCSS** - Utility-first CSS framework with extensive customization\n- **React Router v6** - Declarative routing for React applications\n- **Data Visualization** - Integrated D3.js and Recharts for powerful data visualization\n- **Form Management** - React Hook Form for efficient form handling\n- **Animation** - Framer Motion for smooth UI animations\n- **Testing** - Jest and React Testing Library setup\n\n## üìã Prerequisites\n\n- Node.js (v14.x or higher)\n- npm or yarn\n\n## üõ†Ô∏è Installation\n\n1. Install dependencies:\n   ```bash\n   npm install\n   # or\n   yarn install\n   ```\n   \n2. Start the development server:\n   ```bash\n   npm start\n   # or\n   yarn start\n   ```\n\n## üìÅ Project Structure\n\n```\nreact_app/\n‚îú‚îÄ‚îÄ public/             # Static assets\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ components/     # Reusable UI components\n‚îÇ   ‚îú‚îÄ‚îÄ pages/          # Page components\n‚îÇ   ‚îú‚îÄ‚îÄ styles/         # Global styles and Tailwind configuration\n‚îÇ   ‚îú‚îÄ‚îÄ App.jsx         # Main application component\n‚îÇ   ‚îú‚îÄ‚îÄ Routes.jsx      # Application routes\n‚îÇ   ‚îî‚îÄ‚îÄ index.jsx       # Application entry point\n‚îú‚îÄ‚îÄ .env                # Environment variables\n‚îú‚îÄ‚îÄ index.html          # HTML template\n‚îú‚îÄ‚îÄ package.json        # Project dependencies and scripts\n‚îú‚îÄ‚îÄ tailwind.config.js  # Tailwind CSS configuration\n‚îî‚îÄ‚îÄ vite.config.js      # Vite configuration\n```\n\n## üß© Adding Routes\n\nTo add new routes to the application, update the `Routes.jsx` file:\n\n```jsx\nimport { useRoutes } from \"react-router-dom\";\nimport HomePage from \"pages/HomePage\";\nimport AboutPage from \"pages/AboutPage\";\n\nconst ProjectRoutes = () => {\n  let element = useRoutes([\n    { path: \"/\", element: <HomePage /> },\n    { path: \"/about\", element: <AboutPage /> },\n    // Add more routes as needed\n  ]);\n\n  return element;\n};\n```\n\n## üé® Styling\n\nThis project uses Tailwind CSS for styling. The configuration includes:\n\n- Forms plugin for form styling\n- Typography plugin for text styling\n- Aspect ratio plugin for responsive elements\n- Container queries for component-specific responsive design\n- Fluid typography for responsive text\n- Animation utilities\n\n## üì± Responsive Design\n\nThe app is built with responsive design using Tailwind CSS breakpoints.\n\n\n## üì¶ Deployment\n\nBuild the application for production:\n\n```bash\nnpm run build\n```\n\n## üôè Acknowledgments\n\n- Built with [Rocket.new](https://rocket.new)\n- Powered by React and Vite\n- Styled with Tailwind CSS\n\nBuilt with ‚ù§Ô∏è on Rocket.new\n","size_bytes":2887},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    \"tailwindcss/nesting\": {},\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n","size_bytes":114},"replit.md":{"content":"# Overview\n\nThis is a modern React-based e-commerce application called \"Neenu's Natural Clone\" - a natural products marketplace specializing in organic food items, herbal products, and health-conscious goods. The application features a comprehensive product catalog with categories including unpolished pulses/dals/rice, herbal soaps, skincare products, millet items, spices, and traditional snacks. Built with React 18 and modern frontend technologies, it provides a responsive shopping experience with features like product browsing, cart management, user authentication, and order processing through WhatsApp integration.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe application uses a modern React architecture with these key decisions:\n- **React 18** with concurrent features for improved rendering performance\n- **Vite** as the build tool for lightning-fast development and optimized production builds\n- **Component-based architecture** with reusable UI components stored in `/src/components/` and page-specific components in `/src/pages/`\n- **TailwindCSS** for utility-first styling with extensive color customization using CSS custom properties\n- **Redux Toolkit** for predictable state management across the application\n- **React Router v6** for declarative client-side routing\n\n## Styling and Design System\n- **Custom color palette** reflecting natural/organic branding with turmeric orange, cinnamon brown, and curry leaf green\n- **Responsive design** using TailwindCSS breakpoints and container queries\n- **Component styling** using class-variance-authority and clsx for dynamic class management\n- **Typography** using Google Fonts (Inter, Source Sans Pro, Roboto, JetBrains Mono)\n\n## Data Management\n- **JSON-based data storage** with a local database.json file containing users, products, and orders\n- **JsonDatabase class** providing an abstraction layer for data operations with methods for user authentication and product management\n- **Mock data service** in dataService.js for simulating API calls during development\n- **Redux store** for client-side state management of cart, user session, and UI state\n\n## Authentication and Authorization\n- **Role-based access control** with admin and customer roles\n- **Local authentication** using the JsonDatabase class for credential validation\n- **Supabase integration** configured for potential cloud authentication and database migration\n- **Session management** through Redux store persistence\n\n## Form Handling and Validation\n- **React Hook Form** for efficient form state management and validation\n- **Client-side validation** for user inputs and order processing\n- **Address management** with support for multiple shipping addresses per user\n\n## Business Integration\n- **WhatsApp order processing** - orders are automatically formatted and sent to a configured WhatsApp number for fulfillment\n- **Product catalog** organized by traditional Indian food categories matching the business domain\n- **Inventory management** with stock tracking and availability status\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **React 18.2.0** - Main frontend framework with concurrent features\n- **React DOM 18.2.0** - DOM rendering library for React\n- **React Router DOM 6.0.2** - Client-side routing and navigation\n- **Redux Toolkit 2.6.1** - State management with simplified Redux setup\n\n## UI and Styling\n- **TailwindCSS** - Utility-first CSS framework with custom color scheme\n- **@tailwindcss/forms** - Enhanced form styling components  \n- **Lucide React** - Icon library for consistent iconography\n- **Framer Motion 10.16.4** - Animation library for smooth UI transitions\n- **class-variance-authority** - Utility for conditional CSS classes\n- **clsx** - Utility for constructing className strings\n\n## Data and API Integration\n- **Axios 1.8.4** - HTTP client for API requests\n- **@supabase/supabase-js** - Configured for cloud database and authentication services\n- **date-fns** - Date manipulation and formatting utilities\n- **dotenv** - Environment variable management\n\n## Form and Input Management\n- **React Hook Form 7.55.0** - Efficient form handling and validation\n- **React Helmet 6.1.0** - Document head management for SEO\n\n## Development and Build Tools\n- **Vite** - Fast build tool and development server\n- **@vitejs/plugin-react** - Vite plugin for React support\n- **vite-tsconfig-paths** - Path resolution for cleaner imports\n- **PostCSS** with **Autoprefixer** - CSS processing and vendor prefixing\n\n## Testing Framework\n- **Jest** and **React Testing Library** - Configured for component and integration testing\n- **@testing-library/jest-dom** - Custom matchers for testing DOM elements\n- **@testing-library/user-event** - Utilities for simulating user interactions\n\n## Business-Specific Integrations\n- **WhatsApp Web API** - Order forwarding through formatted WhatsApp messages to phone number 7892783668\n- **Rocket.new integration** - Deployment and hosting platform integration with critical dependencies management\n- **@dhiwise/component-tagger** - Component identification and management system","size_bytes":5168},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{js,jsx}',\n    './components/**/*.{js,jsx}',\n    './app/**/*.{js,jsx}',\n    './src/**/*.{js,jsx}',\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"var(--color-border)\", // light gray\n        input: \"var(--color-input)\", // white\n        ring: \"var(--color-ring)\", // turmeric orange\n        background: \"var(--color-background)\", // warm off-white\n        foreground: \"var(--color-foreground)\", // warm charcoal\n        primary: {\n          DEFAULT: \"var(--color-primary)\", // turmeric orange\n          foreground: \"var(--color-primary-foreground)\", // white\n        },\n        secondary: {\n          DEFAULT: \"var(--color-secondary)\", // cinnamon brown\n          foreground: \"var(--color-secondary-foreground)\", // white\n        },\n        destructive: {\n          DEFAULT: \"var(--color-destructive)\", // clear red\n          foreground: \"var(--color-destructive-foreground)\", // white\n        },\n        muted: {\n          DEFAULT: \"var(--color-muted)\", // light gray\n          foreground: \"var(--color-muted-foreground)\", // medium gray\n        },\n        accent: {\n          DEFAULT: \"var(--color-accent)\", // curry leaf green\n          foreground: \"var(--color-accent-foreground)\", // white\n        },\n        popover: {\n          DEFAULT: \"var(--color-popover)\", // white\n          foreground: \"var(--color-popover-foreground)\", // warm charcoal\n        },\n        card: {\n          DEFAULT: \"var(--color-card)\", // white\n          foreground: \"var(--color-card-foreground)\", // warm charcoal\n        },\n        success: {\n          DEFAULT: \"var(--color-success)\", // vibrant green\n          foreground: \"var(--color-success-foreground)\", // white\n        },\n        warning: {\n          DEFAULT: \"var(--color-warning)\", // amber orange\n          foreground: \"var(--color-warning-foreground)\", // white\n        },\n        error: {\n          DEFAULT: \"var(--color-error)\", // clear red\n          foreground: \"var(--color-error-foreground)\", // white\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        heading: ['Inter', 'sans-serif'],\n        body: ['Source Sans Pro', 'sans-serif'],\n        caption: ['Roboto', 'sans-serif'],\n        data: ['JetBrains Mono', 'monospace'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n      },\n      boxShadow: {\n        'warm': '0 1px 3px rgba(212, 118, 26, 0.1)',\n        'warm-md': '0 4px 6px rgba(212, 118, 26, 0.1), 0 2px 4px rgba(212, 118, 26, 0.06)',\n        'warm-lg': '0 10px 15px rgba(212, 118, 26, 0.1), 0 4px 6px rgba(212, 118, 26, 0.05)',\n        'warm-xl': '0 20px 25px rgba(212, 118, 26, 0.1), 0 10px 10px rgba(212, 118, 26, 0.04)',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}","size_bytes":3529},"src/App.jsx":{"content":"\nimport React from \"react\";\nimport { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider } from './contexts/AuthContext';\nimport { CartProvider } from './contexts/CartContext';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport ScrollToTop from './components/ScrollToTop';\nimport dataService from './services/dataService';\n\n// Import your page components\nimport Homepage from './pages/homepage';\nimport ProductCollectionGrid from './pages/product-collection-grid';\nimport ProductDetailPage from './pages/product-detail-page';\nimport ShoppingCart from './pages/shopping-cart';\nimport CheckoutProcess from './pages/checkout-process';\nimport UserAuth from './pages/user-auth';\nimport UserAccountDashboard from './pages/user-account-dashboard';\nimport AdminLogin from './pages/admin-login';\nimport AdminPanel from './pages/admin-panel';\nimport AdminDashboard from './pages/admin-dashboard';\nimport NotFound from './pages/NotFound';\n\n// Protected Route Component\nconst ProtectedAdminRoute = ({ children }) => {\n  const adminUser = JSON.parse(localStorage.getItem('adminUser') || 'null');\n  const sessionData = localStorage.getItem('neenu_auth_session');\n  \n  let isValidAdmin = false;\n  \n  if (adminUser && adminUser.role === 'admin') {\n    const user = dataService.getUser(adminUser.id);\n    isValidAdmin = user && user.role === 'admin';\n  } else if (sessionData) {\n    try {\n      const session = JSON.parse(sessionData);\n      const user = dataService.getUser(session.userId);\n      isValidAdmin = user && user.role === 'admin';\n    } catch (error) {\n      console.error('Invalid session data:', error);\n    }\n  }\n  \n  if (!isValidAdmin) {\n    localStorage.removeItem('adminUser');\n    localStorage.removeItem('neenu_auth_session');\n    return <Navigate to=\"/admin-login\" replace />;\n  }\n  \n  return children;\n};\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <AuthProvider>\n        <CartProvider>\n          <div className=\"App\">\n            <ErrorBoundary>\n              <ScrollToTop />\n              <Routes>\n                <Route path=\"/\" element={<Homepage />} />\n                <Route path=\"/homepage\" element={<Homepage />} />\n                <Route path=\"/product-collection-grid\" element={<ProductCollectionGrid />} />\n                <Route path=\"/product-detail-page/:id\" element={<ProductDetailPage />} />\n                <Route path=\"/product-detail-page\" element={<ProductDetailPage />} />\n                <Route path=\"/shopping-cart\" element={<ShoppingCart />} />\n                <Route path=\"/checkout-process\" element={<CheckoutProcess />} />\n                <Route path=\"/user-login\" element={<UserAuth />} />\n                <Route path=\"/user-register\" element={<UserAuth />} />\n                <Route path=\"/user-account-dashboard\" element={<UserAccountDashboard />} />\n                <Route path=\"/admin-login\" element={<AdminLogin />} />\n                <Route \n                  path=\"/admin-dashboard\" \n                  element={\n                    <ProtectedAdminRoute>\n                      <AdminDashboard />\n                    </ProtectedAdminRoute>\n                  } \n                />\n                <Route \n                  path=\"/admin-panel\" \n                  element={\n                    <ProtectedAdminRoute>\n                      <AdminPanel />\n                    </ProtectedAdminRoute>\n                  } \n                />\n                <Route path=\"*\" element={<NotFound />} />\n              </Routes>\n            </ErrorBoundary>\n          </div>\n        </CartProvider>\n      </AuthProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","size_bytes":3654},"src/index.jsx":{"content":"import { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './styles/tailwind.css';\nimport './styles/index.css';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\nroot.render(\n  <App />\n);","size_bytes":247},"src/components/AdminLogin.jsx":{"content":"\nimport React, { useState } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport Button from './ui/Button';\nimport Input from './ui/Input';\n\nconst AdminLogin = ({ onLoginSuccess }) => {\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: ''\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const { signIn } = useAuth();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const { user, error } = await signIn(credentials.username, credentials.password);\n      \n      if (error) {\n        setError(error.message || 'Login failed');\n      } else if (user && user.role === 'admin') {\n        onLoginSuccess && onLoginSuccess();\n      } else {\n        setError('Admin access required');\n      }\n    } catch (err) {\n      setError('Login failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field, value) => {\n    setCredentials(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-bold text-gray-900\">\n            Admin Login\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            Access the admin dashboard\n          </p>\n        </div>\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div className=\"space-y-4\">\n            <Input\n              label=\"Username\"\n              type=\"text\"\n              value={credentials.username}\n              onChange={(e) => handleInputChange('username', e.target.value)}\n              placeholder=\"Enter admin username\"\n              required\n            />\n            <Input\n              label=\"Password\"\n              type=\"password\"\n              value={credentials.password}\n              onChange={(e) => handleInputChange('password', e.target.value)}\n              placeholder=\"Enter admin password\"\n              required\n            />\n          </div>\n\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 rounded-md p-3\">\n              <p className=\"text-sm text-red-600\">{error}</p>\n            </div>\n          )}\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={loading}\n          >\n            {loading ? 'Signing in...' : 'Sign In'}\n          </Button>\n\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Demo credentials: admin / admin123\n            </p>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminLogin;\n","size_bytes":2872},"src/components/AppIcon.jsx":{"content":"import React from 'react';\nimport * as LucideIcons from 'lucide-react';\nimport { HelpCircle } from 'lucide-react';\n\nfunction Icon({\n    name,\n    size = 24,\n    color = \"currentColor\",\n    className = \"\",\n    strokeWidth = 2,\n    ...props\n}) {\n    const IconComponent = LucideIcons?.[name];\n\n    if (!IconComponent) {\n        return <HelpCircle size={size} color=\"gray\" strokeWidth={strokeWidth} className={className} {...props} />;\n    }\n\n    return <IconComponent\n        size={size}\n        color={color}\n        strokeWidth={strokeWidth}\n        className={className}\n        {...props}\n    />;\n}\nexport default Icon;","size_bytes":621},"src/components/AppImage.jsx":{"content":"import React from 'react';\n\nfunction Image({\n  src,\n  alt = \"Image Name\",\n  className = \"\",\n  ...props\n}) {\n\n  return (\n    <img\n      src={src}\n      alt={alt}\n      className={className}\n      onError={(e) => {\n        e.target.src = \"/assets/images/no_image.png\"\n      }}\n      {...props}\n    />\n  );\n}\n\nexport default Image;\n","size_bytes":329},"src/components/ErrorBoundary.jsx":{"content":"import React from \"react\";\nimport Icon from \"./AppIcon\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    error.__ErrorBoundary = true;\n    window.__COMPONENT_ERROR__?.(error, errorInfo);\n    // console.log(\"Error caught by ErrorBoundary:\", error, errorInfo);\n  }\n\n  render() {\n    if (this.state?.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-neutral-50\">\n          <div className=\"text-center p-8 max-w-md\">\n            <div className=\"flex justify-center items-center mb-2\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42px\" height=\"42px\" viewBox=\"0 0 32 33\" fill=\"none\">\n                <path d=\"M16 28.5C22.6274 28.5 28 23.1274 28 16.5C28 9.87258 22.6274 4.5 16 4.5C9.37258 4.5 4 9.87258 4 16.5C4 23.1274 9.37258 28.5 16 28.5Z\" stroke=\"#343330\" strokeWidth=\"2\" strokeMiterlimit=\"10\" />\n                <path d=\"M11.5 15.5C12.3284 15.5 13 14.8284 13 14C13 13.1716 12.3284 12.5 11.5 12.5C10.6716 12.5 10 13.1716 10 14C10 14.8284 10.6716 15.5 11.5 15.5Z\" fill=\"#343330\" />\n                <path d=\"M20.5 15.5C21.3284 15.5 22 14.8284 22 14C22 13.1716 21.3284 12.5 20.5 12.5C19.6716 12.5 19 13.1716 19 14C19 14.8284 19.6716 15.5 20.5 15.5Z\" fill=\"#343330\" />\n                <path d=\"M21 22.5C19.9625 20.7062 18.2213 19.5 16 19.5C13.7787 19.5 12.0375 20.7062 11 22.5\" stroke=\"#343330\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n              </svg>\n            </div>\n            <div className=\"flex flex-col gap-1 text-center\">\n              <h1 className=\"text-2xl font-medium text-neutral-800\">Something went wrong</h1>\n              <p className=\"text-neutral-600 text-base w w-8/12 mx-auto\">We encountered an unexpected error while processing your request.</p>\n            </div>\n            <div className=\"flex justify-center items-center mt-6\">\n              <button\n                onClick={() => {\n                  window.location.href = \"/\";\n                }}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded flex items-center gap-2 transition-colors duration-200 shadow-sm\"\n              >\n                <Icon name=\"ArrowLeft\" size={18} color=\"#fff\" />\n                Back\n              </button>\n            </div>\n          </div >\n        </div >\n      );\n    }\n\n    return this.props?.children;\n  }\n}\n\nexport default ErrorBoundary;","size_bytes":2599},"src/components/ScrollToTop.jsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nexport default ScrollToTop;","size_bytes":263},"src/contexts/AuthContext.jsx":{"content":"\nimport React, { createContext, useContext, useEffect, useState } from 'react'\nimport dataService from '../services/dataService'\n\nconst AuthContext = createContext({})\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider')\n  }\n  return context\n}\n\nexport const AuthProvider = ({ children, setError }) => {\n  const [user, setUser] = useState(null)\n  const [userProfile, setUserProfile] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Check for existing session in localStorage\n    const checkExistingSession = async () => {\n      try {\n        const sessionData = localStorage.getItem('neenu_auth_session');\n        if (sessionData) {\n          const session = JSON.parse(sessionData);\n          const user = dataService.getUser(session.userId);\n          if (user) {\n            setUser(user);\n            setUserProfile(user);\n          }\n        }\n      } catch (error) {\n        console.error('Error checking session:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkExistingSession();\n  }, [])\n\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const user = dataService.authenticate(email, password);\n      \n      if (user) {\n        setUser(user);\n        setUserProfile(user);\n        \n        // Save session\n        localStorage.setItem('neenu_auth_session', JSON.stringify({\n          userId: user.id,\n          timestamp: Date.now()\n        }));\n        \n        return { user, error: null };\n      } else {\n        return { user: null, error: { message: 'Invalid credentials' } };\n      }\n    } catch (error) {\n      return { user: null, error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setUser(null);\n      setUserProfile(null);\n      localStorage.removeItem('neenu_auth_session');\n      return { error: null };\n    } catch (error) {\n      return { error };\n    }\n  };\n\n  const isAdmin = () => {\n    return user?.role === 'admin';\n  };\n\n  const signUp = async (userData) => {\n    try {\n      setLoading(true);\n      \n      // Check if user already exists\n      const existingUser = dataService.getUserByEmail(userData.email);\n      if (existingUser) {\n        return { user: null, error: { message: 'User already exists with this email' } };\n      }\n      \n      // Create new user\n      const newUser = dataService.addUser({\n        name: userData.name,\n        email: userData.email,\n        password: userData.password,\n        role: 'customer',\n        phone: userData.phone || '',\n        memberSince: new Date().toISOString().split('T')[0],\n        totalOrders: 0,\n        totalSpent: 0,\n        loyaltyPoints: 0,\n        totalSaved: 0,\n        isActive: true\n      });\n      \n      if (newUser) {\n        setUser(newUser);\n        setUserProfile(newUser);\n        \n        // Save session\n        localStorage.setItem('neenu_auth_session', JSON.stringify({\n          userId: newUser.id,\n          timestamp: Date.now()\n        }));\n        \n        return { user: newUser, error: null };\n      } else {\n        return { user: null, error: { message: 'Failed to create user' } };\n      }\n    } catch (error) {\n      return { user: null, error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async (updates) => {\n    try {\n      if (!user) return { error: { message: 'No user logged in' } };\n      \n      const updatedUser = { ...user, ...updates };\n      setUser(updatedUser);\n      setUserProfile(updatedUser);\n      \n      // In a real app, you'd update the database here\n      return { error: null };\n    } catch (error) {\n      return { error };\n    }\n  };\n\n  const value = {\n    user,\n    userProfile,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    isAdmin,\n    updateProfile\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n","size_bytes":4018},"src/contexts/CartContext.jsx":{"content":"\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\nconst CartContext = createContext({});\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within CartProvider');\n  }\n  return context;\n};\n\nexport const CartProvider = ({ children }) => {\n  const [cartItems, setCartItems] = useState([]);\n  const [savedItems, setSavedItems] = useState([]);\n  const [wishlistItems, setWishlistItems] = useState([]);\n\n  // Simple notification function\n  const showNotification = (message, type = 'success') => {\n    // Create a simple toast notification\n    const notification = document.createElement('div');\n    notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm ${\n      type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'\n    }`;\n    notification.innerHTML = `\n      <div class=\"flex items-center gap-2\">\n        <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          ${type === 'success' \n            ? '<path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\"></path>'\n            : '<path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\"></path>'\n          }\n        </svg>\n        <span>${message}</span>\n      </div>\n    `;\n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.remove();\n    }, 3000);\n  };\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('neenu_cart');\n    const savedForLater = localStorage.getItem('neenu_saved_items');\n    const savedWishlist = localStorage.getItem('neenu_wishlist');\n    \n    if (savedCart) {\n      try {\n        setCartItems(JSON.parse(savedCart));\n      } catch (error) {\n        console.error('Error loading cart:', error);\n      }\n    }\n    \n    if (savedForLater) {\n      try {\n        setSavedItems(JSON.parse(savedForLater));\n      } catch (error) {\n        console.error('Error loading saved items:', error);\n      }\n    }\n    \n    if (savedWishlist) {\n      try {\n        setWishlistItems(JSON.parse(savedWishlist));\n      } catch (error) {\n        console.error('Error loading wishlist:', error);\n      }\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('neenu_cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  useEffect(() => {\n    localStorage.setItem('neenu_saved_items', JSON.stringify(savedItems));\n  }, [savedItems]);\n\n  useEffect(() => {\n    localStorage.setItem('neenu_wishlist', JSON.stringify(wishlistItems));\n  }, [wishlistItems]);\n\n  const addToCart = (product, quantity = 1) => {\n    setCartItems(prev => {\n      const existingItem = prev.find(item => item.id === product.id);\n      if (existingItem) {\n        showNotification(`Updated ${product.name} quantity in cart!`);\n        return prev.map(item =>\n          item.id === product.id\n            ? { ...item, quantity: item.quantity + quantity }\n            : item\n        );\n      } else {\n        showNotification(`${product.name} added to cart!`);\n        return [...prev, { ...product, quantity }];\n      }\n    });\n  };\n\n  const updateQuantity = (itemId, newQuantity) => {\n    if (newQuantity <= 0) {\n      removeFromCart(itemId);\n      return;\n    }\n    \n    setCartItems(prev =>\n      prev.map(item =>\n        item.id === itemId ? { ...item, quantity: newQuantity } : item\n      )\n    );\n  };\n\n  const removeFromCart = (itemId) => {\n    setCartItems(prev => prev.filter(item => item.id !== itemId));\n  };\n\n  const saveForLater = (itemId) => {\n    const item = cartItems.find(item => item.id === itemId);\n    if (item) {\n      setSavedItems(prev => [...prev, { ...item, quantity: 1 }]);\n      removeFromCart(itemId);\n    }\n  };\n\n  const moveToCart = (item) => {\n    addToCart(item, 1);\n    setSavedItems(prev => prev.filter(saved => saved.id !== item.id));\n  };\n\n  const removeFromSaved = (itemId) => {\n    setSavedItems(prev => prev.filter(item => item.id !== itemId));\n  };\n\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  const getCartTotal = () => {\n    return cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  };\n\n  const getCartItemCount = () => {\n    return cartItems.reduce((count, item) => count + item.quantity, 0);\n  };\n\n  const addToWishlist = (product) => {\n    setWishlistItems(prev => {\n      const existingItem = prev.find(item => item.id === product.id);\n      if (existingItem) {\n        showNotification(`${product.name} is already in wishlist!`, 'error');\n        return prev;\n      } else {\n        showNotification(`${product.name} added to wishlist!`);\n        return [...prev, product];\n      }\n    });\n  };\n\n  const removeFromWishlist = (productId) => {\n    setWishlistItems(prev => {\n      const product = prev.find(item => item.id === productId);\n      if (product) {\n        showNotification(`${product.name} removed from wishlist!`);\n      }\n      return prev.filter(item => item.id !== productId);\n    });\n  };\n\n  const isInWishlist = (productId) => {\n    return wishlistItems.some(item => item.id === productId);\n  };\n\n  const value = {\n    cartItems,\n    savedItems,\n    wishlistItems,\n    addToCart,\n    updateQuantity,\n    removeFromCart,\n    saveForLater,\n    moveToCart,\n    removeFromSaved,\n    clearCart,\n    getCartTotal,\n    getCartItemCount,\n    addToWishlist,\n    removeFromWishlist,\n    isInWishlist\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n","size_bytes":5890},"src/lib/jsonDb.js":{"content":"\nclass JsonDatabase {\n  constructor() {\n    this.data = null;\n    this.loadData();\n  }\n\n  async loadData() {\n    try {\n      const response = await fetch('/src/data/database.json');\n      this.data = await response.json();\n    } catch (error) {\n      console.error('Failed to load database:', error);\n      // Fallback data\n      this.data = {\n        users: [\n          {\n            id: \"1\",\n            username: \"admin\",\n            password: \"admin123\",\n            email: \"admin@neenusnatural.com\",\n            role: \"admin\",\n            name: \"Administrator\",\n            phone: \"+91 80 4567 8901\",\n            memberSince: \"2024-01-01\",\n            isActive: true\n          }\n        ],\n        products: [],\n        orders: [],\n        categories: []\n      };\n    }\n  }\n\n  // User authentication\n  async authenticateUser(username, password) {\n    await this.loadData();\n    const user = this.data.users.find(u => \n      u.username === username && u.password === password && u.isActive\n    );\n    return user || null;\n  }\n\n  // Get user by ID\n  async getUserById(id) {\n    await this.loadData();\n    return this.data.users.find(u => u.id === id) || null;\n  }\n\n  // Products CRUD\n  async getProducts() {\n    await this.loadData();\n    return this.data.products;\n  }\n\n  async getProductById(id) {\n    await this.loadData();\n    return this.data.products.find(p => p.id === id) || null;\n  }\n\n  async addProduct(product) {\n    await this.loadData();\n    const newProduct = {\n      ...product,\n      id: (this.data.products.length + 1).toString(),\n      createdAt: new Date().toISOString()\n    };\n    this.data.products.push(newProduct);\n    this.saveData();\n    return newProduct;\n  }\n\n  async updateProduct(id, updates) {\n    await this.loadData();\n    const index = this.data.products.findIndex(p => p.id === id);\n    if (index !== -1) {\n      this.data.products[index] = { ...this.data.products[index], ...updates };\n      this.saveData();\n      return this.data.products[index];\n    }\n    return null;\n  }\n\n  async deleteProduct(id) {\n    await this.loadData();\n    const index = this.data.products.findIndex(p => p.id === id);\n    if (index !== -1) {\n      this.data.products.splice(index, 1);\n      this.saveData();\n      return true;\n    }\n    return false;\n  }\n\n  // Orders CRUD\n  async getOrders() {\n    await this.loadData();\n    return this.data.orders;\n  }\n\n  async addOrder(order) {\n    await this.loadData();\n    const newOrder = {\n      ...order,\n      id: (this.data.orders.length + 1).toString(),\n      createdAt: new Date().toISOString(),\n      status: 'pending'\n    };\n    this.data.orders.push(newOrder);\n    this.saveData();\n    return newOrder;\n  }\n\n  // Categories\n  async getCategories() {\n    await this.loadData();\n    return this.data.categories;\n  }\n\n  // Save data (in a real app, this would save to server)\n  saveData() {\n    // Store in localStorage for persistence in browser\n    localStorage.setItem('neenu_natural_db', JSON.stringify(this.data));\n    console.log('Data saved to localStorage');\n  }\n\n  // Load from localStorage if available\n  loadFromStorage() {\n    const stored = localStorage.getItem('neenu_natural_db');\n    if (stored) {\n      this.data = JSON.parse(stored);\n      return true;\n    }\n    return false;\n  }\n}\n\nexport const jsonDb = new JsonDatabase();\n","size_bytes":3309},"src/lib/supabase.js":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = import.meta.env?.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env?.VITE_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env file for VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n  }\n});\n","size_bytes":500},"src/pages/NotFound.jsx":{"content":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Button from 'components/ui/Button';\nimport Icon from 'components/AppIcon';\n\nconst NotFound = () => {\n  const navigate = useNavigate();\n\n  const handleGoHome = () => {\n    navigate('/');\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-background p-4\">\n      <div className=\"text-center max-w-md\">\n        <div className=\"flex justify-center mb-6\">\n          <div className=\"relative\">\n            <h1 className=\"text-9xl font-bold text-primary opacity-20\">404</h1>\n          </div>\n        </div>\n\n        <h2 className=\"text-2xl font-medium text-onBackground mb-2\">Page Not Found</h2>\n        <p className=\"text-onBackground/70 mb-8\">\n          The page you're looking for doesn't exist. Let's get you back!\n        </p>\n\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button\n            variant=\"primary\"\n            icon={<Icon name=\"ArrowLeft\" />}\n            iconPosition=\"left\"\n            onClick={() => window.history?.back()}\n          >\n            Go Back\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            icon={<Icon name=\"Home\" />}\n            iconPosition=\"left\"\n            onClick={handleGoHome}\n          >\n            Back to Home\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":1438},"src/services/dataService.js":{"content":"// Import database data\nimport databaseData from '../data/database.json';\n\n\n// Mock data service to simulate API calls\nconst additionalProducts = [\n  // Unpolished Pulses, Dals & Rice\n  {\n    id: 1,\n    name: \"Bengal Gram Dal\",\n    category: \"unpolished-pulses-dals-rice\",\n    price: 120,\n    originalPrice: 140,\n    rating: 4.5,\n    image: \"https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400&h=300&fit=crop\",\n    description: \"Premium quality Bengal gram dal, rich in protein\",\n    inStock: true,\n    weight: \"1kg\"\n  },\n  {\n    id: 2,\n    name: \"Black Chickpeas\",\n    category: \"unpolished-pulses-dals-rice\",\n    price: 110,\n    originalPrice: 130,\n    rating: 4.3,\n    image: \"https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400&h=300&fit=crop\",\n    description: \"Nutritious black chickpeas for healthy cooking\",\n    inStock: true,\n    weight: \"500g\"\n  },\n  {\n    id: 3,\n    name: \"Green Gram\",\n    category: \"unpolished-pulses-dals-rice\",\n    price: 95,\n    originalPrice: 115,\n    rating: 4.4,\n    image: \"https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400&h=300&fit=crop\",\n    description: \"Fresh green gram for traditional recipes\",\n    inStock: true,\n    weight: \"1kg\"\n  },\n  {\n    id: 4,\n    name: \"Horse Gram\",\n    category: \"unpolished-pulses-dals-rice\",\n    price: 85,\n    originalPrice: 100,\n    rating: 4.2,\n    image: \"https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400&h=300&fit=crop\",\n    description: \"High protein horse gram for health conscious\",\n    inStock: true,\n    weight: \"500g\"\n  },\n  {\n    id: 5,\n    name: \"Idly Rice\",\n    category: \"unpolished-pulses-dals-rice\",\n    price: 65,\n    originalPrice: 75,\n    rating: 4.6,\n    image: \"https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400&h=300&fit=crop\",\n    description: \"Perfect rice for making soft idlies\",\n    inStock: true,\n    weight: \"1kg\"\n  },\n  {\n    id: 6,\n    name: \"Jeera Samba Rice\",\n    category: \"unpolished-pulses-dals-rice\",\n    price: 150,\n    originalPrice: 170,\n    rating: 4.7,\n    image: \"https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400&h=300&fit=crop\",\n    description: \"Aromatic jeera samba rice variety\",\n    inStock: true,\n    weight: \"1kg\"\n  },\n  {\n    id: 7,\n    name: \"Karuppu Kavuni Rice 1Kg\",\n    category: \"unpolished-pulses-dals-rice\",\n    price: 180,\n    originalPrice: 200,\n    rating: 4.8,\n    image: \"https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400&h=300&fit=crop\",\n    description: \"Traditional black rice with antioxidants\",\n    inStock: true,\n    weight: \"1kg\"\n  },\n  {\n    id: 8,\n    name: \"Toor Dal 1Kg\",\n    category: \"unpolished-pulses-dals-rice\",\n    price: 130,\n    originalPrice: 150,\n    rating: 4.5,\n    image: \"https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400&h=300&fit=crop\",\n    description: \"Pure toor dal for everyday cooking\",\n    inStock: true,\n    weight: \"1kg\"\n  },\n\n  // Poha / Aval\n  {\n    id: 9,\n    name: \"Mapillai Samba Aval\",\n    category: \"poha-aval\",\n    price: 80,\n    originalPrice: 95,\n    rating: 4.4,\n    image: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=400&h=300&fit=crop\",\n    description: \"Traditional mapillai samba flattened rice\",\n    inStock: true,\n    weight: \"500g\"\n  },\n  {\n    id: 10,\n    name: \"Ponni Boiled Aval\",\n    category: \"poha-aval\",\n    price: 70,\n    originalPrice: 85,\n    rating: 4.3,\n    image: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=400&h=300&fit=crop\",\n    description: \"Quality ponni boiled aval for breakfast\",\n    inStock: true,\n    weight: \"500g\"\n  },\n  {\n    id: 11,\n    name: \"Wheat Aval\",\n    category: \"poha-aval\",\n    price: 75,\n    originalPrice: 90,\n    rating: 4.2,\n    image: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=400&h=300&fit=crop\",\n    description: \"Nutritious wheat aval for healthy meals\",\n    inStock: true,\n    weight: \"500g\"\n  },\n\n  // Sugars & Honey\n  {\n    id: 12,\n    name: \"Cane Sugar 1Kg\",\n    category: \"sugars-honey\",\n    price: 90,\n    originalPrice: 105,\n    rating: 4.5,\n    image: \"https://images.unsplash.com/photo-1587049352846-4a222e784d38?w=400&h=300&fit=crop\",\n    description: \"Pure cane sugar for natural sweetness\",\n    inStock: true,\n    weight: \"1kg\"\n  },\n  {\n    id: 13,\n    name: \"Cane Jaggery 1Kg\",\n    category: \"sugars-honey\",\n    price: 120,\n    originalPrice: 140,\n    rating: 4.6,\n    image: \"https://images.unsplash.com/photo-1587049352846-4a222e784d38?w=400&h=300&fit=crop\",\n    description: \"Traditional cane jaggery for healthy cooking\",\n    inStock: true,\n    weight: \"1kg\"\n  },\n  {\n    id: 14,\n    name: \"Honey 500g\",\n    category: \"sugars-honey\",\n    price: 300,\n    originalPrice: 350,\n    rating: 4.8,\n    image: \"https://images.unsplash.com/photo-1587049352846-4a222e784d38?w=400&h=300&fit=crop\",\n    description: \"Pure organic honey from local farms\",\n    inStock: true,\n    weight: \"500g\"\n  },\n\n  // Haircare Products\n  {\n    id: 15,\n    name: \"Aloe Vera Shampoo 500ml\",\n    category: \"haircare-products\",\n    price: 250,\n    originalPrice: 300,\n    rating: 4.5,\n    image: \"https://images.unsplash.com/photo-1522335789203-aabd1fc54bc9?w=400&h=300&fit=crop\",\n    description: \"Natural aloe vera shampoo for healthy hair\",\n    inStock: true,\n    weight: \"500ml\"\n  },\n  {\n    id: 16,\n    name: \"Amla Shampoo 200ml\",\n    category: \"haircare-products\",\n    price: 180,\n    originalPrice: 220,\n    rating: 4.4,\n    image: \"https://images.unsplash.com/photo-1522335789203-aabd1fc54bc9?w=400&h=300&fit=crop\",\n    description: \"Amla enriched shampoo for strong hair\",\n    inStock: true,\n    weight: \"200ml\"\n  },\n  {\n    id: 17,\n    name: \"Hair Oil Mix 65gm\",\n    category: \"haircare-products\",\n    price: 150,\n    originalPrice: 180,\n    rating: 4.6,\n    image: \"https://images.unsplash.com/photo-1522335789203-aabd1fc54bc9?w=400&h=300&fit=crop\",\n    description: \"Herbal hair oil mix for nourishment\",\n    inStock: true,\n    weight: \"65g\"\n  },\n\n  // Skincare Products\n  {\n    id: 18,\n    name: \"Aloe Vera Gel 150g\",\n    category: \"skincare-products\",\n    price: 120,\n    originalPrice: 140,\n    rating: 4.7,\n    image: \"https://images.unsplash.com/photo-1556228453-efd6c1ff04f6?w=400&h=300&fit=crop\",\n    description: \"Pure aloe vera gel for skin care\",\n    inStock: true,\n    weight: \"150g\"\n  },\n  {\n    id: 19,\n    name: \"Rose Water 200ml\",\n    category: \"skincare-products\",\n    price: 80,\n    originalPrice: 100,\n    rating: 4.5,\n    image: \"https://images.unsplash.com/photo-1556228453-efd6c1ff04f6?w=400&h=300&fit=crop\",\n    description: \"Natural rose water for glowing skin\",\n    inStock: true,\n    weight: \"200ml\"\n  },\n\n  // Millet Items\n  {\n    id: 20,\n    name: \"Millet Biscuits\",\n    category: \"millet-items\",\n    price: 90,\n    originalPrice: 110,\n    rating: 4.3,\n    image: \"https://images.unsplash.com/photo-1558961363-fa8fdf82db35?w=400&h=300&fit=crop\",\n    description: \"Healthy millet biscuits for snacking\",\n    inStock: true,\n    weight: \"200g\"\n  },\n  {\n    id: 21,\n    name: \"Pearl Millet 500g\",\n    category: \"millet-items\",\n    price: 85,\n    originalPrice: 100,\n    rating: 4.4,\n    image: \"https://images.unsplash.com/photo-1558961363-fa8fdf82db35?w=400&h=300&fit=crop\",\n    description: \"Nutritious pearl millet for healthy diet\",\n    inStock: true,\n    weight: \"500g\"\n  },\n\n  // Powders\n  {\n    id: 22,\n    name: \"Turmeric Powder 200g\",\n    category: \"powders\",\n    price: 60,\n    originalPrice: 75,\n    rating: 4.6,\n    image: \"https://images.unsplash.com/photo-1505576399279-565b52d4ac71?w=400&h=300&fit=crop\",\n    description: \"Pure turmeric powder for cooking and health\",\n    inStock: true,\n    weight: \"200g\"\n  },\n  {\n    id: 23,\n    name: \"Sambar Powder 200g\",\n    category: \"powders\",\n    price: 85,\n    originalPrice: 100,\n    rating: 4.5,\n    image: \"https://images.unsplash.com/photo-1505576399279-565b52d4ac71?w=400&h=300&fit=crop\",\n    description: \"Authentic sambar powder blend\",\n    inStock: true,\n    weight: \"200g\"\n  },\n\n  // Fries\n  {\n    id: 24,\n    name: \"Rice Fries 100g\",\n    category: \"fries\",\n    price: 45,\n    originalPrice: 55,\n    rating: 4.2,\n    image: \"https://images.unsplash.com/photo-1601314002957-dd80bd16ac23?w=400&h=300&fit=crop\",\n    description: \"Crispy rice fries for side dishes\",\n    inStock: true,\n    weight: \"100g\"\n  },\n\n  // Herbal Handmade Soaps\n  {\n    id: 25,\n    name: \"Neem Handmade Soap\",\n    category: \"herbal-handmade-soaps\",\n    price: 65,\n    originalPrice: 80,\n    rating: 4.5,\n    image: \"https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=300&fit=crop\",\n    description: \"Natural neem soap for skin care\",\n    inStock: true,\n    weight: \"100g\"\n  },\n  {\n    id: 26,\n    name: \"Turmeric Handmade Soap\",\n    category: \"herbal-handmade-soaps\",\n    price: 70,\n    originalPrice: 85,\n    rating: 4.6,\n    image: \"https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=300&fit=crop\",\n    description: \"Turmeric enriched soap for glowing skin\",\n    inStock: true,\n    weight: \"100g\"\n  },\n\n  // Snacks\n  {\n    id: 27,\n    name: \"Ragi Laddu 100g\",\n    category: \"snacks\",\n    price: 120,\n    originalPrice: 140,\n    rating: 4.4,\n    image: \"https://images.unsplash.com/photo-1551024506-0bccd828d307?w=400&h=300&fit=crop\",\n    description: \"Healthy ragi laddu for energy\",\n    inStock: true,\n    weight: \"100g\"\n  },\n  {\n    id: 28,\n    name: \"Sesame Laddu 100g\",\n    category: \"snacks\",\n    price: 110,\n    originalPrice: 130,\n    rating: 4.3,\n    image: \"https://images.unsplash.com/photo-1551024506-0bccd828d307?w=400&h=300&fit=crop\",\n    description: \"Traditional sesame laddu\",\n    inStock: true,\n    weight: \"100g\"\n  },\n\n  // Herbal Products\n  {\n    id: 29,\n    name: \"Amla Powder 100g\",\n    category: \"herbal-products\",\n    price: 95,\n    originalPrice: 115,\n    rating: 4.5,\n    image: \"https://images.unsplash.com/photo-1471943311424-646960669fbc?w=400&h=300&fit=crop\",\n    description: \"Pure amla powder for health benefits\",\n    inStock: true,\n    weight: \"100g\"\n  },\n  {\n    id: 30,\n    name: \"Neem Leaf Powder\",\n    category: \"herbal-products\",\n    price: 80,\n    originalPrice: 95,\n    rating: 4.4,\n    image: \"https://images.unsplash.com/photo-1471943311424-646960669fbc?w=400&h=300&fit=crop\",\n    description: \"Natural neem leaf powder for wellness\",\n    inStock: true,\n    weight: \"100g\"\n  },\n\n  // Herbal Powders\n  {\n    id: 31,\n    name: \"Moringa Powder\",\n    category: \"herbal-powders\",\n    price: 150,\n    originalPrice: 175,\n    rating: 4.7,\n    image: \"https://images.unsplash.com/photo-1471943311424-646960669fbc?w=400&h=300&fit=crop\",\n    description: \"Nutrient-rich moringa powder\",\n    inStock: true,\n    weight: \"100g\"\n  },\n  {\n    id: 32,\n    name: \"Hibiscus Powder 100g\",\n    category: \"herbal-powders\",\n    price: 90,\n    originalPrice: 110,\n    rating: 4.5,\n    image: \"https://images.unsplash.com/photo-1471943311424-646960669fbc?w=400&h=300&fit=crop\",\n    description: \"Natural hibiscus powder for hair care\",\n    inStock: true,\n    weight: \"100g\"\n  }\n];\n\n// Categories data with all 12 categories\nconst categories = [\n  {\n    id: 'unpolished-pulses-dals-rice',\n    name: 'Unpolished Pulses, Dals & Rice',\n    description: 'Chemical-free rice varieties and authentic pulses',\n    image: 'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400&h=300&fit=crop',\n    productCount: 8\n  },\n  {\n    id: 'poha-aval',\n    name: 'Poha / Aval',\n    description: 'Traditional flattened rice varieties',\n    image: 'https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=400&h=300&fit=crop',\n    productCount: 3\n  },\n  {\n    id: 'sugars-honey',\n    name: 'Sugars & Honey',\n    description: 'Natural sweeteners and organic honey',\n    image: 'https://images.unsplash.com/photo-1587049352846-4a222e784d38?w=400&h=300&fit=crop',\n    productCount: 3\n  },\n  {\n    id: 'haircare-products',\n    name: 'Haircare Products',\n    description: 'Natural hair care solutions and oils',\n    image: 'https://images.unsplash.com/photo-1522335789203-aabd1fc54bc9?w=400&h=300&fit=crop',\n    productCount: 3\n  },\n  {\n    id: 'skincare-products',\n    name: 'Skincare Products',\n    description: 'Herbal skincare and beauty products',\n    image: 'https://images.unsplash.com/photo-1556228453-efd6c1ff04f6?w=400&h=300&fit=crop',\n    productCount: 2\n  },\n  {\n    id: 'millet-items',\n    name: 'Millet Items',\n    description: 'Healthy millet-based food products',\n    image: 'https://images.unsplash.com/photo-1558961363-fa8fdf82db35?w=400&h=300&fit=crop',\n    productCount: 2\n  },\n  {\n    id: 'powders',\n    name: 'Powders',\n    description: 'Spice powders and cooking essentials',\n    image: 'https://images.unsplash.com/photo-1505576399279-565b52d4ac71?w=400&h=300&fit=crop',\n    productCount: 2\n  },\n  {\n    id: 'fries',\n    name: 'Fries',\n    description: 'Traditional South Indian fries and appetizers',\n    image: 'https://images.unsplash.com/photo-1601314002957-dd80bd16ac23?w=400&h=300&fit=crop',\n    productCount: 1\n  },\n  {\n    id: 'herbal-handmade-soaps',\n    name: 'Herbal Handmade Soaps',\n    description: 'Natural handmade soaps for skin care',\n    image: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=300&fit=crop',\n    productCount: 2\n  },\n  {\n    id: 'snacks',\n    name: 'Snacks',\n    description: 'Healthy traditional snacks and sweets',\n    image: 'https://images.unsplash.com/photo-1551024506-0bccd828d307?w=400&h=300&fit=crop',\n    productCount: 2\n  },\n  {\n    id: 'herbal-products',\n    name: 'Herbal Products',\n    description: 'Natural herbal remedies and wellness products',\n    image: 'https://images.unsplash.com/photo-1471943311424-646960669fbc?w=400&h=300&fit=crop',\n    productCount: 2\n  },\n  {\n    id: 'herbal-powders',\n    name: 'Herbal Powders',\n    description: 'Pure herbal powders for health and beauty',\n    image: 'https://images.unsplash.com/photo-1471943311424-646960669fbc?w=400&h=300&fit=crop',\n    productCount: 2\n  }\n];\n\n// Simulate API delay\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Use users from database.json and extend with additional properties\nlet users = databaseData.users.map(user => ({\n  ...user,\n  id: parseInt(user.id),\n  totalOrders: user.totalOrders || 0,\n  totalSpent: user.totalSpent || 0,\n  loyaltyPoints: user.loyaltyPoints || 0,\n  totalSaved: user.totalSaved || 0\n}));\n\n// Load additional users from localStorage if available\nconst loadUsersFromStorage = () => {\n  const stored = localStorage.getItem('neenu_natural_users');\n  if (stored) {\n    const storedUsers = JSON.parse(stored);\n    // Merge with existing users, avoiding duplicates\n    storedUsers.forEach(storedUser => {\n      if (!users.find(u => u.id === storedUser.id || u.email === storedUser.email)) {\n        users.push(storedUser);\n      }\n    });\n  }\n};\n\n// Save users to localStorage\nconst saveUsersToStorage = () => {\n  // Only save customer users (not admin) to storage\n  const customerUsers = users.filter(u => u.role === 'customer');\n  localStorage.setItem('neenu_natural_users', JSON.stringify(customerUsers));\n};\n\n// Initialize users on load\nloadUsersFromStorage();\n\n// Mock orders data - load from localStorage if available\nlet orders = [\n  {\n    id: 1,\n    userId: 2,\n    items: [\n      { productId: 1, name: \"Organic Coconut Oil\", quantity: 2, price: 450 }\n    ],\n    total: 950,\n    subtotal: 900,\n    shipping: 50,\n    status: \"delivered\",\n    paymentMethod: \"cod\",\n    shippingAddress: {\n      name: \"John Doe\",\n      street: \"123 Main Street\",\n      city: \"Mumbai\",\n      state: \"Maharashtra\",\n      pincode: \"400001\"\n    },\n    createdAt: \"2024-08-15T10:30:00Z\"\n  },\n  {\n    id: 2,\n    userId: 2,\n    items: [\n      { productId: 2, name: \"A2 Cow Ghee\", quantity: 1, price: 850 }\n    ],\n    total: 900,\n    subtotal: 850,\n    shipping: 50,\n    status: \"shipped\",\n    paymentMethod: \"upi\",\n    shippingAddress: {\n      name: \"John Doe\",\n      street: \"123 Main Street\",\n      city: \"Mumbai\",\n      state: \"Maharashtra\",\n      pincode: \"400001\"\n    },\n    createdAt: \"2024-08-20T14:15:00Z\"\n  }\n];\n\n// Load additional orders from localStorage if available\nconst loadOrdersFromStorage = () => {\n  const stored = localStorage.getItem('neenu_natural_orders');\n  if (stored) {\n    const storedOrders = JSON.parse(stored);\n    // Merge with existing orders, avoiding duplicates\n    storedOrders.forEach(storedOrder => {\n      if (!orders.find(o => o.id === storedOrder.id)) {\n        orders.push(storedOrder);\n      }\n    });\n  }\n};\n\n// Save orders to localStorage\nconst saveOrdersToStorage = () => {\n  localStorage.setItem('neenu_natural_orders', JSON.stringify(orders));\n};\n\n// Initialize orders on load\nloadOrdersFromStorage();\n\n// Settings data\nconst settings = {\n  siteName: \"Neenu's Natural\",\n  currency: \"INR\",\n  shippingFee: 50,\n  freeShippingThreshold: 500,\n  taxRate: 0.18\n};\n\n// Combine products from database.json and additional products with unique IDs\nconst products = [\n  ...databaseData.products,\n  ...additionalProducts.map(product => ({\n    ...product,\n    id: product.id + 100 // Offset additional products to avoid ID conflicts\n  }))\n];\n\nconst dataService = {\n  // Authentication methods\n  authenticate(emailOrUsername, password) {\n    console.log('Authenticating user:', emailOrUsername);\n    console.log('Available users:', users.map(u => ({ email: u.email, username: u.username, role: u.role })));\n    const user = users.find(u => \n      (u.email === emailOrUsername || u.username === emailOrUsername) && \n      u.password === password\n    );\n    console.log('Found user:', user);\n    return user || null;\n  },\n\n  // User management\n  getUser(id) {\n    return users.find(u => u.id === parseInt(id));\n  },\n\n  getUserByEmail(email) {\n    return users.find(u => u.email === email);\n  },\n\n  getUsers() {\n    return users;\n  },\n\n  addUser(userData) {\n    const newUser = {\n      ...userData,\n      id: Math.max(...users.map(u => u.id), 0) + 1,\n      createdAt: new Date().toISOString(),\n      addresses: [],\n      orders: [],\n      wishlist: []\n    };\n    users.push(newUser);\n    saveUsersToStorage(); // Persist to localStorage\n    console.log('New user added:', newUser);\n    return newUser;\n  },\n\n  updateUser(id, updates) {\n    const userIndex = users.findIndex(u => u.id === parseInt(id));\n    if (userIndex !== -1) {\n      users[userIndex] = { ...users[userIndex], ...updates };\n      saveUsersToStorage();\n      return users[userIndex];\n    }\n    return null;\n  },\n\n  // Order management  \n  getOrders() {\n    return orders;\n  },\n\n  getOrdersByUserId(userId) {\n    return orders.filter(o => o.userId === parseInt(userId));\n  },\n\n  getOrder(id) {\n    return orders.find(o => o.id === parseInt(id));\n  },\n\n  updateOrder(id, updates) {\n    const orderIndex = orders.findIndex(o => o.id === parseInt(id));\n    if (orderIndex !== -1) {\n      orders[orderIndex] = { ...orders[orderIndex], ...updates };\n      saveOrdersToStorage(); // Persist changes\n      return orders[orderIndex];\n    }\n    return null;\n  },\n\n  addOrder(orderData) {\n    const newOrder = {\n      ...orderData,\n      id: Math.max(...orders.map(o => o.id), 0) + 1,\n      orderId: orderData.orderId || `NN${Date.now().toString().slice(-6)}`,\n      createdAt: new Date().toISOString()\n    };\n    orders.push(newOrder);\n    saveOrdersToStorage(); // Persist to localStorage\n    \n    // Update user's order history and stats\n    if (orderData.userId) {\n      const user = users.find(u => u.id === parseInt(orderData.userId));\n      if (user) {\n        user.totalOrders = (user.totalOrders || 0) + 1;\n        user.totalSpent = (user.totalSpent || 0) + (orderData.total || 0);\n        saveUsersToStorage();\n      }\n    }\n    \n    console.log('Order added to database:', newOrder);\n    return newOrder;\n  },\n\n  // Settings management\n  getSettings() {\n    return settings;\n  },\n\n  updateSettings(newSettings) {\n    Object.assign(settings, newSettings);\n    return settings;\n  },\n\n  // Get all products\n  async getProducts(filters = {}) {\n    await delay(500);\n    let filteredProducts = [...products];\n\n    // Filter by category\n    if (filters.category) {\n      filteredProducts = filteredProducts.filter(product =>\n        product.category === filters.category\n      );\n    }\n\n    // Filter by search query\n    if (filters.search) {\n      const searchTerm = filters.search.toLowerCase();\n      filteredProducts = filteredProducts.filter(product =>\n        product.name.toLowerCase().includes(searchTerm) ||\n        product.description.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    // Filter by price range\n    if (filters.priceRange) {\n      const [min, max] = filters.priceRange.split('-').map(Number);\n      filteredProducts = filteredProducts.filter(product =>\n        product.price >= min && product.price <= max\n      );\n    }\n\n    // Sort products\n    if (filters.sortBy) {\n      switch (filters.sortBy) {\n        case 'price-low':\n          filteredProducts.sort((a, b) => a.price - b.price);\n          break;\n        case 'price-high':\n          filteredProducts.sort((a, b) => b.price - a.price);\n          break;\n        case 'rating':\n          filteredProducts.sort((a, b) => b.rating - a.rating);\n          break;\n        case 'name':\n          filteredProducts.sort((a, b) => a.name.localeCompare(b.name));\n          break;\n        default:\n          break;\n      }\n    }\n\n    return {\n      data: filteredProducts,\n      total: filteredProducts.length\n    };\n  },\n\n  // Get product by ID\n  async getProductById(id) {\n    await delay(300);\n    const product = products.find(p => p.id === parseInt(id));\n    if (!product) {\n      throw new Error('Product not found');\n    }\n    return { data: product };\n  },\n\n  // Get categories\n  async getCategories() {\n    await delay(200);\n    return { data: categories };\n  },\n\n  // Get featured products\n  async getFeaturedProducts(limit = 8) {\n    await delay(400);\n    const featured = products\n      .filter(product => product.rating >= 4.5)\n      .slice(0, limit);\n    return { data: featured };\n  },\n\n  // Get bestsellers\n  async getBestsellers(limit = 6) {\n    await delay(300);\n    const bestsellers = products\n      .sort((a, b) => b.rating - a.rating)\n      .slice(0, limit);\n    return { data: bestsellers };\n  },\n\n  // Get related products\n  async getRelatedProducts(productId, limit = 4) {\n    await delay(300);\n    const product = products.find(p => p.id === parseInt(productId));\n    if (!product) return { data: [] };\n\n    const related = products\n      .filter(p => p.category === product.category && p.id !== product.id)\n      .slice(0, limit);\n    return { data: related };\n  }\n};\n\nexport default dataService;","size_bytes":22617},"src/styles/index.css":{"content":"body {\n  margin: 0;\n  padding: 0;\n  font-family: Inter;\n}\n\n* {\n  box-sizing: border-box;\n  line-height: normal;\n  font-family: inherit;\n  margin: unset;\n}\n","size_bytes":155},"src/styles/tailwind.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;500;600&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    /* Core Colors */\n    --color-background: #FEFCF8; /* warm off-white */\n    --color-foreground: #2D2D2D; /* warm charcoal */\n    --color-border: #F5F5F5; /* light gray */\n    --color-input: #FFFFFF; /* white */\n    --color-ring: #D4761A; /* turmeric orange */\n    \n    /* Card Colors */\n    --color-card: #FFFFFF; /* white */\n    --color-card-foreground: #2D2D2D; /* warm charcoal */\n    \n    /* Popover Colors */\n    --color-popover: #FFFFFF; /* white */\n    --color-popover-foreground: #2D2D2D; /* warm charcoal */\n    \n    /* Muted Colors */\n    --color-muted: #F5F5F5; /* light gray */\n    --color-muted-foreground: #6B6B6B; /* medium gray */\n    \n    /* Primary Colors */\n    --color-primary: #D4761A; /* turmeric orange */\n    --color-primary-foreground: #FFFFFF; /* white */\n    \n    /* Secondary Colors */\n    --color-secondary: #8B4513; /* cinnamon brown */\n    --color-secondary-foreground: #FFFFFF; /* white */\n    \n    /* Accent Colors */\n    --color-accent: #228B22; /* curry leaf green */\n    --color-accent-foreground: #FFFFFF; /* white */\n    \n    /* Success Colors */\n    --color-success: #22C55E; /* vibrant green */\n    --color-success-foreground: #FFFFFF; /* white */\n    \n    /* Warning Colors */\n    --color-warning: #F59E0B; /* amber orange */\n    --color-warning-foreground: #FFFFFF; /* white */\n    \n    /* Error/Destructive Colors */\n    --color-error: #DC2626; /* clear red */\n    --color-error-foreground: #FFFFFF; /* white */\n    --color-destructive: #DC2626; /* clear red */\n    --color-destructive-foreground: #FFFFFF; /* white */\n  }\n\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n\n@layer utilities {\n  .font-heading {\n    font-family: 'Inter', sans-serif;\n  }\n  \n  .font-body {\n    font-family: 'Source Sans Pro', sans-serif;\n  }\n  \n  .font-caption {\n    font-family: 'Roboto', sans-serif;\n  }\n  \n  .font-data {\n    font-family: 'JetBrains Mono', monospace;\n  }\n  \n  .shadow-warm {\n    box-shadow: 0 1px 3px rgba(212, 118, 26, 0.1);\n  }\n  \n  .shadow-warm-md {\n    box-shadow: 0 4px 6px rgba(212, 118, 26, 0.1), 0 2px 4px rgba(212, 118, 26, 0.06);\n  }\n  \n  .shadow-warm-lg {\n    box-shadow: 0 10px 15px rgba(212, 118, 26, 0.1), 0 4px 6px rgba(212, 118, 26, 0.05);\n  }\n  \n  .shadow-warm-xl {\n    box-shadow: 0 20px 25px rgba(212, 118, 26, 0.1), 0 10px 10px rgba(212, 118, 26, 0.04);\n  }\n}","size_bytes":2893},"src/utils/cn.js":{"content":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs) {\n    return twMerge(clsx(inputs));\n}","size_bytes":139},"src/utils/whatsapp.js":{"content":"\nexport const sendOrderToWhatsApp = (orderData) => {\n  const phoneNumber = \"7892783668\"; // WhatsApp number\n  \n  const formatOrderMessage = (order) => {\n    const {\n      orderId,\n      customerInfo,\n      items,\n      shippingAddress,\n      paymentMethod,\n      subtotal,\n      shipping,\n      discount,\n      total\n    } = order;\n    \n    let message = `üõçÔ∏è *NEW ORDER RECEIVED*\\n\\n`;\n    message += `üìã *Order ID:* ${orderId}\\n`;\n    message += `üë§ *Customer:* ${customerInfo.name}\\n`;\n    message += `üìû *Phone:* ${customerInfo.phone}\\n`;\n    message += `üìß *Email:* ${customerInfo.email}\\n\\n`;\n    \n    message += `üõí *Items Ordered:*\\n`;\n    items.forEach((item, index) => {\n      message += `${index + 1}. ${item.name}\\n`;\n      message += `   Qty: ${item.quantity} x ‚Çπ${item.price} = ‚Çπ${item.quantity * item.price}\\n`;\n    });\n    \n    message += `\\nüìç *Shipping Address:*\\n`;\n    message += `${shippingAddress.name}\\n`;\n    message += `${shippingAddress.street}\\n`;\n    message += `${shippingAddress.city}, ${shippingAddress.state} - ${shippingAddress.pincode}\\n`;\n    message += `Phone: ${shippingAddress.phone}\\n\\n`;\n    \n    message += `üí≥ *Payment Method:* ${paymentMethod}\\n\\n`;\n    \n    message += `üí∞ *Order Summary:*\\n`;\n    message += `Subtotal: ‚Çπ${subtotal.toFixed(2)}\\n`;\n    message += `Shipping: ‚Çπ${shipping.toFixed(2)}\\n`;\n    if (discount > 0) {\n      message += `Discount: -‚Çπ${discount.toFixed(2)}\\n`;\n    }\n    message += `*Total: ‚Çπ${total.toFixed(2)}*\\n\\n`;\n    \n    message += `‚è∞ *Order Time:* ${new Date().toLocaleString()}\\n`;\n    \n    return message;\n  };\n  \n  const message = formatOrderMessage(orderData);\n  const encodedMessage = encodeURIComponent(message);\n  const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodedMessage}`;\n  \n  // Open WhatsApp in new tab\n  window.open(whatsappUrl, '_blank');\n};\n","size_bytes":1878},"src/components/ui/AnnouncementBar.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../AppIcon';\n\nconst AnnouncementBar = ({ isVisible = true, onClose }) => {\n  const [isOpen, setIsOpen] = useState(isVisible);\n\n  const handleClose = () => {\n    setIsOpen(false);\n    if (onClose) onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"bg-primary text-primary-foreground py-2 px-4 relative z-[1000]\">\n      <div className=\"container mx-auto flex items-center justify-between\">\n        <div className=\"flex-1 text-center\">\n          <p className=\"font-caption text-sm font-medium\">\n            <span className=\"hidden sm:inline\">üéâ Free shipping on orders above ‚Çπ499 | Use code </span>\n            <span className=\"font-data font-bold\">FLAT10</span>\n            <span className=\"hidden sm:inline\"> for 10% off on first order</span>\n            <span className=\"sm:hidden\">Free shipping ‚Çπ499+ | Code: FLAT10</span>\n          </p>\n        </div>\n        <button\n          onClick={handleClose}\n          className=\"ml-4 p-1 hover:bg-primary/80 rounded-full transition-colors duration-200\"\n          aria-label=\"Close announcement\"\n        >\n          <Icon name=\"X\" size={16} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default AnnouncementBar;","size_bytes":1260},"src/components/ui/Breadcrumb.jsx":{"content":"import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport Icon from '../AppIcon';\n\nconst Breadcrumb = ({ customItems = null }) => {\n  const location = useLocation();\n  \n  const pathMap = {\n    '/homepage': 'Home',\n    '/product-collection-grid': 'Products',\n    '/product-detail-page': 'Product Details',\n    '/shopping-cart': 'Shopping Cart',\n    '/user-account-dashboard': 'My Account',\n    '/checkout-process': 'Checkout'\n  };\n\n  const generateBreadcrumbs = () => {\n    if (customItems) return customItems;\n    \n    const pathSegments = location?.pathname?.split('/')?.filter(Boolean);\n    const breadcrumbs = [{ label: 'Home', path: '/homepage' }];\n    \n    let currentPath = '';\n    pathSegments?.forEach((segment) => {\n      currentPath += `/${segment}`;\n      const label = pathMap?.[currentPath] || segment?.replace(/-/g, ' ')?.replace(/\\b\\w/g, l => l?.toUpperCase());\n      breadcrumbs?.push({ label, path: currentPath });\n    });\n    \n    return breadcrumbs;\n  };\n\n  const breadcrumbs = generateBreadcrumbs();\n\n  if (breadcrumbs?.length <= 1) return null;\n\n  return (\n    <nav aria-label=\"Breadcrumb\" className=\"py-4\">\n      <ol className=\"flex items-center space-x-2 text-sm\">\n        {breadcrumbs?.map((crumb, index) => (\n          <li key={index} className=\"flex items-center\">\n            {index > 0 && (\n              <Icon \n                name=\"ChevronRight\" \n                size={16} \n                className=\"text-muted-foreground mx-2\" \n              />\n            )}\n            {index === breadcrumbs?.length - 1 ? (\n              <span className=\"font-body font-medium text-foreground\">\n                {crumb?.label}\n              </span>\n            ) : (\n              <Link\n                to={crumb?.path}\n                className=\"font-body text-muted-foreground hover:text-primary transition-colors duration-200\"\n              >\n                {crumb?.label}\n              </Link>\n            )}\n          </li>\n        ))}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;","size_bytes":2048},"src/components/ui/Button.jsx":{"content":"import React from 'react';\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"../../utils/cn\";\nimport Icon from '../AppIcon';\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n    {\n        variants: {\n            variant: {\n                default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n                destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n                outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n                secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n                ghost: \"hover:bg-accent hover:text-accent-foreground\",\n                link: \"text-primary underline-offset-4 hover:underline\",\n                success: \"bg-success text-success-foreground hover:bg-success/90\",\n                warning: \"bg-warning text-warning-foreground hover:bg-warning/90\",\n                danger: \"bg-error text-error-foreground hover:bg-error/90\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n                xs: \"h-8 rounded-md px-2 text-xs\",\n                xl: \"h-12 rounded-md px-10 text-base\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nconst Button = React.forwardRef(({\n    className,\n    variant,\n    size,\n    asChild = false,\n    children,\n    loading = false,\n    iconName = null,\n    iconPosition = 'left',\n    iconSize = null,\n    fullWidth = false,\n    disabled = false,\n    ...props\n}, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    // Icon size mapping based on button size\n    const iconSizeMap = {\n        xs: 12,\n        sm: 14,\n        default: 16,\n        lg: 18,\n        xl: 20,\n        icon: 16,\n    };\n\n    const calculatedIconSize = iconSize || iconSizeMap?.[size] || 16;\n\n    // Loading spinner\n    const LoadingSpinner = () => (\n        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n        </svg>\n    );\n\n    const renderIcon = () => {\n        if (!iconName) return null;\n        try {\n            return (\n                <Icon\n                    name={iconName}\n                    size={calculatedIconSize}\n                    className={cn(\n                        children && iconPosition === 'left' && \"mr-2\",\n                        children && iconPosition === 'right' && \"ml-2\"\n                    )}\n                />\n            );\n        } catch {\n            return null;\n        }\n    };\n\n    const renderFallbackButton = () => (\n        <button\n            className={cn(\n                buttonVariants({ variant, size, className }),\n                fullWidth && \"w-full\"\n            )}\n            ref={ref}\n            disabled={disabled || loading}\n            {...props}\n        >\n            {loading && <LoadingSpinner />}\n            {iconName && iconPosition === 'left' && renderIcon()}\n            {children}\n            {iconName && iconPosition === 'right' && renderIcon()}\n        </button>\n    );\n\n    // When asChild is true, merge icons into the child element\n    if (asChild) {\n        try {\n            if (!children || React.Children?.count(children) !== 1) {\n                return renderFallbackButton();\n            }\n\n            const child = React.Children?.only(children);\n\n            if (!React.isValidElement(child)) {\n                return renderFallbackButton();\n            }\n            const content = (\n                <>\n                    {loading && <LoadingSpinner />}\n                    {iconName && iconPosition === 'left' && renderIcon()}\n                    {child?.props?.children}\n                    {iconName && iconPosition === 'right' && renderIcon()}\n                </>\n            );\n\n            const clonedChild = React.cloneElement(child, {\n                className: cn(\n                    buttonVariants({ variant, size, className }),\n                    fullWidth && \"w-full\",\n                    child?.props?.className\n                ),\n                disabled: disabled || loading || child?.props?.disabled,\n                children: content,\n            });\n\n            return <Comp ref={ref} {...props}>{clonedChild}</Comp>;\n        } catch {\n            return renderFallbackButton();\n        }\n    }\n\n    return (\n        <Comp\n            className={cn(\n                buttonVariants({ variant, size, className }),\n                fullWidth && \"w-full\"\n            )}\n            ref={ref}\n            disabled={disabled || loading}\n            {...props}\n        >\n            {loading && <LoadingSpinner />}\n            {iconName && iconPosition === 'left' && renderIcon()}\n            {children}\n            {iconName && iconPosition === 'right' && renderIcon()}\n        </Comp>\n    );\n});\n\nButton.displayName = \"Button\";\n\nexport { Button };\nexport default Button;","size_bytes":5625},"src/components/ui/CartDrawer.jsx":{"content":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport Icon from '../AppIcon';\nimport Image from '../AppImage';\nimport Button from './Button';\n\nconst CartDrawer = ({ isOpen, onClose, cartItems = [], onUpdateQuantity, onRemoveItem }) => {\n  const navigate = useNavigate();\n  const subtotal = cartItems?.reduce((sum, item) => sum + (item?.price * item?.quantity), 0);\n  const shipping = subtotal >= 499 ? 0 : 49;\n  const total = subtotal + shipping;\n\n  const handleQuantityChange = (itemId, newQuantity) => {\n    if (newQuantity <= 0) {\n      onRemoveItem?.(itemId);\n    } else {\n      onUpdateQuantity?.(itemId, newQuantity);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Overlay */}\n      <div \n        className=\"fixed inset-0 bg-black/50 z-[1003]\"\n        onClick={onClose}\n      />\n      {/* Cart Drawer */}\n      <div className=\"fixed right-0 top-0 h-full w-full max-w-md bg-card shadow-warm-xl z-[1003] transform transition-transform duration-300\">\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            <h2 className=\"font-heading font-semibold text-lg text-foreground\">\n              Shopping Cart ({cartItems?.length})\n            </h2>\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-muted rounded-full transition-colors duration-200\"\n              aria-label=\"Close cart\"\n            >\n              <Icon name=\"X\" size={20} />\n            </button>\n          </div>\n\n          {/* Cart Items */}\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {cartItems?.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Icon name=\"ShoppingCart\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n                <p className=\"font-body text-muted-foreground mb-4\">Your cart is empty</p>\n                <Button\n                  variant=\"outline\"\n                  onClick={onClose}\n                  className=\"mx-auto\"\n                >\n                  Continue Shopping\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {cartItems?.map((item) => (\n                  <div key={item?.id} className=\"flex gap-3 p-3 bg-muted/50 rounded-lg\">\n                    <div className=\"w-16 h-16 rounded-lg overflow-hidden flex-shrink-0\">\n                      <Image\n                        src={item?.image}\n                        alt={item?.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-body font-medium text-sm text-foreground truncate\">\n                        {item?.name}\n                      </h3>\n                      <p className=\"font-caption text-xs text-muted-foreground\">\n                        {item?.variant}\n                      </p>\n                      <div className=\"flex items-center justify-between mt-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <button\n                            onClick={() => handleQuantityChange(item?.id, item?.quantity - 1)}\n                            className=\"w-6 h-6 rounded-full border border-border flex items-center justify-center hover:bg-muted transition-colors duration-200\"\n                          >\n                            <Icon name=\"Minus\" size={12} />\n                          </button>\n                          <span className=\"font-data text-sm font-medium w-8 text-center\">\n                            {item?.quantity}\n                          </span>\n                          <button\n                            onClick={() => handleQuantityChange(item?.id, item?.quantity + 1)}\n                            className=\"w-6 h-6 rounded-full border border-border flex items-center justify-center hover:bg-muted transition-colors duration-200\"\n                          >\n                            <Icon name=\"Plus\" size={12} />\n                          </button>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-data font-semibold text-sm text-foreground\">\n                            ‚Çπ{(item?.price * item?.quantity)?.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <button\n                      onClick={() => onRemoveItem(item?.id)}\n                      className=\"p-1 hover:bg-destructive/10 hover:text-destructive rounded transition-colors duration-200\"\n                      aria-label=\"Remove item\"\n                    >\n                      <Icon name=\"Trash2\" size={16} />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Footer */}\n          {cartItems?.length > 0 && (\n            <div className=\"border-t border-border p-4 space-y-4\">\n              {/* Shipping Notice */}\n              {subtotal < 499 && (\n                <div className=\"bg-warning/10 border border-warning/20 rounded-lg p-3\">\n                  <p className=\"font-caption text-xs text-warning-foreground\">\n                    Add ‚Çπ{(499 - subtotal)?.toFixed(2)} more for free shipping!\n                  </p>\n                </div>\n              )}\n              \n              {/* Order Summary */}\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between font-body text-sm\">\n                  <span className=\"text-muted-foreground\">Subtotal</span>\n                  <span className=\"font-data font-medium\">‚Çπ{subtotal?.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between font-body text-sm\">\n                  <span className=\"text-muted-foreground\">Shipping</span>\n                  <span className=\"font-data font-medium\">\n                    {shipping === 0 ? 'Free' : `‚Çπ${shipping?.toFixed(2)}`}\n                  </span>\n                </div>\n                <div className=\"flex justify-between font-heading font-semibold text-base pt-2 border-t border-border\">\n                  <span>Total</span>\n                  <span className=\"font-data\">‚Çπ{total?.toFixed(2)}</span>\n                </div>\n              </div>\n              \n              {/* Action Buttons */}\n              <div className=\"space-y-2\">\n                <Button\n                  variant=\"default\"\n                  fullWidth\n                  onClick={() => {\n                    onClose();\n                    navigate('/checkout-process');\n                  }}\n                >\n                  Proceed to Checkout\n                </Button>\n                <Link to=\"/shopping-cart\" onClick={onClose}>\n                  <Button variant=\"outline\" fullWidth>\n                    View Cart\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default CartDrawer;","size_bytes":7321},"src/components/ui/Checkbox.jsx":{"content":"import React from \"react\";\nimport { Check, Minus } from \"lucide-react\";\nimport { cn } from \"../../utils/cn\";\n\nconst Checkbox = React.forwardRef(({\n    className,\n    id,\n    checked,\n    indeterminate = false,\n    disabled = false,\n    required = false,\n    label,\n    description,\n    error,\n    size = \"default\",\n    ...props\n}, ref) => {\n    // Generate unique ID if not provided\n    const checkboxId = id || `checkbox-${Math.random()?.toString(36)?.substr(2, 9)}`;\n\n    // Size variants\n    const sizeClasses = {\n        sm: \"h-4 w-4\",\n        default: \"h-4 w-4\",\n        lg: \"h-5 w-5\"\n    };\n\n    return (\n        <div className={cn(\"flex items-start space-x-2\", className)}>\n            <div className=\"relative flex items-center\">\n                <input\n                    type=\"checkbox\"\n                    ref={ref}\n                    id={checkboxId}\n                    checked={checked}\n                    disabled={disabled}\n                    required={required}\n                    className=\"sr-only\"\n                    {...props}\n                />\n\n                <label\n                    htmlFor={checkboxId}\n                    className={cn(\n                        \"peer shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground cursor-pointer transition-colors\",\n                        sizeClasses?.[size],\n                        checked && \"bg-primary text-primary-foreground border-primary\",\n                        indeterminate && \"bg-primary text-primary-foreground border-primary\",\n                        error && \"border-destructive\",\n                        disabled && \"cursor-not-allowed opacity-50\"\n                    )}\n                >\n                    {checked && !indeterminate && (\n                        <Check className=\"h-3 w-3 text-current flex items-center justify-center\" />\n                    )}\n                    {indeterminate && (\n                        <Minus className=\"h-3 w-3 text-current flex items-center justify-center\" />\n                    )}\n                </label>\n            </div>\n            {(label || description || error) && (\n                <div className=\"flex-1 space-y-1\">\n                    {label && (\n                        <label\n                            htmlFor={checkboxId}\n                            className={cn(\n                                \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\",\n                                error ? \"text-destructive\" : \"text-foreground\"\n                            )}\n                        >\n                            {label}\n                            {required && <span className=\"text-destructive ml-1\">*</span>}\n                        </label>\n                    )}\n\n                    {description && !error && (\n                        <p className=\"text-sm text-muted-foreground\">\n                            {description}\n                        </p>\n                    )}\n\n                    {error && (\n                        <p className=\"text-sm text-destructive\">\n                            {error}\n                        </p>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n});\n\nCheckbox.displayName = \"Checkbox\";\n\n// Checkbox Group component\nconst CheckboxGroup = React.forwardRef(({\n    className,\n    children,\n    label,\n    description,\n    error,\n    required = false,\n    disabled = false,\n    ...props\n}, ref) => {\n    return (\n        <fieldset\n            ref={ref}\n            disabled={disabled}\n            className={cn(\"space-y-3\", className)}\n            {...props}\n        >\n            {label && (\n                <legend className={cn(\n                    \"text-sm font-medium\",\n                    error ? \"text-destructive\" : \"text-foreground\"\n                )}>\n                    {label}\n                    {required && <span className=\"text-destructive ml-1\">*</span>}\n                </legend>\n            )}\n\n            {description && !error && (\n                <p className=\"text-sm text-muted-foreground\">\n                    {description}\n                </p>\n            )}\n\n            <div className=\"space-y-2\">\n                {children}\n            </div>\n\n            {error && (\n                <p className=\"text-sm text-destructive\">\n                    {error}\n                </p>\n            )}\n        </fieldset>\n    );\n});\n\nCheckboxGroup.displayName = \"CheckboxGroup\";\n\nexport { Checkbox, CheckboxGroup };\nexport default Checkbox;","size_bytes":4781},"src/components/ui/Header.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport Icon from '../AppIcon';\n\nimport Input from './Input';\nimport AnnouncementBar from './AnnouncementBar';\nimport MegaMenu from './MegaMenu';\nimport CartDrawer from './CartDrawer';\nimport { useCart } from '../../contexts/CartContext.jsx';\nconst Header = ({ isLoggedIn = false, onSearch = () => {} }) => {\n  const { cartItems, getCartItemCount, updateQuantity, removeFromCart } = useCart();\n  const navigate = useNavigate();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isMegaMenuOpen, setIsMegaMenuOpen] = useState(false);\n  const [isCartDrawerOpen, setIsCartDrawerOpen] = useState(false);\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showAnnouncementBar, setShowAnnouncementBar] = useState(true);\n\n  const location = useLocation();\n\n  useEffect(() => {\n    setIsMobileMenuOpen(false);\n    setIsMegaMenuOpen(false);\n    setIsSearchOpen(false);\n  }, [location]);\n\n  const handleSearch = (e) => {\n    e?.preventDefault();\n    if (searchQuery?.trim() && onSearch) {\n      onSearch(searchQuery);\n    }\n  };\n\n  const navigationItems = [\n    {\n      label: 'Shop',\n      path: '/product-collection-grid',\n      hasDropdown: true,\n      onClick: () => setIsMegaMenuOpen(!isMegaMenuOpen)\n    },\n    { label: 'Products', path: '/product-collection-grid' },\n    { label: 'Account', path: '/user-account-dashboard' },\n  ];\n\n  return (\n    <>\n      {/* 4-Layer Announcement Bars */}\n      {/* Orange Layer */}\n      <div className=\"bg-warning text-warning-foreground py-2 text-center text-sm font-body\">\n        <div className=\"container mx-auto px-4 flex items-center justify-between\">\n          <span>Free Shipping from Rs. 499 (Bangalore), Rs. 999 (Elsewhere)</span>\n          <span>10% off on orders above Rs. 1499 with \"FLAT10\"</span>\n        </div>\n      </div>\n      \n      {/* Green Layer */}\n      <div className=\"bg-accent text-accent-foreground py-2 text-center text-sm font-body\">\n        <div className=\"container mx-auto px-4\">\n          <span>Shop our Bestsellers at special prices</span>\n        </div>\n      </div>\n      \n      {/* White Layer with Search */}\n      <div className=\"bg-white border-b border-border py-3\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between\">\n            {/* Logo */}\n            <Link to=\"/homepage\" className=\"flex items-center space-x-2\">\n              <div className=\"w-40 h-16 flex items-center justify-center\">\n                <img src=\"/assets/images/logo.png\" alt=\"Logo\" className=\"w-40 h-16 object-contain\" />\n              </div>\n              \n            </Link>\n\n            {/* Search Bar */}\n            <div className=\"flex-1 max-w-2xl mx-8\">\n              <form onSubmit={handleSearch} className=\"relative\">\n                <select\n                  className=\"absolute left-3 top-1/2 transform -translate-y-1/2 bg-transparent border-none text-sm text-muted-foreground focus:outline-none\"\n                  onChange={e => {\n                    const value = e.target.value;\n                    if (value) navigate(value);\n                  }}\n                  defaultValue=\"\"\n                >\n                  <option value=\"\">All Categories</option>\n                  <option value=\"/product-collection-grid?category=unpolished-pulses\">Unpolished Pulses, Dals & Rice</option>\n                  <option value=\"/product-collection-grid?category=poha\">Poha / Aval</option>\n                  <option value=\"/product-collection-grid?category=sugars-honey\">Sugars & Honey</option>\n                  <option value=\"/product-collection-grid?category=haircare\">Haircare Products</option>\n                  <option value=\"/product-collection-grid?category=skincare\">Skincare Products</option>\n                  <option value=\"/product-collection-grid?category=millet\">Millet Items</option>\n                  <option value=\"/product-collection-grid?category=powders\">Powders</option>\n                  <option value=\"/product-collection-grid?category=fries\">Fries</option>\n                  <option value=\"/product-collection-grid?category=herbal-handmade\">Herbal Handmade</option>\n                  <option value=\"/product-collection-grid?category=soaps\">Soaps</option>\n                  <option value=\"/product-collection-grid?category=snacks\">Snacks</option>\n                  <option value=\"/product-collection-grid?category=herbal-powders\">Herbal Powders</option>\n                </select>\n                <Input\n                  type=\"search\"\n                  placeholder=\"Search for products\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e?.target?.value)}\n                  className=\"pl-32 pr-12 py-3\"\n                />\n                <button\n                  type=\"submit\"\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-primary transition-colors duration-200\"\n                >\n                  <Icon name=\"Search\" size={20} />\n                </button>\n              </form>\n            </div>\n\n            {/* Right Actions */}\n            <div className=\"flex items-center space-x-4\">\n              {/* User Account */}\n              {isLoggedIn ? (\n                <Link\n                  to=\"/user-account-dashboard\"\n                  className=\"flex items-center space-x-2 text-foreground hover:text-primary transition-colors duration-200\"\n                >\n                  <Icon name=\"User\" size={20} />\n                </Link>\n              ) : (\n                <Link\n                  to=\"/user-login\"\n                  className=\"flex items-center space-x-2 text-foreground hover:text-primary transition-colors duration-200\"\n                >\n                  <Icon name=\"User\" size={20} />\n                </Link>\n              )}\n\n              {/* Wishlist */}\n              <button className=\"relative text-foreground hover:text-primary transition-colors duration-200\">\n                <Icon name=\"Heart\" size={20} />\n                <span className=\"absolute -top-1 -right-1 bg-primary text-primary-foreground text-xs font-bold rounded-full w-4 h-4 flex items-center justify-center text-[10px]\">\n                  0\n                </span>\n              </button>\n\n              {/* Cart */}\n              <button\n                onClick={() => setIsCartDrawerOpen(true)}\n                className=\"relative text-foreground hover:text-primary transition-colors duration-200\"\n              >\n                <Icon name=\"ShoppingCart\" size={20} />\n                {getCartItemCount() > 0 && (\n                  <span className=\"absolute -top-1 -right-1 bg-primary text-primary-foreground text-xs font-bold rounded-full w-4 h-4 flex items-center justify-center text-[10px]\">\n                    {getCartItemCount()}\n                  </span>\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Green Navigation Layer */}\n      <div className=\"bg-accent text-accent-foreground\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center\">\n            {/* Shop by Category Button */}\n            <button\n              onClick={() => setIsMegaMenuOpen(!isMegaMenuOpen)}\n              className=\"flex items-center space-x-2 px-4 py-3 bg-accent-foreground/10 hover:bg-accent-foreground/20 transition-colors duration-200\"\n            >\n              <Icon name=\"Menu\" size={16} />\n              <span className=\"font-body font-medium\">SHOP BY CATEGORY</span>\n            </button>\n\n            {/* Navigation Items */}\n            <nav className=\"hidden lg:flex items-center ml-8 space-x-6\">\n              {navigationItems?.map((item, index) => (\n                <div key={index} className=\"relative\">\n                  {item?.hasDropdown ? (\n                    <button\n                      onClick={item?.onClick}\n                      className=\"flex items-center space-x-1 font-body font-medium hover:text-accent-foreground/80 transition-colors duration-200 py-3\"\n                    >\n                      <span>{item?.label}</span>\n                      <Icon\n                        name=\"ChevronDown\"\n                        size={16}\n                        className={`transform transition-transform duration-200 ${isMegaMenuOpen ? 'rotate-180' : ''}`}\n                      />\n                    </button>\n                  ) : (\n                    <Link\n                      to={item?.path}\n                      className=\"font-body font-medium hover:text-accent-foreground/80 transition-colors duration-200 py-3\"\n                    >\n                      {item?.label}\n                    </Link>\n                  )}\n                </div>\n              ))}\n            </nav>\n\n            {/* Mobile Menu Toggle */}\n            <button\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"lg:hidden ml-auto p-2\"\n            >\n              <Icon name={isMobileMenuOpen ? \"X\" : \"Menu\"} size={20} />\n            </button>\n          </div>\n        </div>\n      </div>\n      {/* Main Header Container */}\n      <header className=\"sticky top-0 bg-background z-[1001] shadow-warm\">\n\n        {/* Mobile Navigation Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"lg:hidden border-t border-border bg-card\">\n            <nav className=\"container mx-auto px-4 py-4 space-y-4\">\n              {navigationItems?.map((item, index) => (\n                <div key={index}>\n                  {item?.hasDropdown ? (\n                    <button\n                      onClick={() => setIsMegaMenuOpen(!isMegaMenuOpen)}\n                      className=\"flex items-center justify-between w-full font-body font-medium text-foreground hover:text-primary transition-colors duration-200 py-2\"\n                    >\n                      <span>{item?.label}</span>\n                      <Icon\n                        name=\"ChevronDown\"\n                        size={16}\n                        className={`transform transition-transform duration-200 ${isMegaMenuOpen ? 'rotate-180' : ''}`}\n                      />\n                    </button>\n                  ) : (\n                    <Link\n                      to={item?.path}\n                      className=\"block font-body font-medium text-foreground hover:text-primary transition-colors duration-200 py-2\"\n                    >\n                      {item?.label}\n                    </Link>\n                  )}\n                </div>\n              ))}\n\n              {/* Mobile-only links */}\n              <Link\n                to=\"/user-account-dashboard\"\n                className=\"flex items-center space-x-2 font-body font-medium text-foreground hover:text-primary transition-colors duration-200 py-2 sm:hidden\"\n              >\n                <Icon name=\"User\" size={16} />\n                <span>My Account</span>\n              </Link>\n            </nav>\n          </div>\n        )}\n\n        {/* Mega Menu */}\n        <MegaMenu\n          isOpen={isMegaMenuOpen}\n          onClose={() => setIsMegaMenuOpen(false)}\n        />\n      </header>\n      {/* Cart Drawer */}\n      <CartDrawer\n        isOpen={isCartDrawerOpen}\n        onClose={() => setIsCartDrawerOpen(false)}\n        cartItems={cartItems}\n        onUpdateQuantity={updateQuantity}\n        onRemoveItem={removeFromCart}\n      />\n    </>\n  );\n};\n\nexport default Header;","size_bytes":11625},"src/components/ui/Input.jsx":{"content":"import React from \"react\";\nimport { cn } from \"../../utils/cn\";\n\nconst Input = React.forwardRef(({\n    className,\n    type = \"text\",\n    label,\n    description,\n    error,\n    required = false,\n    id,\n    ...props\n}, ref) => {\n    // Generate unique ID if not provided\n    const inputId = id || `input-${Math.random()?.toString(36)?.substr(2, 9)}`;\n\n    // Base input classes\n    const baseInputClasses = \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\";\n\n    // Checkbox-specific styles\n    if (type === \"checkbox\") {\n        return (\n            <input\n                type=\"checkbox\"\n                className={cn(\n                    \"h-4 w-4 rounded border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n        );\n    }\n\n    // Radio button-specific styles\n    if (type === \"radio\") {\n        return (\n            <input\n                type=\"radio\"\n                className={cn(\n                    \"h-4 w-4 rounded-full border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n        );\n    }\n\n    // For regular inputs with wrapper structure\n    return (\n        <div className=\"space-y-2\">\n            {label && (\n                <label\n                    htmlFor={inputId}\n                    className={cn(\n                        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n                        error ? \"text-destructive\" : \"text-foreground\"\n                    )}\n                >\n                    {label}\n                    {required && <span className=\"text-destructive ml-1\">*</span>}\n                </label>\n            )}\n\n            <input\n                type={type}\n                className={cn(\n                    baseInputClasses,\n                    error && \"border-destructive focus-visible:ring-destructive\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n\n            {description && !error && (\n                <p className=\"text-sm text-muted-foreground\">\n                    {description}\n                </p>\n            )}\n\n            {error && (\n                <p className=\"text-sm text-destructive\">\n                    {error}\n                </p>\n            )}\n        </div>\n    );\n});\n\nInput.displayName = \"Input\";\n\nexport { Input };\nexport default Input;","size_bytes":3139},"src/components/ui/MegaMenu.jsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../AppImage';\n\nconst MegaMenu = ({ isOpen, onClose }) => {\n  const categories = [\n    {\n      title: 'Food Items',\n      items: [\n        { name: 'Unpolished Pulses, Dals & Rice', path: '/product-collection-grid?category=unpolished-pulses-dals-rice' },\n        { name: 'Poha / Aval', path: '/product-collection-grid?category=poha-aval' },\n        { name: 'Sugars & Honey', path: '/product-collection-grid?category=sugars-honey' },\n        { name: 'Millet Items', path: '/product-collection-grid?category=millet-items' }\n      ],\n      image: '/assets/images/category-food.jpg'\n    },\n    {\n      title: 'Spices & Powders',\n      items: [\n        { name: 'Powders', path: '/product-collection-grid?category=powders' },\n        { name: 'Herbal Powders', path: '/product-collection-grid?category=herbal-powders' },\n        { name: 'Fries', path: '/product-collection-grid?category=fries' }\n      ],\n      image: '/assets/images/category-spices.jpg'\n    },\n    {\n      title: 'Personal Care',\n      items: [\n        { name: 'Haircare Products', path: '/product-collection-grid?category=haircare-products' },\n        { name: 'Skincare Products', path: '/product-collection-grid?category=skincare-products' },\n        { name: 'Herbal Handmade Soaps', path: '/product-collection-grid?category=herbal-handmade-soaps' }\n      ],\n      image: '/assets/images/category-personal-care.jpg'\n    },\n    {\n      title: 'Health & Wellness',\n      items: [\n        { name: 'Herbal Products', path: '/product-collection-grid?category=herbal-products' },\n        { name: 'Snacks', path: '/product-collection-grid?category=snacks' }\n      ],\n      image: '/assets/images/category-health.jpg'\n    }\n  ];\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      <div \n        className=\"fixed inset-0 bg-black/50 z-[1001] lg:hidden\"\n        onClick={onClose}\n      />\n      {/* Mega Menu Content */}\n      <div className=\"absolute top-full left-0 w-full bg-card shadow-warm-lg border-t border-border z-[1002] lg:relative lg:shadow-warm-xl\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {categories?.map((category, index) => (\n              <div key={index} className=\"space-y-4\">\n                <div className=\"aspect-video rounded-lg overflow-hidden\">\n                  <Image\n                    src={category?.image}\n                    alt={category?.title}\n                    className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-300\"\n                  />\n                </div>\n                <div>\n                  <h3 className=\"font-heading font-semibold text-foreground mb-3\">\n                    {category?.title}\n                  </h3>\n                  <ul className=\"space-y-2\">\n                    {category?.items?.map((item, itemIndex) => (\n                      <li key={itemIndex}>\n                        <Link\n                          to={item?.path}\n                          onClick={onClose}\n                          className=\"font-body text-sm text-muted-foreground hover:text-primary transition-colors duration-200 block py-1\"\n                        >\n                          {item?.name}\n                        </Link>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {/* Featured Section */}\n          <div className=\"mt-8 pt-8 border-t border-border\">\n            <div className=\"flex flex-col lg:flex-row items-center justify-between bg-muted rounded-lg p-6\">\n              <div className=\"text-center lg:text-left mb-4 lg:mb-0\">\n                <h4 className=\"font-heading font-semibold text-lg text-foreground mb-2\">\n                  New Arrivals\n                </h4>\n                <p className=\"font-body text-muted-foreground\">\n                  Discover our latest collection of premium natural products\n                </p>\n              </div>\n              <Link\n                to=\"/product-collection-grid?filter=new-arrivals\"\n                onClick={onClose}\n                className=\"bg-primary text-primary-foreground px-6 py-2 rounded-lg font-caption font-medium hover:bg-primary/90 transition-colors duration-200\"\n              >\n                Shop Now\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default MegaMenu;","size_bytes":4592},"src/components/ui/Select.jsx":{"content":"// components/ui/Select.jsx - Shadcn style Select\nimport React, { useState } from \"react\";\nimport { ChevronDown, Check, Search, X } from \"lucide-react\";\nimport { cn } from \"../../utils/cn\";\nimport Button from \"./Button\";\nimport Input from \"./Input\";\n\nconst Select = React.forwardRef(({\n    className,\n    options = [],\n    value,\n    defaultValue,\n    placeholder = \"Select an option\",\n    multiple = false,\n    disabled = false,\n    required = false,\n    label,\n    description,\n    error,\n    searchable = false,\n    clearable = false,\n    loading = false,\n    id,\n    name,\n    onChange,\n    onOpenChange,\n    ...props\n}, ref) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Generate unique ID if not provided\n    const selectId = id || `select-${Math.random()?.toString(36)?.substr(2, 9)}`;\n\n    // Filter options based on search\n    const filteredOptions = searchable && searchTerm\n        ? options?.filter(option =>\n            option?.label?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n            (option?.value && option?.value?.toString()?.toLowerCase()?.includes(searchTerm?.toLowerCase()))\n        )\n        : options;\n\n    // Get selected option(s) for display\n    const getSelectedDisplay = () => {\n        if (!value) return placeholder;\n\n        if (multiple) {\n            const selectedOptions = options?.filter(opt => value?.includes(opt?.value));\n            if (selectedOptions?.length === 0) return placeholder;\n            if (selectedOptions?.length === 1) return selectedOptions?.[0]?.label;\n            return `${selectedOptions?.length} items selected`;\n        }\n\n        const selectedOption = options?.find(opt => opt?.value === value);\n        return selectedOption ? selectedOption?.label : placeholder;\n    };\n\n    const handleToggle = () => {\n        if (!disabled) {\n            const newIsOpen = !isOpen;\n            setIsOpen(newIsOpen);\n            onOpenChange?.(newIsOpen);\n            if (!newIsOpen) {\n                setSearchTerm(\"\");\n            }\n        }\n    };\n\n    const handleOptionSelect = (option) => {\n        if (multiple) {\n            const newValue = value || [];\n            const updatedValue = newValue?.includes(option?.value)\n                ? newValue?.filter(v => v !== option?.value)\n                : [...newValue, option?.value];\n            onChange?.(updatedValue);\n        } else {\n            onChange?.(option?.value);\n            setIsOpen(false);\n            onOpenChange?.(false);\n        }\n    };\n\n    const handleClear = (e) => {\n        e?.stopPropagation();\n        onChange?.(multiple ? [] : '');\n    };\n\n    const handleSearchChange = (e) => {\n        setSearchTerm(e?.target?.value);\n    };\n\n    const isSelected = (optionValue) => {\n        if (multiple) {\n            return value?.includes(optionValue) || false;\n        }\n        return value === optionValue;\n    };\n\n    const hasValue = multiple ? value?.length > 0 : value !== undefined && value !== '';\n\n    return (\n        <div className={cn(\"relative\", className)}>\n            {label && (\n                <label\n                    htmlFor={selectId}\n                    className={cn(\n                        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 mb-2 block\",\n                        error ? \"text-destructive\" : \"text-foreground\"\n                    )}\n                >\n                    {label}\n                    {required && <span className=\"text-destructive ml-1\">*</span>}\n                </label>\n            )}\n            <div className=\"relative\">\n                <button\n                    ref={ref}\n                    id={selectId}\n                    type=\"button\"\n                    className={cn(\n                        \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-white text-black px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                        error && \"border-destructive focus:ring-destructive\",\n                        !hasValue && \"text-muted-foreground\"\n                    )}\n                    onClick={handleToggle}\n                    disabled={disabled}\n                    aria-expanded={isOpen}\n                    aria-haspopup=\"listbox\"\n                    {...props}\n                >\n                    <span className=\"truncate\">{getSelectedDisplay()}</span>\n\n                    <div className=\"flex items-center gap-1\">\n                        {loading && (\n                            <svg className=\"animate-spin h-4 w-4\" viewBox=\"0 0 24 24\">\n                                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" fill=\"none\" />\n                                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n                            </svg>\n                        )}\n\n                        {clearable && hasValue && !loading && (\n                            <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-4 w-4\"\n                                onClick={handleClear}\n                            >\n                                <X className=\"h-3 w-3\" />\n                            </Button>\n                        )}\n\n                        <ChevronDown className={cn(\"h-4 w-4 transition-transform\", isOpen && \"rotate-180\")} />\n                    </div>\n                </button>\n\n                {/* Hidden native select for form submission */}\n                <select\n                    name={name}\n                    value={value || ''}\n                    onChange={() => { }} // Controlled by our custom logic\n                    className=\"sr-only\"\n                    tabIndex={-1}\n                    multiple={multiple}\n                    required={required}\n                >\n                    <option value=\"\">Select...</option>\n                    {options?.map(option => (\n                        <option key={option?.value} value={option?.value}>\n                            {option?.label}\n                        </option>\n                    ))}\n                </select>\n\n                {/* Dropdown */}\n                {isOpen && (\n                    <div className=\"absolute z-50 w-full mt-1 bg-white text-black border border-border rounded-md shadow-md\">\n                        {searchable && (\n                            <div className=\"p-2 border-b\">\n                                <div className=\"relative\">\n                                    <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                                    <Input\n                                        placeholder=\"Search options...\"\n                                        value={searchTerm}\n                                        onChange={handleSearchChange}\n                                        className=\"pl-8\"\n                                    />\n                                </div>\n                            </div>\n                        )}\n\n                        <div className=\"py-1 max-h-60 overflow-auto\">\n                            {filteredOptions?.length === 0 ? (\n                                <div className=\"px-3 py-2 text-sm text-muted-foreground\">\n                                    {searchTerm ? 'No options found' : 'No options available'}\n                                </div>\n                            ) : (\n                                filteredOptions?.map((option) => (\n                                    <div\n                                        key={option?.value}\n                                        className={cn(\n                                            \"relative flex cursor-pointer select-none items-center rounded-sm px-3 py-2 text-sm outline-none hover:bg-accent hover:text-accent-foreground\",\n                                            isSelected(option?.value) && \"bg-primary text-primary-foreground\",\n                                            option?.disabled && \"pointer-events-none opacity-50\"\n                                        )}\n                                        onClick={() => !option?.disabled && handleOptionSelect(option)}\n                                    >\n                                        <span className=\"flex-1\">{option?.label}</span>\n                                        {multiple && isSelected(option?.value) && (\n                                            <Check className=\"h-4 w-4\" />\n                                        )}\n                                        {option?.description && (\n                                            <span className=\"text-xs text-muted-foreground ml-2\">\n                                                {option?.description}\n                                            </span>\n                                        )}\n                                    </div>\n                                ))\n                            )}\n                        </div>\n                    </div>\n                )}\n            </div>\n            {description && !error && (\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                    {description}\n                </p>\n            )}\n            {error && (\n                <p className=\"text-sm text-destructive mt-1\">\n                    {error}\n                </p>\n            )}\n        </div>\n    );\n});\n\nSelect.displayName = \"Select\";\n\nexport { Select };\nexport default Select;","size_bytes":9839},"src/pages/admin-dashboard/index.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { jsonDb } from '../../lib/jsonDb';\nimport AdminLogin from '../../components/AdminLogin';\nimport Button from '../../components/ui/Button';\nimport Input from '../../components/ui/Input';\n\nconst AdminDashboard = () => {\n  const { user, isAdmin, signOut } = useAuth();\n  const [activeTab, setActiveTab] = useState('products');\n  const [products, setProducts] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Product form state\n  const [productForm, setProductForm] = useState({\n    name: '',\n    price: '',\n    category: '',\n    description: '',\n    stock: '',\n    featured: false\n  });\n  const [editingProduct, setEditingProduct] = useState(null);\n\n  useEffect(() => {\n    if (isAdmin()) {\n      loadData();\n    }\n  }, [user]);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      const [productsData, ordersData] = await Promise.all([\n        jsonDb.getProducts(),\n        jsonDb.getOrders()\n      ]);\n      setProducts(productsData);\n      setOrders(ordersData);\n    } catch (error) {\n      console.error('Error loading data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleProductSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      if (editingProduct) {\n        await jsonDb.updateProduct(editingProduct.id, {\n          ...productForm,\n          price: parseFloat(productForm.price),\n          stock: parseInt(productForm.stock)\n        });\n      } else {\n        await jsonDb.addProduct({\n          ...productForm,\n          price: parseFloat(productForm.price),\n          stock: parseInt(productForm.stock)\n        });\n      }\n      \n      setProductForm({\n        name: '',\n        price: '',\n        category: '',\n        description: '',\n        stock: '',\n        featured: false\n      });\n      setEditingProduct(null);\n      loadData();\n    } catch (error) {\n      console.error('Error saving product:', error);\n    }\n  };\n\n  const handleEditProduct = (product) => {\n    setProductForm({\n      name: product.name,\n      price: product.price.toString(),\n      category: product.category,\n      description: product.description,\n      stock: product.stock.toString(),\n      featured: product.featured || false\n    });\n    setEditingProduct(product);\n  };\n\n  const handleDeleteProduct = async (id) => {\n    if (window.confirm('Are you sure you want to delete this product?')) {\n      await jsonDb.deleteProduct(id);\n      loadData();\n    }\n  };\n\n  if (!user) {\n    return <AdminLogin onLoginSuccess={loadData} />;\n  }\n\n  if (!isAdmin()) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Access Denied</h1>\n          <p className=\"text-gray-600 mb-4\">You don't have admin privileges.</p>\n          <Button onClick={signOut}>Sign Out</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Admin Dashboard</h1>\n              <p className=\"text-gray-600\">Welcome back, {user.name}</p>\n            </div>\n            <Button variant=\"outline\" onClick={signOut}>\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Tabs */}\n        <div className=\"border-b border-gray-200 mb-8\">\n          <nav className=\"-mb-px flex space-x-8\">\n            {['products', 'orders', 'analytics'].map((tab) => (\n              <button\n                key={tab}\n                className={`${\n                  activeTab === tab\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                } whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm capitalize`}\n                onClick={() => setActiveTab(tab)}\n              >\n                {tab}\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Products Tab */}\n        {activeTab === 'products' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Product Form */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"bg-white rounded-lg shadow p-6\">\n                <h2 className=\"text-lg font-semibold mb-4\">\n                  {editingProduct ? 'Edit Product' : 'Add New Product'}\n                </h2>\n                <form onSubmit={handleProductSubmit} className=\"space-y-4\">\n                  <Input\n                    label=\"Product Name\"\n                    value={productForm.name}\n                    onChange={(e) => setProductForm({...productForm, name: e.target.value})}\n                    required\n                  />\n                  <Input\n                    label=\"Price (‚Çπ)\"\n                    type=\"number\"\n                    value={productForm.price}\n                    onChange={(e) => setProductForm({...productForm, price: e.target.value})}\n                    required\n                  />\n                  <Input\n                    label=\"Category\"\n                    value={productForm.category}\n                    onChange={(e) => setProductForm({...productForm, category: e.target.value})}\n                    required\n                  />\n                  <Input\n                    label=\"Description\"\n                    value={productForm.description}\n                    onChange={(e) => setProductForm({...productForm, description: e.target.value})}\n                    required\n                  />\n                  <Input\n                    label=\"Stock Quantity\"\n                    type=\"number\"\n                    value={productForm.stock}\n                    onChange={(e) => setProductForm({...productForm, stock: e.target.value})}\n                    required\n                  />\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={productForm.featured}\n                      onChange={(e) => setProductForm({...productForm, featured: e.target.checked})}\n                      className=\"mr-2\"\n                    />\n                    Featured Product\n                  </label>\n                  <div className=\"flex space-x-2\">\n                    <Button type=\"submit\" className=\"flex-1\">\n                      {editingProduct ? 'Update' : 'Add'} Product\n                    </Button>\n                    {editingProduct && (\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setEditingProduct(null);\n                          setProductForm({\n                            name: '', price: '', category: '', description: '', stock: '', featured: false\n                          });\n                        }}\n                      >\n                        Cancel\n                      </Button>\n                    )}\n                  </div>\n                </form>\n              </div>\n            </div>\n\n            {/* Products List */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"bg-white rounded-lg shadow\">\n                <div className=\"p-6 border-b border-gray-200\">\n                  <h2 className=\"text-lg font-semibold\">Products ({products.length})</h2>\n                </div>\n                <div className=\"divide-y divide-gray-200\">\n                  {products.map((product) => (\n                    <div key={product.id} className=\"p-6 flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium text-gray-900\">{product.name}</h3>\n                        <p className=\"text-sm text-gray-600 mt-1\">{product.category}</p>\n                        <p className=\"text-sm text-gray-500 mt-1\">{product.description}</p>\n                        <div className=\"flex items-center mt-2 space-x-4\">\n                          <span className=\"text-lg font-semibold text-green-600\">‚Çπ{product.price}</span>\n                          <span className=\"text-sm text-gray-500\">Stock: {product.stock}</span>\n                          {product.featured && (\n                            <span className=\"bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded\">\n                              Featured\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2 ml-4\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleEditProduct(product)}\n                        >\n                          Edit\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => handleDeleteProduct(product.id)}\n                        >\n                          Delete\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                  {products.length === 0 && (\n                    <div className=\"p-6 text-center text-gray-500\">\n                      No products found. Add your first product using the form.\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Orders Tab */}\n        {activeTab === 'orders' && (\n          <div className=\"bg-white rounded-lg shadow\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <h2 className=\"text-lg font-semibold\">Recent Orders ({orders.length})</h2>\n            </div>\n            <div className=\"divide-y divide-gray-200\">\n              {orders.length === 0 ? (\n                <div className=\"p-6 text-center text-gray-500\">\n                  No orders found.\n                </div>\n              ) : (\n                orders.map((order) => (\n                  <div key={order.id} className=\"p-6\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">Order #{order.id}</h3>\n                        <p className=\"text-sm text-gray-600 mt-1\">\n                          {new Date(order.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <span className={`px-2 py-1 text-xs rounded ${\n                        order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                        order.status === 'completed' ? 'bg-green-100 text-green-800' :\n                        'bg-gray-100 text-gray-800'\n                      }`}>\n                        {order.status}\n                      </span>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Analytics Tab */}\n        {activeTab === 'analytics' && (\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Total Products</h3>\n              <p className=\"text-3xl font-bold text-blue-600 mt-2\">{products.length}</p>\n            </div>\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Total Orders</h3>\n              <p className=\"text-3xl font-bold text-green-600 mt-2\">{orders.length}</p>\n            </div>\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Featured Products</h3>\n              <p className=\"text-3xl font-bold text-purple-600 mt-2\">\n                {products.filter(p => p.featured).length}\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n","size_bytes":12573},"src/pages/admin-login/index.jsx":{"content":"\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Eye, EyeOff, Shield } from 'lucide-react';\nimport dataService from '../../services/dataService';\nimport { Button } from '../../components/ui/Button';\nimport { Input } from '../../components/ui/Input';\n\nconst AdminLogin = () => {\n  const [formData, setFormData] = useState({\n    username: 'admin',\n    password: 'admin123'\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n    setError('');\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      // For admin, we'll use email authentication or check for admin username\n      const user = dataService.authenticate(formData.username === 'admin' ? 'admin@neenusnatural.com' : formData.username, formData.password);\n      \n      if (user && user.role === 'admin') {\n        localStorage.setItem('adminUser', JSON.stringify(user));\n        navigate('/admin-panel');\n      } else {\n        setError('Invalid credentials or insufficient permissions');\n      }\n    } catch (err) {\n      setError('Login failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-12 w-12 bg-primary rounded-full flex items-center justify-center\">\n            <Shield className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <h2 className=\"mt-6 text-3xl font-heading font-bold text-foreground\">\n            Admin Login\n          </h2>\n          <p className=\"mt-2 text-sm text-muted-foreground\">\n            Sign in to access the admin panel\n          </p>\n        </div>\n\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"username\" className=\"block text-sm font-body font-medium text-foreground\">\n                Username\n              </label>\n              <Input\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n                autoComplete=\"username\"\n                required\n                value={formData.username}\n                onChange={handleChange}\n                className=\"mt-1\"\n                placeholder=\"Enter admin username\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-body font-medium text-foreground\">\n                Password\n              </label>\n              <div className=\"mt-1 relative\">\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"current-password\"\n                  required\n                  value={formData.password}\n                  onChange={handleChange}\n                  className=\"pr-10\"\n                  placeholder=\"Enter password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-3\">\n              <p className=\"text-sm text-destructive\">{error}</p>\n            </div>\n          )}\n\n          <div className=\"bg-muted/50 border rounded-lg p-4\">\n            <h3 className=\"text-sm font-medium text-foreground mb-2\">Demo Credentials:</h3>\n            <p className=\"text-sm text-muted-foreground\">Username: admin</p>\n            <p className=\"text-sm text-muted-foreground\">Password: admin123</p>\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={loading}\n          >\n            {loading ? 'Signing in...' : 'Sign in'}\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminLogin;\n","size_bytes":4702},"src/pages/admin-panel/index.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport AdminSidebar from './components/AdminSidebar';\nimport AdminHeader from './components/AdminHeader';\nimport ProductManagement from './components/ProductManagement';\nimport UserManagement from './components/UserManagement';\nimport OrderManagement from './components/OrderManagement';\nimport Dashboard from './components/Dashboard';\nimport Settings from './components/Settings';\nimport dataService from '../../services/dataService';\n\nconst AdminPanel = () => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [activeSection, setActiveSection] = useState('dashboard');\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Always check authentication on component mount and route changes\n    const checkAuthentication = () => {\n      const adminUser = JSON.parse(localStorage.getItem('adminUser') || 'null');\n      const sessionData = localStorage.getItem('neenu_auth_session');\n      \n      let validAdmin = null;\n      \n      // First check adminUser in localStorage\n      if (adminUser && adminUser.role === 'admin') {\n        // Verify this user still exists and has admin role\n        const user = dataService.getUser(adminUser.id);\n        if (user && user.role === 'admin') {\n          validAdmin = adminUser;\n        }\n      }\n      \n      // If no valid admin from adminUser, check session\n      if (!validAdmin && sessionData) {\n        try {\n          const session = JSON.parse(sessionData);\n          const user = dataService.getUser(session.userId);\n          if (user && user.role === 'admin') {\n            validAdmin = user;\n            // Sync adminUser in localStorage\n            localStorage.setItem('adminUser', JSON.stringify(user));\n          }\n        } catch (error) {\n          console.error('Invalid session data:', error);\n        }\n      }\n      \n      // If no valid admin found, redirect to login\n      if (!validAdmin) {\n        localStorage.removeItem('adminUser');\n        localStorage.removeItem('neenu_auth_session');\n        navigate('/admin-login', { replace: true });\n        return false;\n      }\n      \n      setCurrentUser(validAdmin);\n      return true;\n    };\n\n    // Run authentication check\n    const isAuthenticated = checkAuthentication();\n    \n    // Set up periodic authentication check (every 30 seconds)\n    const authInterval = setInterval(() => {\n      checkAuthentication();\n    }, 30000);\n    \n    return () => clearInterval(authInterval);\n  }, [navigate]);\n\n  const renderActiveSection = () => {\n    switch (activeSection) {\n      case 'dashboard':\n        return <Dashboard />;\n      case 'products':\n        return <ProductManagement />;\n      case 'users':\n        return <UserManagement />;\n      case 'orders':\n        return <OrderManagement />;\n      case 'settings':\n        return <Settings />;\n      default:\n        return <Dashboard />;\n    }\n  };\n\n  if (!currentUser) {\n    return <div className=\"flex items-center justify-center h-screen\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <AdminHeader\n        user={currentUser}\n        onToggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)}\n      />\n      \n      <div className=\"flex\">\n        <AdminSidebar\n          activeSection={activeSection}\n          onSectionChange={setActiveSection}\n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n        />\n        \n        <main className=\"flex-1 lg:ml-64 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {renderActiveSection()}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminPanel;\n","size_bytes":3770},"src/pages/checkout-process/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useCart } from '../../contexts/CartContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { sendOrderToWhatsApp } from '../../utils/whatsapp';\nimport dataService from '../../services/dataService';\nimport Header from '../../components/ui/Header';\nimport Breadcrumb from '../../components/ui/Breadcrumb';\nimport CheckoutProgress from './components/CheckoutProgress';\nimport ShippingForm from './components/ShippingForm';\nimport DeliveryOptions from './components/DeliveryOptions';\nimport PaymentForm from './components/PaymentForm';\nimport OrderReview from './components/OrderReview';\nimport OrderSummary from './components/OrderSummary';\nimport TrustSignals from './components/TrustSignals';\nimport Button from '../../components/ui/Button';\nimport Icon from '../../components/AppIcon';\n\nconst CheckoutProcess = () => {\n  const navigate = useNavigate();\n  const { cartItems, clearCart } = useCart();\n  const { user, loading } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!loading && !user) {\n      navigate('/user-login', { \n        state: { \n          from: '/checkout-process',\n          message: 'Please sign in to continue with checkout'\n        }\n      });\n    }\n  }, [user, loading, navigate]);\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [orderSummaryExpanded, setOrderSummaryExpanded] = useState(false);\n  const [appliedCoupon, setAppliedCoupon] = useState(null);\n  const [currentLocation, setCurrentLocation] = useState(null);\n\n\n  // Form data states\n  const [shippingData, setShippingData] = useState(null);\n  const [deliveryData, setDeliveryData] = useState(null);\n  const [paymentData, setPaymentData] = useState(null);\n\n  // Calculate totals\n  const subtotal = cartItems?.reduce((sum, item) => {\n    const itemPrice = parseFloat(item?.price) || 0;\n    const itemQuantity = parseInt(item?.quantity) || 0;\n    return sum + (itemPrice * itemQuantity);\n  }, 0);\n  const shippingCost = deliveryData?.price || (subtotal >= 499 ? 0 : 49);\n  const discountAmount = appliedCoupon === 'FLAT10' && subtotal >= 1499 ? subtotal * 0.1 : 0;\n  const total = subtotal + shippingCost - discountAmount;\n\n  // Auto-apply FLAT10 coupon if eligible\n  useEffect(() => {\n    if (subtotal >= 1499 && !appliedCoupon) {\n      setAppliedCoupon('FLAT10');\n    }\n  }, [subtotal, appliedCoupon]);\n\n  useEffect(() => {\n    if (!user) {\n      navigate('/user-auth');\n    }\n\n    // Get current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setCurrentLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          });\n        },\n        (error) => {\n          console.log('Location access denied:', error);\n        }\n      );\n    }\n  }, [user, navigate]);\n\n\n  const breadcrumbItems = [\n    { label: 'Home', path: '/homepage' },\n    { label: 'Shopping Cart', path: '/shopping-cart' },\n    { label: 'Checkout', path: '/checkout-process' }\n  ];\n\n  const handleStepNext = (stepData) => {\n    switch (currentStep) {\n      case 1:\n        setShippingData(stepData);\n        setCurrentStep(2);\n        break;\n      case 2:\n        setDeliveryData(stepData);\n        setCurrentStep(3);\n        break;\n      case 3:\n        setPaymentData(stepData);\n        setCurrentStep(4);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleStepBack = (targetStep = null) => {\n    const newStep = targetStep || currentStep - 1;\n    if (newStep >= 1 && newStep <= 4) {\n      setCurrentStep(newStep);\n    }\n  };\n\n  const handlePlaceOrder = async () => {\n    setIsProcessing(true);\n\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      const orderId = `NN${Date.now().toString().slice(-6)}`;\n\n      // Create order data\n      const orderData = {\n        orderId,\n        orderNumber: orderId,\n        userId: user?.id,\n        customerName: user?.name || shippingData?.firstName + ' ' + shippingData?.lastName,\n        customerEmail: user?.email || shippingData?.email,\n        customerPhone: user?.phone || shippingData?.phone,\n        items: cartItems?.map(item => ({\n          productId: item?.productId || item?.id,\n          name: item?.name,\n          variant: item?.variant,\n          quantity: parseInt(item?.quantity) || 0,\n          price: parseFloat(item?.price) || 0,\n          total: (parseFloat(item?.price) || 0) * (parseInt(item?.quantity) || 0)\n        })),\n        shippingAddress: {\n          firstName: shippingData?.firstName || user?.firstName,\n          lastName: shippingData?.lastName || user?.lastName,\n          email: shippingData?.email || user?.email,\n          phone: shippingData?.phone || user?.phone,\n          address: shippingData?.address,\n          apartment: shippingData?.apartment,\n          city: shippingData?.city,\n          state: shippingData?.state,\n          pincode: shippingData?.pincode,\n          country: shippingData?.country || 'India'\n        },\n        billingAddress: shippingData, // Assuming billing address is same as shipping for now\n        currentLocation,\n        paymentMethod: paymentData?.method,\n        subtotal: subtotal,\n        shipping: shippingCost,\n        discount: discountAmount,\n        total: total,\n        appliedCoupon,\n        status: 'pending',\n        createdAt: new Date().toISOString()\n      };\n\n      // Store order in database\n      const savedOrder = await dataService.addOrder(orderData);\n\n\n      // Send WhatsApp message\n      const customerName = orderData.customerName || 'Unknown Customer';\n      const customerPhone = orderData.customerPhone || 'Not provided';\n      const customerEmail = orderData.customerEmail || 'Not provided';\n      const locationInfo = currentLocation ? `Location: ${currentLocation.latitude}, ${currentLocation.longitude}` : 'Location not available';\n\n      const orderDetails = `NEW ORDER RECEIVED\n\nOrder ID: NN${Math.floor(Math.random() * 900000) + 100000}\nCustomer: ${customerName}\nPhone: ${customerPhone}\nEmail: ${customerEmail}\n\nItems Ordered:\n${cartItems?.map((item, index) => {\n  const itemPrice = parseFloat(item?.price) || 0;\n  const itemQuantity = parseInt(item?.quantity) || 0;\n  const itemTotal = itemPrice * itemQuantity;\n  return `${index + 1}. ${item?.name || 'Unknown Item'}\n   Qty: ${itemQuantity} x ‚Çπ${itemPrice.toFixed(2)} = ‚Çπ${itemTotal.toFixed(2)}`;\n}).join('\\n\\n')}\n\nShipping Address:\n${orderData.shippingAddress?.firstName} ${orderData.shippingAddress?.lastName}\n${orderData.shippingAddress?.address}\n${orderData.shippingAddress?.apartment || ''}\n${orderData.shippingAddress?.city}, ${orderData.shippingAddress?.state} - ${orderData.shippingAddress?.pincode}\nPhone: ${orderData.shippingAddress?.phone}\n\n${locationInfo}\n\nPayment Method: ${paymentData?.method}\n\nOrder Summary:\nSubtotal: ‚Çπ${subtotal?.toFixed(2)}\nShipping: ‚Çπ${shippingCost?.toFixed(2)}\n${discountAmount > 0 ? `Discount: -‚Çπ${discountAmount?.toFixed(2)}` : ''}\nTotal: ‚Çπ${total?.toFixed(2)}\n\nOrder Time: ${new Date().toLocaleString('en-IN')}`;\n\n      const phone = '917892783668'; // Replace with your WhatsApp number\n      const whatsappUrl = `https://wa.me/${phone}?text=${encodeURIComponent(orderDetails)}`;\n      window.open(whatsappUrl, '_blank');\n\n\n      // Clear cart\n      clearCart();\n\n      alert(`Order placed successfully! Order ID: ${orderId}\\n\\nOrder details have been sent to WhatsApp and you will receive a confirmation call shortly.`);\n      navigate('/user-account-dashboard?section=orders');\n\n    } catch (error) {\n      console.error('Order placement failed:', error);\n      alert('Failed to place order. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleApplyCoupon = (couponCode) => {\n    setAppliedCoupon(couponCode);\n  };\n\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <ShippingForm\n            onNext={handleStepNext}\n            onAddressSelect={(address) => setShippingData(address)}\n          />\n        );\n      case 2:\n        return (\n          <DeliveryOptions\n            onNext={handleStepNext}\n            onBack={handleStepBack}\n            shippingAddress={shippingData}\n          />\n        );\n      case 3:\n        return (\n          <PaymentForm\n            onNext={handleStepNext}\n            onBack={handleStepBack}\n            orderTotal={total}\n            paymentMethod={paymentData?.method}\n            setPaymentMethod={setPaymentData}\n          />\n        );\n      case 4:\n        return (\n          <OrderReview\n            onBack={handleStepBack}\n            onPlaceOrder={handlePlaceOrder}\n            shippingAddress={shippingData}\n            deliveryOption={deliveryData}\n            paymentMethod={paymentData?.method}\n            orderTotal={total}\n            isProcessing={isProcessing}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-6\">\n        <Breadcrumb customItems={breadcrumbItems} />\n\n        {/* Mobile Order Summary Toggle */}\n        <div className=\"lg:hidden mb-6\">\n          <Button\n            variant=\"outline\"\n            fullWidth\n            onClick={() => setOrderSummaryExpanded(!orderSummaryExpanded)}\n            iconName={orderSummaryExpanded ? \"ChevronUp\" : \"ChevronDown\"}\n            iconPosition=\"right\"\n          >\n            {orderSummaryExpanded ? 'Hide' : 'Show'} order summary (‚Çπ{total?.toFixed(2)})\n          </Button>\n\n          {orderSummaryExpanded && (\n            <div className=\"mt-4\">\n              <OrderSummary\n                cartItems={cartItems}\n                subtotal={subtotal}\n                shipping={shippingCost}\n                discount={discountAmount}\n                total={total}\n                onApplyCoupon={handleApplyCoupon}\n                appliedCoupon={appliedCoupon}\n              />\n            </div>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Checkout Form */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <CheckoutProgress currentStep={currentStep} />\n            {renderCurrentStep()}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"hidden lg:block space-y-6\">\n            <OrderSummary\n              cartItems={cartItems}\n              subtotal={subtotal}\n              shipping={shippingCost}\n              discount={discountAmount}\n              total={total}\n              onApplyCoupon={handleApplyCoupon}\n              appliedCoupon={appliedCoupon}\n            />\n\n            <TrustSignals />\n          </div>\n        </div>\n\n        {/* Mobile Trust Signals */}\n        <div className=\"lg:hidden mt-8\">\n          <TrustSignals />\n        </div>\n\n        {/* Guest Checkout Notice */}\n        <div className=\"mt-8 text-center\">\n          <div className=\"inline-flex items-center space-x-2 bg-muted/50 px-4 py-2 rounded-lg\">\n            <Icon name=\"User\" size={16} className=\"text-muted-foreground\" />\n            <span className=\"font-body text-sm text-muted-foreground\">\n              Checking out as guest ‚Ä¢{' '}\n              <button\n                onClick={() => navigate('/user-account-dashboard')}\n                className=\"text-primary hover:underline font-medium\"\n              >\n                Create account\n              </button>{' '}\n              for faster checkout\n            </span>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default CheckoutProcess;","size_bytes":11794},"src/pages/homepage/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport Header from '../../components/ui/Header';\nimport HeroSection from './components/HeroSection';\nimport CategoryTiles from './components/CategoryTiles';\nimport BestsellersCarousel from './components/BestsellersCarousel';\nimport NewsletterSection from './components/NewsletterSection';\nimport Footer from './components/Footer';\n\nimport { useCart } from '../../contexts/CartContext';\n\nconst Homepage = () => {\n  const { addToCart, getCartItemCount, cartItems } = useCart();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Mock cart data for demonstration\n  useEffect(() => {\n    const mockCartItems = [\n      {\n        id: 1,\n        name: \"Traditional Mysore Pak\",\n        price: 399,\n        image: \"https://images.unsplash.com/photo-1606313564200-e75d5e30476c?w=400&h=400&fit=crop\",\n        variant: \"250g\",\n        quantity: 2\n      },\n      {\n        id: 2,\n        name: \"Homemade Mango Pickle\",\n        price: 280,\n        image: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=400&h=400&fit=crop\",\n        variant: \"500g\",\n        quantity: 1\n      }\n    ];\n    // The original code had setCartItems(mockCartItems) here which would be incorrect if CartContext doesn't manage initial state this way.\n    // Assuming addToCart handles adding items and the context maintains the state.\n    // If initial cart state is needed, it should be handled within CartContext.\n  }, []);\n\n  const handleAddToCart = (product) => {\n    const cartItem = {\n      id: `${product.id}-default`,\n      productId: product.id,\n      name: product.name,\n      price: product.salePrice || product.price,\n      originalPrice: product.originalPrice || product.price,\n      image: product.image,\n      variant: 'Default',\n      category: product.category,\n      brand: product.brand\n    };\n    addToCart(cartItem, 1);\n    console.log('Added to cart:', cartItem);\n  };\n\n  const handleSearch = (query) => {\n    setSearchQuery(query);\n    // Navigate to product collection with search query\n    window.location.href = `/product-collection-grid?search=${encodeURIComponent(query)}`;\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Neenu's Natural - Premium Natural & Handmade Food Products</title>\n        <meta\n          name=\"description\"\n          content=\"Discover authentic Indian flavors with Neenu's Natural premium handmade food products. From traditional sweets to organic spices, experience pure natural taste with free shipping on orders above ‚Çπ499.\"\n        />\n        <meta name=\"keywords\" content=\"natural food products, handmade sweets, organic spices, traditional pickles, pure ghee, Indian food, authentic flavors, chemical-free, preservative-free\" />\n        <meta property=\"og:title\" content=\"Neenu's Natural - Premium Natural & Handmade Food Products\" />\n        <meta property=\"og:description\" content=\"Discover authentic Indian flavors with premium handmade food products. Free shipping on orders above ‚Çπ499.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://neenusnatural.com/homepage\" />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content=\"Neenu's Natural - Premium Natural Food Products\" />\n        <meta name=\"twitter:description\" content=\"Authentic Indian flavors, handmade with love. Free shipping on orders above ‚Çπ499.\" />\n        <link rel=\"canonical\" href=\"https://neenusnatural.com/homepage\" />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background\">\n        {/* Header */}\n        <Header\n          cartItemCount={getCartItemCount()}\n          isLoggedIn={false}\n          onSearch={handleSearch}\n          cartItems={cartItems}\n        />\n\n        {/* Main Content */}\n        <main>\n          {/* Hero Section */}\n          <HeroSection />\n\n          {/* Category Tiles */}\n          <CategoryTiles />\n\n          {/* Bestsellers Carousel */}\n          <BestsellersCarousel onAddToCart={handleAddToCart} />\n\n          {/* Newsletter Section */}\n          <NewsletterSection />\n        </main>\n\n        {/* Footer */}\n        <Footer />\n      </div>\n    </>\n  );\n};\n\nexport default Homepage;","size_bytes":4260},"src/pages/product-collection-grid/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { useCart } from '../../contexts/CartContext';\nimport Header from '../../components/ui/Header';\nimport Breadcrumb from '../../components/ui/Breadcrumb';\nimport FilterSidebar from './components/FilterSidebar';\nimport FilterChips from './components/FilterChips';\nimport SortDropdown from './components/SortDropdown';\nimport ProductGrid from './components/ProductGrid';\nimport QuickViewModal from './components/QuickViewModal';\nimport Button from '../../components/ui/Button';\nimport dataService from '../../services/dataService';\n\n\nconst ProductCollectionGrid = () => {\n  const location = useLocation();\n  const [searchParams] = useSearchParams();\n  const { addToCart, getCartItemCount, cartItems } = useCart();\n\n  // State management\n  const [products, setProducts] = useState([]);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isMobileFilterOpen, setIsMobileFilterOpen] = useState(false);\n  const [quickViewProduct, setQuickViewProduct] = useState(null);\n  const [isQuickViewOpen, setIsQuickViewOpen] = useState(false);\n  const [currentSort, setCurrentSort] = useState('best-selling');\n  const [wishlistItems, setWishlistItems] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMoreProducts, setHasMoreProducts] = useState(true);\n\n  // Filter state\n  const [filters, setFilters] = useState({\n    priceRange: [],\n    dietary: [],\n    categories: [],\n    brands: []\n  });\n\n  // Initialize products and apply URL filters\n  useEffect(() => {\n    const loadProducts = async () => {\n      try {\n        setLoading(true);\n        // Load products from async service\n        const response = await dataService.getProducts();\n        const allProducts = response.data;\n\n        // Filter by category if specified in URL\n        const urlParams = new URLSearchParams(location.search);\n        const categoryParam = urlParams.get('category');\n\n        let filteredProducts = allProducts;\n        if (categoryParam) {\n          filteredProducts = allProducts.filter(product => \n            product.category === categoryParam || product.subcategory === categoryParam\n          );\n        }\n\n        setProducts(filteredProducts);\n        \n        // Apply URL filters for sorting\n        const filter = searchParams?.get('filter');\n        if (filter === 'new-arrivals') {\n          setCurrentSort('newest');\n        }\n      } catch (error) {\n        console.error('Error loading products:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadProducts();\n  }, [searchParams, location.search]); // Depend on location.search for category filtering\n\n  // Filter and sort products\n  useEffect(() => {\n    let filtered = [...products];\n\n    // Apply filters\n    if (filters?.priceRange?.length > 0) {\n      filtered = filtered?.filter(product => {\n        return filters?.priceRange?.some(range => {\n          switch (range) {\n            case 'under-200':\n              return product?.salePrice < 200;\n            case '200-500':\n              return product?.salePrice >= 200 && product?.salePrice <= 500;\n            case '500-1000':\n              return product?.salePrice >= 500 && product?.salePrice <= 1000;\n            case 'above-1000':\n              return product?.salePrice > 1000;\n            default:\n              return true;\n          }\n        });\n      });\n    }\n\n    if (filters?.dietary?.length > 0) {\n      filtered = filtered?.filter(product =>\n        filters?.dietary?.some(diet => product?.dietary?.includes(diet))\n      );\n    }\n\n    if (filters?.categories?.length > 0) {\n      filtered = filtered?.filter(product =>\n        filters?.categories?.includes(product?.category)\n      );\n    }\n\n    if (filters?.brands?.length > 0) {\n      filtered = filtered?.filter(product =>\n        filters?.brands?.includes(product?.brand)\n      );\n    }\n\n    // Apply sorting\n    switch (currentSort) {\n      case 'price-low-high':\n        filtered?.sort((a, b) => a?.salePrice - b?.salePrice);\n        break;\n      case 'price-high-low':\n        filtered?.sort((a, b) => b?.salePrice - a?.salePrice);\n        break;\n      case 'newest':\n        filtered?.sort((a, b) => b?.id - a?.id);\n        break;\n      case 'oldest':\n        filtered?.sort((a, b) => a?.id - b?.id);\n        break;\n      case 'name-a-z':\n        filtered?.sort((a, b) => a?.name?.localeCompare(b?.name));\n        break;\n      case 'name-z-a':\n        filtered?.sort((a, b) => b?.name?.localeCompare(a?.name));\n        break;\n      case 'rating-high-low':\n        filtered?.sort((a, b) => b?.rating - a?.rating);\n        break;\n      case 'best-selling':\n      default:\n        filtered?.sort((a, b) => (b?.bestseller ? 1 : 0) - (a?.bestseller ? 1 : 0));\n        break;\n    }\n\n    setFilteredProducts(filtered);\n  }, [products, filters, currentSort]);\n\n  // Handle filter changes\n  const handleFilterChange = (filterType, newValue) => {\n    setFilters(prev => ({\n      ...prev,\n      [filterType]: newValue\n    }));\n  };\n\n  const handleRemoveFilter = (filterType, value) => {\n    setFilters(prev => ({\n      ...prev,\n      [filterType]: prev?.[filterType]?.filter(item => item !== value)\n    }));\n  };\n\n  const handleClearAllFilters = () => {\n    setFilters({\n      priceRange: [],\n      dietary: [],\n      categories: [],\n      brands: []\n    });\n  };\n\n  // Handle product actions\n  const handleQuickView = (product) => {\n    setQuickViewProduct(product);\n    setIsQuickViewOpen(true);\n  };\n\n  const handleAddToCart = (product, variant = null, quantity = 1) => {\n    const productToAdd = {\n      id: product?.id,\n      name: product?.name,\n      image: product?.image,\n      price: variant?.salePrice || product?.salePrice,\n      originalPrice: variant?.originalPrice || product?.originalPrice,\n      variant: variant?.weight || 'Default',\n      category: product?.category,\n      brand: product?.brand\n    };\n\n    addToCart(productToAdd, quantity);\n    \n    // Show success feedback\n    console.log('Added to cart:', productToAdd);\n  };\n\n  const handleAddToWishlist = (productId) => {\n    setWishlistItems(prev => {\n      if (prev?.includes(productId)) {\n        return prev?.filter(id => id !== productId);\n      }\n      return [...prev, productId];\n    });\n  };\n\n  const breadcrumbItems = [\n    { label: 'Home', path: '/homepage' },\n    { label: 'Products', path: '/product-collection-grid' }\n  ];\n\n  const categoryTitle = searchParams?.get('category')?.replace(/-/g, ' ')?.replace(/\\b\\w/g, l => l?.toUpperCase()) || 'All Products';\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        cartItemCount={getCartItemCount()}\n        cartItems={cartItems}\n        onSearch={(query) => console.log('Search:', query)}\n      />\n      <main className=\"container mx-auto px-4 py-6\">\n        <Breadcrumb customItems={breadcrumbItems} />\n\n        {/* Page Header */}\n        <div className=\"mb-6\">\n          <h1 className=\"font-heading font-bold text-3xl text-foreground mb-2\">\n            {categoryTitle}\n          </h1>\n          <p className=\"font-body text-muted-foreground\">\n            Discover our collection of natural, handmade products crafted with love and tradition.\n          </p>\n        </div>\n\n        <div className=\"flex flex-col lg:flex-row gap-6\">\n          {/* Desktop Sidebar */}\n          <div className=\"hidden lg:block w-80 flex-shrink-0\">\n            <FilterSidebar\n              isOpen={false}\n              onClose={() => {}}\n              filters={filters}\n              onFilterChange={handleFilterChange}\n              onClearFilters={handleClearAllFilters}\n            />\n          </div>\n\n          {/* Main Content */}\n          <div className=\"flex-1 space-y-6\">\n            {/* Mobile Filter Button & Sort */}\n            <div className=\"flex items-center justify-between\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsMobileFilterOpen(true)}\n                iconName=\"Filter\"\n                iconPosition=\"left\"\n                className=\"lg:hidden\"\n              >\n                Filters\n              </Button>\n\n              <div className=\"flex items-center gap-4\">\n                <span className=\"font-body text-sm text-muted-foreground\">\n                  {filteredProducts?.length} products\n                </span>\n                <SortDropdown\n                  currentSort={currentSort}\n                  onSortChange={setCurrentSort}\n                />\n              </div>\n            </div>\n\n            {/* Active Filter Chips */}\n            <FilterChips\n              activeFilters={filters}\n              onRemoveFilter={handleRemoveFilter}\n              onClearAll={handleClearAllFilters}\n            />\n\n            {/* Product Grid */}\n            <ProductGrid\n              products={filteredProducts}\n              loading={loading}\n              onQuickView={handleQuickView}\n              onAddToCart={handleAddToCart}\n              onAddToWishlist={handleAddToWishlist}\n              wishlistItems={wishlistItems}\n            />\n\n            {/* Load More Button */}\n            {!loading && filteredProducts?.length > 0 && hasMoreProducts && (\n              <div className=\"text-center pt-8\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    // Simulate loading more products\n                    setCurrentPage(prev => prev + 1);\n                    // In real app, this would load more products\n                    if (currentPage >= 3) {\n                      setHasMoreProducts(false);\n                    }\n                  }}\n                >\n                  Load More Products\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n      {/* Mobile Filter Sidebar */}\n      <FilterSidebar\n        isOpen={isMobileFilterOpen}\n        onClose={() => setIsMobileFilterOpen(false)}\n        filters={filters}\n        onFilterChange={handleFilterChange}\n        onClearFilters={handleClearAllFilters}\n        isMobile={true}\n      />\n      {/* Quick View Modal */}\n      <QuickViewModal\n        product={quickViewProduct}\n        isOpen={isQuickViewOpen}\n        onClose={() => {\n          setIsQuickViewOpen(false);\n          setQuickViewProduct(null);\n        }}\n        onAddToCart={handleAddToCart}\n      />\n    </div>\n  );\n};\n\nexport default ProductCollectionGrid;","size_bytes":10549},"src/pages/product-detail-page/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Header from '../../components/ui/Header';\nimport Breadcrumb from '../../components/ui/Breadcrumb';\nimport ProductImageGallery from './components/ProductImageGallery';\nimport ProductInfo from './components/ProductInfo';\nimport ProductDetails from './components/ProductDetails';\nimport ProductFAQ from './components/ProductFAQ';\nimport ProductReviews from './components/ProductReviews';\nimport RelatedProducts from './components/RelatedProducts';\n\nconst ProductDetailPage = () => {\n  const [searchParams] = useSearchParams();\n  const productId = searchParams?.get('id') || '1';\n  \n  const [cartItems, setCartItems] = useState([]);\n  const [wishlistItems, setWishlistItems] = useState([]);\n\n  // Mock product data\n  const mockProduct = {\n    id: productId,\n    name: \"Traditional Mango Pickle\",\n    shortDescription: \"Authentic homemade mango pickle with traditional spices\",\n    description: `Our Traditional Mango Pickle is crafted using time-honored recipes passed down through generations. Made with fresh, hand-picked raw mangoes and a perfect blend of aromatic spices, this pickle brings the authentic taste of Indian households to your table.\\n\\nEach jar is prepared in small batches to ensure maximum freshness and flavor. The mangoes are carefully selected for their quality and sourced directly from organic farms. Our traditional preparation method involves sun-drying and natural fermentation, which enhances the taste and preserves the pickle naturally without any artificial preservatives.`,\n    images: [\n      \"https://images.pexels.com/photos/4198015/pexels-photo-4198015.jpeg?auto=compress&cs=tinysrgb&w=800\",\n      \"https://images.pexels.com/photos/5560763/pexels-photo-5560763.jpeg?auto=compress&cs=tinysrgb&w=800\",\n      \"https://images.pexels.com/photos/4198017/pexels-photo-4198017.jpeg?auto=compress&cs=tinysrgb&w=800\",\n      \"https://images.pexels.com/photos/7129160/pexels-photo-7129160.jpeg?auto=compress&cs=tinysrgb&w=800\"\n    ],\n    variants: [\n      {\n        id: \"v1\",\n        weight: \"225g\",\n        price: 149.00,\n        originalPrice: 199.00,\n        stock: 25\n      },\n      {\n        id: \"v2\",\n        weight: \"450g\",\n        price: 279.00,\n        originalPrice: 349.00,\n        stock: 18\n      },\n      {\n        id: \"v3\",\n        weight: \"900g\",\n        price: 499.00,\n        originalPrice: 649.00,\n        stock: 12\n      }\n    ],\n    badges: [\"Handmade\", \"No Palm Oil\", \"Organic\", \"Traditional Recipe\"],\n    features: [\n      \"Made with organic raw mangoes\",\n      \"Traditional sun-drying process\",\n      \"No artificial preservatives\",\n      \"Small batch preparation\",\n      \"Authentic family recipe\",\n      \"Rich in probiotics\",\n      \"Long shelf life\"\n    ],\n    ingredients: {\n      description: \"Our mango pickle is made with carefully selected natural ingredients, following traditional recipes for authentic taste.\",\n      primary: [\n        \"Raw Mangoes (60%)\",\n        \"Mustard Oil\",\n        \"Rock Salt\",\n        \"Jaggery\"\n      ],\n      spices: [\n        \"Mustard Seeds\",\n        \"Fenugreek Seeds\",\n        \"Red Chili Powder\",\n        \"Turmeric Powder\",\n        \"Asafoetida\",\n        \"Fennel Seeds\"\n      ]\n    },\n    nutrition: {\n      energy: \"180 kcal\",\n      protein: \"2.5g\",\n      carbohydrates: \"12g\",\n      fat: \"14g\",\n      fiber: \"3.2g\",\n      sodium: \"890mg\"\n    },\n    rating: 4.6,\n    reviewCount: 127\n  };\n\n  // Mock FAQ data\n  const mockFAQs = [\n    {\n      question: \"How long does this pickle last?\",\n      answer: \"Our traditional mango pickle has a shelf life of 12 months when stored in a cool, dry place. Once opened, it should be consumed within 3 months and kept refrigerated.\"\n    },\n    {\n      question: \"Is this pickle made without oil?\",\n      answer: \"No, our mango pickle is made with premium mustard oil which is essential for the traditional taste and natural preservation. The oil also helps in maintaining the pickle's texture and flavor.\"\n    },\n    {\n      question: \"Can I get this pickle without spices?\",\n      answer: \"This particular variant is our traditional spicy mango pickle. However, we do offer a mild version with reduced spice levels. Please check our other product variants or contact us for custom orders.\"\n    },\n    {\n      question: \"Is this suitable for people with diabetes?\",\n      answer: \"Our pickle contains jaggery as a natural sweetener. While it's better than refined sugar, people with diabetes should consume it in moderation. We recommend consulting with your healthcare provider.\"\n    },\n    {\n      question: \"Do you use any artificial preservatives?\",\n      answer: \"No, we don't use any artificial preservatives. Our pickle is naturally preserved using traditional methods including salt, oil, and sun-drying process.\"\n    }\n  ];\n\n  // Mock reviews data\n  const mockReviews = [\n    {\n      id: 1,\n      customerName: \"Priya Sharma\",\n      rating: 5,\n      comment: \"Absolutely delicious! Tastes exactly like my grandmother\\'s homemade pickle. The spice level is perfect and the mango pieces are fresh and crunchy.\",\n      date: \"2025-01-15\",\n      verified: true,\n      helpful: 12\n    },\n    {\n      id: 2,\n      customerName: \"Rajesh Kumar\",\n      rating: 4,\n      comment: \"Good quality pickle with authentic taste. The packaging is excellent and the product arrived fresh. Will definitely order again.\",\n      date: \"2025-01-10\",\n      verified: true,\n      helpful: 8\n    },\n    {\n      id: 3,\n      customerName: \"Meera Patel\",\n      rating: 5,\n      comment: \"This is the best mango pickle I\\'ve ever bought online. The oil quality is premium and you can taste the freshness in every bite. Highly recommended!\",\n      date: \"2025-01-08\",\n      verified: true,\n      helpful: 15\n    },\n    {\n      id: 4,\n      customerName: \"Amit Singh\",\n      rating: 4,\n      comment: \"Great product! The pickle has the right balance of spices and the mango pieces are perfectly cut. My family loved it.\",\n      date: \"2025-01-05\",\n      verified: false,\n      helpful: 6\n    },\n    {\n      id: 5,\n      customerName: \"Kavitha Reddy\",\n      rating: 5,\n      comment: \"Excellent quality and taste. The traditional preparation method really shows in the flavor. Worth every penny!\",\n      date: \"2025-01-02\",\n      verified: true,\n      helpful: 9\n    },\n    {\n      id: 6,\n      customerName: \"Suresh Gupta\",\n      rating: 3,\n      comment: \"Good pickle but a bit too spicy for my taste. The quality is good though and packaging was secure.\",\n      date: \"2024-12-28\",\n      verified: true,\n      helpful: 3\n    }\n  ];\n\n  // Mock related products\n  const mockRelatedProducts = [\n    {\n      id: \"2\",\n      name: \"Lemon Pickle\",\n      image: \"https://images.pexels.com/photos/5560763/pexels-photo-5560763.jpeg?auto=compress&cs=tinysrgb&w=400\",\n      variants: [{ id: \"v1\", weight: \"225g\", price: 129.00, originalPrice: 169.00 }],\n      badges: [\"Handmade\"],\n      rating: 4.4,\n      reviewCount: 89\n    },\n    {\n      id: \"3\",\n      name: \"Mixed Vegetable Pickle\",\n      image: \"https://images.pexels.com/photos/4198017/pexels-photo-4198017.jpeg?auto=compress&cs=tinysrgb&w=400\",\n      variants: [{ id: \"v1\", weight: \"300g\", price: 179.00, originalPrice: 229.00 }],\n      badges: [\"Organic\"],\n      rating: 4.5,\n      reviewCount: 156\n    },\n    {\n      id: \"4\",\n      name: \"Garlic Pickle\",\n      image: \"https://images.pexels.com/photos/7129160/pexels-photo-7129160.jpeg?auto=compress&cs=tinysrgb&w=400\",\n      variants: [{ id: \"v1\", weight: \"200g\", price: 159.00, originalPrice: 199.00 }],\n      badges: [\"No Palm Oil\"],\n      rating: 4.3,\n      reviewCount: 67\n    },\n    {\n      id: \"5\",\n      name: \"Ginger Pickle\",\n      image: \"https://images.pexels.com/photos/4198015/pexels-photo-4198015.jpeg?auto=compress&cs=tinysrgb&w=400\",\n      variants: [{ id: \"v1\", weight: \"225g\", price: 139.00, originalPrice: 179.00 }],\n      badges: [\"Traditional Recipe\"],\n      rating: 4.6,\n      reviewCount: 94\n    }\n  ];\n\n  const breadcrumbItems = [\n    { label: 'Home', path: '/homepage' },\n    { label: 'Products', path: '/product-collection-grid' },\n    { label: 'Pickles', path: '/product-collection-grid?category=pickles' },\n    { label: mockProduct?.name, path: `/product-detail-page?id=${productId}` }\n  ];\n\n  const handleAddToCart = (item) => {\n    const existingItem = cartItems?.find(\n      cartItem => cartItem?.productId === item?.productId && cartItem?.variantId === item?.variantId\n    );\n\n    if (existingItem) {\n      setCartItems(cartItems?.map(cartItem =>\n        cartItem?.productId === item?.productId && cartItem?.variantId === item?.variantId\n          ? { ...cartItem, quantity: cartItem?.quantity + item?.quantity }\n          : cartItem\n      ));\n    } else {\n      const variant = mockProduct?.variants?.find(v => v?.id === item?.variantId);\n      const newItem = {\n        id: Date.now(),\n        productId: item?.productId,\n        variantId: item?.variantId,\n        name: mockProduct?.name,\n        variant: variant?.weight,\n        price: variant?.price,\n        image: mockProduct?.images?.[0],\n        quantity: item?.quantity\n      };\n      setCartItems([...cartItems, newItem]);\n    }\n  };\n\n  const handleAddToWishlist = () => {\n    const isInWishlist = wishlistItems?.some(item => item?.id === mockProduct?.id);\n    \n    if (isInWishlist) {\n      setWishlistItems(wishlistItems?.filter(item => item?.id !== mockProduct?.id));\n    } else {\n      setWishlistItems([...wishlistItems, {\n        id: mockProduct?.id,\n        name: mockProduct?.name,\n        image: mockProduct?.images?.[0],\n        price: mockProduct?.variants?.[0]?.price\n      }]);\n    }\n  };\n\n  const isInWishlist = wishlistItems?.some(item => item?.id === mockProduct?.id);\n  const averageRating = mockReviews?.reduce((sum, review) => sum + review?.rating, 0) / mockReviews?.length;\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [productId]);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        cartItemCount={cartItems?.reduce((sum, item) => sum + item?.quantity, 0)}\n        cartItems={cartItems}\n        onSearch={() => {}}\n      />\n      <main className=\"container mx-auto px-4 py-6\">\n        <Breadcrumb customItems={breadcrumbItems} />\n        \n        {/* Product Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12\">\n          {/* Product Images */}\n          <div className=\"lg:sticky lg:top-24 lg:self-start\">\n            <ProductImageGallery \n              images={mockProduct?.images}\n              productName={mockProduct?.name}\n            />\n          </div>\n          \n          {/* Product Information */}\n          <div>\n            <ProductInfo\n              product={mockProduct}\n              onAddToCart={handleAddToCart}\n              onAddToWishlist={handleAddToWishlist}\n              isInWishlist={isInWishlist}\n            />\n          </div>\n        </div>\n\n        {/* Product Details */}\n        <div className=\"mb-12\">\n          <ProductDetails product={mockProduct} />\n        </div>\n\n        {/* FAQ Section */}\n        <div className=\"mb-12\">\n          <ProductFAQ faqs={mockFAQs} />\n        </div>\n\n        {/* Reviews Section */}\n        <div className=\"mb-12\">\n          <ProductReviews\n            reviews={mockReviews}\n            averageRating={averageRating}\n            totalReviews={mockReviews?.length}\n          />\n        </div>\n\n        {/* Related Products */}\n        <div className=\"mb-12\">\n          <RelatedProducts\n            products={mockRelatedProducts}\n            onAddToCart={handleAddToCart}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default ProductDetailPage;","size_bytes":11729},"src/pages/shopping-cart/index.jsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useCart } from '../../contexts/CartContext';\nimport { Helmet } from 'react-helmet';\nimport Header from '../../components/ui/Header';\nimport Breadcrumb from '../../components/ui/Breadcrumb';\nimport CartItem from './components/CartItem';\nimport OrderSummary from './components/OrderSummary';\nimport EmptyCart from './components/EmptyCart';\nimport RelatedProducts from './components/RelatedProducts';\nimport SavedItems from './components/SavedItems';\n\nimport Button from '../../components/ui/Button';\n\nconst ShoppingCart = () => {\n  const { \n    cartItems, \n    savedItems, \n    updateQuantity, \n    removeFromCart, \n    saveForLater, \n    moveToCart, \n    removeFromSaved,\n    addToCart\n  } = useCart();\n  const [appliedCoupon, setAppliedCoupon] = useState(null);\n  const [pincode, setPincode] = useState('');\n  const [shippingLocation, setShippingLocation] = useState('');\n\n  // Calculate totals\n  const subtotal = cartItems?.reduce((sum, item) => sum + (item?.price * item?.quantity), 0);\n  const discount = appliedCoupon ? appliedCoupon?.discount : 0;\n  const discountedSubtotal = subtotal - discount;\n  \n  // Shipping calculation based on location\n  const getShippingCost = () => {\n    if (shippingLocation === 'bengaluru') {\n      return discountedSubtotal >= 499 ? 0 : 49;\n    } else if (shippingLocation === 'other') {\n      return discountedSubtotal >= 999 ? 0 : 99;\n    }\n    return 0;\n  };\n  \n  const shipping = getShippingCost();\n  const total = discountedSubtotal + shipping;\n\n  const handleUpdateQuantity = (itemId, newQuantity) => {\n    updateQuantity(itemId, newQuantity);\n  };\n\n  const handleRemoveItem = (itemId) => {\n    removeFromCart(itemId);\n  };\n\n  const handleSaveForLater = (itemId) => {\n    saveForLater(itemId);\n  };\n\n  const handleMoveToCart = (item) => {\n    moveToCart(item);\n  };\n\n  const handleRemoveFromSaved = (itemId) => {\n    removeFromSaved(itemId);\n  };\n\n  const handleApplyCoupon = (couponCode) => {\n    if (!couponCode) {\n      setAppliedCoupon(null);\n      return;\n    }\n\n    // Mock coupon validation\n    const coupons = {\n      'FLAT10': {\n        code: 'FLAT10',\n        discount: subtotal >= 1499 ? subtotal * 0.1 : 0,\n        minOrder: 1499,\n        description: '10% off on orders ‚â•‚Çπ1,499'\n      },\n      'FREE50': {\n        code: 'FREE50',\n        discount: 0,\n        minOrder: shippingLocation === 'bengaluru' ? 499 : 999,\n        description: 'Free shipping'\n      }\n    };\n\n    const coupon = coupons?.[couponCode];\n    if (coupon && subtotal >= coupon?.minOrder) {\n      setAppliedCoupon(coupon);\n    } else {\n      alert(`Coupon ${couponCode} is not valid or minimum order requirement not met.`);\n    }\n  };\n\n  const handlePincodeChange = (newPincode) => {\n    setPincode(newPincode);\n    // Mock pincode validation\n    const bengaluruPincodes = ['560001', '560002', '560003', '560004', '560005'];\n    if (bengaluruPincodes?.includes(newPincode)) {\n      setShippingLocation('bengaluru');\n    } else {\n      setShippingLocation('other');\n    }\n  };\n\n  const handleAddToCart = (product) => {\n    addToCart(product, 1);\n  };\n\n  const breadcrumbItems = [\n    { label: 'Home', path: '/homepage' },\n    { label: 'Shopping Cart', path: '/shopping-cart' }\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>Shopping Cart - Neenu's Natural | Review Your Natural Products</title>\n        <meta name=\"description\" content=\"Review and modify your cart items. Secure checkout with natural and organic food products. Free shipping available on orders above ‚Çπ499 in Bengaluru.\" />\n        <meta name=\"keywords\" content=\"shopping cart, natural products, organic food, checkout, free shipping, Neenu's Natural\" />\n      </Helmet>\n      <div className=\"min-h-screen bg-background\">\n        <Header \n          cartItemCount={cartItems?.length}\n          cartItems={cartItems}\n          onSearch={(query) => console.log('Search:', query)}\n        />\n\n        <main className=\"container mx-auto px-4 py-6\">\n          <Breadcrumb customItems={breadcrumbItems} />\n\n          {cartItems?.length === 0 ? (\n            <EmptyCart />\n          ) : (\n            <>\n              {/* Cart Header */}\n              <div className=\"flex items-center justify-between mb-6\">\n                <h1 className=\"font-heading font-bold text-2xl lg:text-3xl text-foreground\">\n                  Shopping Cart ({cartItems?.length} {cartItems?.length === 1 ? 'item' : 'items'})\n                </h1>\n                <Link to=\"/product-collection-grid\">\n                  <Button variant=\"ghost\" iconName=\"ArrowLeft\" iconPosition=\"left\">\n                    Continue Shopping\n                  </Button>\n                </Link>\n              </div>\n\n              {/* Main Cart Layout */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                {/* Cart Items - Left Column */}\n                <div className=\"lg:col-span-2\">\n                  <div className=\"space-y-4\">\n                    {cartItems?.map((item) => (\n                      <CartItem\n                        key={item?.id}\n                        item={item}\n                        onUpdateQuantity={handleUpdateQuantity}\n                        onRemoveItem={handleRemoveItem}\n                        onSaveForLater={handleSaveForLater}\n                      />\n                    ))}\n                  </div>\n\n                  {/* Saved Items */}\n                  <SavedItems\n                    savedItems={savedItems}\n                    onMoveToCart={handleMoveToCart}\n                    onRemoveFromSaved={handleRemoveFromSaved}\n                  />\n                </div>\n\n                {/* Order Summary - Right Column */}\n                <div className=\"lg:col-span-1\">\n                  <OrderSummary\n                    subtotal={subtotal}\n                    discount={discount}\n                    shipping={shipping}\n                    total={total}\n                    onApplyCoupon={handleApplyCoupon}\n                    appliedCoupon={appliedCoupon}\n                    onPincodeChange={handlePincodeChange}\n                    pincode={pincode}\n                    shippingLocation={shippingLocation}\n                  />\n                </div>\n              </div>\n\n              {/* Related Products */}\n              <RelatedProducts onAddToCart={handleAddToCart} />\n            </>\n          )}\n        </main>\n\n        {/* Mobile Sticky Checkout */}\n        {cartItems?.length > 0 && (\n          <div className=\"lg:hidden fixed bottom-0 left-0 right-0 bg-card border-t border-border p-4 shadow-warm-lg z-50\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"font-body text-sm text-muted-foreground\">\n                Total ({cartItems?.length} items)\n              </span>\n              <span className=\"font-data font-bold text-lg text-foreground\">\n                ‚Çπ{total?.toFixed(2)}\n              </span>\n            </div>\n            <Link to=\"/checkout-process\">\n              <Button\n                variant=\"default\"\n                fullWidth\n                size=\"lg\"\n                iconName=\"ArrowRight\"\n                iconPosition=\"right\"\n              >\n                Proceed to Checkout\n              </Button>\n            </Link>\n          </div>\n        )}\n\n        {/* Footer Spacer for Mobile */}\n        {cartItems?.length > 0 && <div className=\"lg:hidden h-24\" />}\n      </div>\n    </>\n  );\n};\n\nexport default ShoppingCart;","size_bytes":7537},"src/pages/user-account-dashboard/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useCart } from '../../contexts/CartContext';\nimport dataService from '../../services/dataService';\nimport Header from '../../components/ui/Header';\nimport DashboardSidebar from './components/DashboardSidebar';\nimport DashboardOverview from './components/DashboardOverview';\nimport OrderHistory from './components/OrderHistory';\nimport ProfileManagement from './components/ProfileManagement';\nimport AddressBook from './components/AddressBook';\nimport WishlistSection from './components/WishlistSection';\nimport PreferencesSection from './components/PreferencesSection';\n\nconst UserAccountDashboard = () => {\n  const location = useLocation();\n  const { user: authUser, userProfile } = useAuth();\n  const { getCartItemCount } = useCart();\n  const [activeSection, setActiveSection] = useState('overview');\n  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);\n\n  // Real orders data - moved before any useEffect that uses it\n  const [orders, setOrders] = useState([]);\n\n  // Use real user data from AuthContext or fallback to mock data\n  const [user, setUser] = useState({\n    id: authUser?.id || 1,\n    name: authUser?.name || authUser?.email || \"Guest User\",\n    email: authUser?.email || \"guest@example.com\",\n    phone: authUser?.phone || \"+91 9876543210\",\n    dateOfBirth: authUser?.dateOfBirth || \"1990-05-15\",\n    gender: authUser?.gender || \"Not specified\",\n    memberSince: authUser?.memberSince || \"January 2023\",\n    totalOrders: 0,\n    totalSpent: 0,\n    totalSaved: 0,\n    loyaltyPoints: 0,\n    cartItemCount: getCartItemCount(),\n    wishlistCount: authUser?.wishlistCount || 0,\n    lastPasswordChange: authUser?.lastPasswordChange || \"Not set\"\n  });\n\n  // Calculate real user stats from orders\n  useEffect(() => {\n    if (orders.length > 0) {\n      const totalSpent = orders.reduce((sum, order) => sum + (parseFloat(order.total) || 0), 0);\n      const totalSaved = orders.reduce((sum, order) => sum + (parseFloat(order.discount) || 0), 0);\n      const loyaltyPoints = Math.floor(totalSpent * 0.1); // 10% of spending as points\n      \n      setUser(prev => ({\n        ...prev,\n        totalOrders: orders.length,\n        totalSpent: totalSpent.toFixed(2),\n        totalSaved: totalSaved.toFixed(2),\n        loyaltyPoints: loyaltyPoints,\n        cartItemCount: getCartItemCount()\n      }));\n    }\n  }, [orders, getCartItemCount]);\n\n  // Update user data when authUser changes\n  useEffect(() => {\n    if (authUser) {\n      setUser({\n        id: authUser.id || 1,\n        name: authUser.name || authUser.email || \"Guest User\",\n        email: authUser.email || \"guest@example.com\",\n        phone: authUser.phone || \"+91 9876543210\",\n        dateOfBirth: authUser.dateOfBirth || \"1990-05-15\",\n        gender: authUser.gender || \"Not specified\",\n        memberSince: authUser.memberSince || \"January 2023\",\n        totalOrders: authUser.totalOrders || 0,\n        totalSpent: authUser.totalSpent || \"0\",\n        totalSaved: authUser.totalSaved || \"0\",\n        loyaltyPoints: authUser.loyaltyPoints || 0,\n        wishlistCount: authUser.wishlistCount || 0,\n        lastPasswordChange: authUser.lastPasswordChange || \"Not set\"\n      });\n    }\n  }, [authUser]);\n\n  // Load user orders\n  useEffect(() => {\n    const loadUserOrders = () => {\n      try {\n        const userOrders = dataService.getOrdersByUserId(user?.id);\n        console.log('Loaded user orders:', userOrders);\n        setOrders(userOrders);\n      } catch (error) {\n        console.error('Error loading user orders:', error);\n        setOrders([]);\n      }\n    };\n\n    if (user?.id) {\n      loadUserOrders();\n    }\n  }, [user?.id]);\n\n  // Mock addresses data\n  const [addresses, setAddresses] = useState([\n    {\n      id: 1,\n      name: \"Priya Sharma\",\n      phone: \"+91 9876543210\",\n      street: \"123, MG Road, Koramangala\",\n      city: \"Bengaluru\",\n      state: \"Karnataka\",\n      pincode: \"560034\",\n      landmark: \"Near Forum Mall\",\n      addressType: \"Home\",\n      isDefault: true\n    },\n    {\n      id: 2,\n      name: \"Priya Sharma\",\n      phone: \"+91 9876543210\",\n      street: \"456, Brigade Road, Commercial Street\",\n      city: \"Bengaluru\",\n      state: \"Karnataka\",\n      pincode: \"560001\",\n      landmark: \"Opposite Metro Station\",\n      addressType: \"Work\",\n      isDefault: false\n    }\n  ]);\n\n  // Mock wishlist data\n  const [wishlistItems, setWishlistItems] = useState([\n    {\n      id: 1,\n      name: \"Organic Basmati Rice\",\n      price: 299.00,\n      originalPrice: 349.00,\n      image: \"https://images.pexels.com/photos/4198015/pexels-photo-4198015.jpeg\",\n      variants: [\"1kg\", \"2kg\", \"5kg\"],\n      selectedVariant: \"1kg\",\n      inStock: true,\n      rating: 4.5,\n      reviewCount: 128,\n      badges: [\"Organic\", \"Premium\"],\n      addedDate: \"2024-08-20T10:30:00Z\"\n    },\n    {\n      id: 2,\n      name: \"Cold Pressed Sesame Oil\",\n      price: 449.00,\n      originalPrice: 499.00,\n      image: \"https://images.pexels.com/photos/4041392/pexels-photo-4041392.jpeg\",\n      variants: [\"500ml\", \"1L\"],\n      selectedVariant: \"500ml\",\n      inStock: true,\n      rating: 4.8,\n      reviewCount: 89,\n      badges: [\"Cold Pressed\"],\n      addedDate: \"2024-08-18T14:15:00Z\"\n    },\n    {\n      id: 3,\n      name: \"Handmade Pickle Combo\",\n      price: 599.00,\n      originalPrice: 699.00,\n      image: \"https://images.pexels.com/photos/4198015/pexels-photo-4198015.jpeg\",\n      variants: [\"3 Jars\", \"6 Jars\"],\n      selectedVariant: \"3 Jars\",\n      inStock: false,\n      rating: 4.3,\n      reviewCount: 45,\n      badges: [\"Handmade\", \"Traditional\"],\n      addedDate: \"2024-08-15T09:45:00Z\"\n    }\n  ]);\n\n  // Mock preferences data\n  const [preferences, setPreferences] = useState({\n    emailNotifications: {\n      orderUpdates: true,\n      promotions: true,\n      newsletter: false,\n      productRecommendations: false,\n      priceDropAlerts: true\n    },\n    smsNotifications: {\n      orderUpdates: true,\n      deliveryUpdates: true,\n      promotions: false\n    },\n    privacy: {\n      profileVisibility: 'private',\n      dataSharing: false,\n      marketingCommunication: false\n    },\n    shopping: {\n      currency: 'INR',\n      language: 'English',\n      defaultPaymentMethod: 'COD',\n      savePaymentMethods: false\n    }\n  });\n\n  // Mock cart data\n  const [cartItems] = useState([\n    {\n      id: 1,\n      name: \"Organic Turmeric Powder\",\n      variant: \"500g\",\n      price: 299.00,\n      quantity: 1,\n      image: \"https://images.pexels.com/photos/4198015/pexels-photo-4198015.jpeg\"\n    }\n  ]);\n\n  const recentOrders = orders?.slice(0, 3);\n  const loyaltyPoints = user?.loyaltyPoints;\n\n  // Handle section changes from URL params\n  useEffect(() => {\n    const urlParams = new URLSearchParams(location.search);\n    const section = urlParams?.get('section');\n    if (section && ['overview', 'orders', 'profile', 'addresses', 'wishlist', 'preferences']?.includes(section)) {\n      setActiveSection(section);\n    }\n  }, [location]);\n\n  const handleSectionChange = (section) => {\n    setActiveSection(section);\n    setIsMobileSidebarOpen(false);\n  };\n\n  const handleUpdateProfile = (updatedData) => {\n    setUser(prev => ({\n      ...prev,\n      ...updatedData\n    }));\n    console.log('Profile updated:', updatedData);\n  };\n\n  const handleAddAddress = (addressData) => {\n    const newAddress = {\n      id: Date.now(),\n      ...addressData,\n      isDefault: addresses?.length === 0\n    };\n    setAddresses(prev => [...prev, newAddress]);\n    console.log('Address added:', newAddress);\n  };\n\n  const handleUpdateAddress = (id, updatedData) => {\n    setAddresses(prev => prev?.map(addr => \n      addr?.id === id ? { ...addr, ...updatedData } : addr\n    ));\n    console.log('Address updated:', id, updatedData);\n  };\n\n  const handleDeleteAddress = (id) => {\n    setAddresses(prev => prev?.filter(addr => addr?.id !== id));\n    console.log('Address deleted:', id);\n  };\n\n  const handleSetDefaultAddress = (id) => {\n    setAddresses(prev => prev?.map(addr => ({\n      ...addr,\n      isDefault: addr?.id === id\n    })));\n    console.log('Default address set:', id);\n  };\n\n  const handleRemoveFromWishlist = (id) => {\n    setWishlistItems(prev => prev?.filter(item => item?.id !== id));\n    console.log('Removed from wishlist:', id);\n  };\n\n  const handleAddToCart = (item) => {\n    console.log('Added to cart:', item);\n    // Handle add to cart logic\n  };\n\n  const handleUpdatePreferences = (updatedPreferences) => {\n    setPreferences(updatedPreferences);\n    console.log('Preferences updated:', updatedPreferences);\n  };\n\n  const renderActiveSection = () => {\n    switch (activeSection) {\n      case 'orders':\n        return <OrderHistory orders={orders} />;\n      case 'profile':\n        return <ProfileManagement user={user} onUpdateProfile={handleUpdateProfile} />;\n      case 'addresses':\n        return (\n          <AddressBook\n            addresses={addresses}\n            onAddAddress={handleAddAddress}\n            onUpdateAddress={handleUpdateAddress}\n            onDeleteAddress={handleDeleteAddress}\n            onSetDefault={handleSetDefaultAddress}\n          />\n        );\n      case 'wishlist':\n        return (\n          <WishlistSection\n            wishlistItems={wishlistItems}\n            onRemoveFromWishlist={handleRemoveFromWishlist}\n            onAddToCart={handleAddToCart}\n          />\n        );\n      case 'preferences':\n        return (\n          <PreferencesSection\n            preferences={preferences}\n            onUpdatePreferences={handleUpdatePreferences}\n          />\n        );\n      case 'overview':\n      default:\n        return (\n          <DashboardOverview\n            user={user}\n            recentOrders={recentOrders}\n            loyaltyPoints={loyaltyPoints}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        isLoggedIn={!!authUser}\n        onSearch={(query) => console.log('Search:', query)}\n      />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Mobile Sidebar Toggle */}\n          <div className=\"lg:hidden\">\n            <button\n              onClick={() => setIsMobileSidebarOpen(!isMobileSidebarOpen)}\n              className=\"w-full bg-card border border-border rounded-lg p-4 flex items-center justify-between\"\n            >\n              <span className=\"font-body font-medium text-foreground\">\n                Account Menu\n              </span>\n              <span className=\"text-muted-foreground\">\n                {isMobileSidebarOpen ? '√ó' : '‚ò∞'}\n              </span>\n            </button>\n            \n            {isMobileSidebarOpen && (\n              <div className=\"mt-4\">\n                <DashboardSidebar\n                  user={user}\n                  onSectionChange={handleSectionChange}\n                  activeSection={activeSection}\n                />\n              </div>\n            )}\n          </div>\n\n          {/* Desktop Sidebar */}\n          <div className=\"hidden lg:block lg:w-1/4\">\n            <DashboardSidebar\n              user={user}\n              onSectionChange={handleSectionChange}\n              activeSection={activeSection}\n            />\n          </div>\n\n          {/* Main Content */}\n          <div className=\"flex-1 lg:w-3/4\">\n            {renderActiveSection()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserAccountDashboard;","size_bytes":11556},"src/pages/user-auth/index.jsx":{"content":"\nimport React, { useState } from 'react';\nimport { useNavigate, useLocation, Link } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport Header from '../../components/ui/Header';\nimport Button from '../../components/ui/Button';\nimport Input from '../../components/ui/Input';\nimport Icon from '../../components/AppIcon';\nimport dataService from '../../services/dataService';\n\nconst UserAuth = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { signIn } = useAuth();\n  const [isLogin, setIsLogin] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  \n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    password: '',\n    confirmPassword: ''\n  });\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!isLogin && !formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    }\n    \n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Please enter a valid email';\n    }\n    \n    if (!isLogin && !formData.phone.trim()) {\n      newErrors.phone = 'Phone number is required';\n    }\n    \n    if (!formData.password) {\n      newErrors.password = 'Password is required';\n    } else if (!isLogin && formData.password.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters';\n    }\n    \n    if (!isLogin && formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    \n    setLoading(true);\n    \n    try {\n      if (isLogin) {\n        // Login\n        const result = await signIn(formData.email, formData.password);\n        if (result.error) {\n          setErrors({ general: result.error.message });\n        } else {\n          // Redirect to where user came from (like checkout) or dashboard\n          const redirectTo = location.state?.from || '/user-account-dashboard';\n          navigate(redirectTo);\n        }\n      } else {\n        // Register\n        const existingUser = dataService.getUserByEmail(formData.email);\n        if (existingUser) {\n          setErrors({ email: 'Email already exists' });\n          return;\n        }\n        \n        const newUser = dataService.addUser({\n          name: formData.name,\n          email: formData.email,\n          phone: formData.phone,\n          password: formData.password,\n          role: 'customer',\n          memberSince: new Date().toISOString().split('T')[0],\n          totalOrders: 0,\n          totalSpent: 0,\n          loyaltyPoints: 0,\n          totalSaved: 0\n        });\n        \n        if (newUser) {\n          // Auto login after registration\n          const result = await signIn(formData.email, formData.password);\n          if (result.error) {\n            setErrors({ general: result.error.message });\n          } else {\n            // Redirect to where user came from (like checkout) or dashboard\n            const redirectTo = location.state?.from || '/user-account-dashboard';\n            navigate(redirectTo);\n          }\n        }\n      }\n    } catch (error) {\n      setErrors({ general: 'An error occurred. Please try again.' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-12\">\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"bg-card border border-border rounded-lg p-8 shadow-warm-lg\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"font-heading text-2xl font-bold text-foreground mb-2\">\n                {isLogin ? 'Welcome Back' : 'Create Account'}\n              </h1>\n              <p className=\"text-muted-foreground\">\n                {isLogin ? 'Sign in to your account' : 'Join Neenu\\'s Natural family'}\n              </p>\n              {location.state?.message && (\n                <p className=\"text-primary text-sm font-medium mt-2\">\n                  {location.state.message}\n                </p>\n              )}\n            </div>\n\n            {errors.general && (\n              <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-3 mb-6\">\n                <p className=\"text-destructive text-sm\">{errors.general}</p>\n              </div>\n            )}\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {!isLogin && (\n                <Input\n                  label=\"Full Name\"\n                  type=\"text\"\n                  value={formData.name}\n                  onChange={(e) => handleInputChange('name', e.target.value)}\n                  error={errors.name}\n                  required\n                />\n              )}\n\n              <Input\n                label=\"Email Address\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n                error={errors.email}\n                required\n              />\n\n              {!isLogin && (\n                <Input\n                  label=\"Phone Number\"\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange('phone', e.target.value)}\n                  error={errors.phone}\n                  required\n                />\n              )}\n\n              <Input\n                label=\"Password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={(e) => handleInputChange('password', e.target.value)}\n                error={errors.password}\n                required\n              />\n\n              {!isLogin && (\n                <Input\n                  label=\"Confirm Password\"\n                  type=\"password\"\n                  value={formData.confirmPassword}\n                  onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                  error={errors.confirmPassword}\n                  required\n                />\n              )}\n\n              <Button\n                type=\"submit\"\n                variant=\"default\"\n                fullWidth\n                size=\"lg\"\n                disabled={loading}\n              >\n                {loading ? 'Please wait...' : (isLogin ? 'Sign In' : 'Create Account')}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <button\n                type=\"button\"\n                onClick={() => setIsLogin(!isLogin)}\n                className=\"text-primary hover:underline font-medium\"\n              >\n                {isLogin ? 'Don\\'t have an account? Sign up' : 'Already have an account? Sign in'}\n              </button>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default UserAuth;\n","size_bytes":7296},"src/pages/admin-panel/components/AdminHeader.jsx":{"content":"\nimport React from 'react';\nimport { Menu, LogOut, User } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\n\nconst AdminHeader = ({ user, onToggleSidebar }) => {\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    localStorage.removeItem('adminUser');\n    navigate('/admin-login');\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border h-16 flex items-center justify-between px-6 lg:pl-70\">\n      <div className=\"flex items-center space-x-4\">\n        <button\n          onClick={onToggleSidebar}\n          className=\"lg:hidden p-2 hover:bg-muted rounded-lg\"\n        >\n          <Menu size={20} />\n        </button>\n        <h1 className=\"text-lg font-heading font-semibold text-foreground\">\n          Neenu's Natural - Admin\n        </h1>\n      </div>\n\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n          <User size={16} />\n          <span>{user.name}</span>\n        </div>\n        <button\n          onClick={handleLogout}\n          className=\"flex items-center space-x-2 px-3 py-2 text-sm bg-destructive text-destructive-foreground rounded-lg hover:bg-destructive/90 transition-colors\"\n        >\n          <LogOut size={16} />\n          <span>Logout</span>\n        </button>\n      </div>\n    </header>\n  );\n};\n\nexport default AdminHeader;\n","size_bytes":1387},"src/pages/admin-panel/components/AdminSidebar.jsx":{"content":"\nimport React from 'react';\nimport { X, LayoutDashboard, Package, Users, ShoppingCart, Settings } from 'lucide-react';\n\nconst AdminSidebar = ({ activeSection, onSectionChange, isOpen, onClose }) => {\n  const menuItems = [\n    {\n      id: 'dashboard',\n      label: 'Dashboard',\n      icon: LayoutDashboard,\n      description: 'Overview & analytics'\n    },\n    {\n      id: 'products',\n      label: 'Products',\n      icon: Package,\n      description: 'Manage products'\n    },\n    {\n      id: 'users',\n      label: 'Users',\n      icon: Users,\n      description: 'Manage customers'\n    },\n    {\n      id: 'orders',\n      label: 'Orders',\n      icon: ShoppingCart,\n      description: 'Order management'\n    },\n    {\n      id: 'settings',\n      label: 'Settings',\n      icon: Settings,\n      description: 'App settings'\n    }\n  ];\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`\n        fixed top-0 left-0 h-full w-64 bg-card border-r border-border z-50 transform transition-transform duration-300 ease-in-out\n        lg:translate-x-0 lg:static lg:z-auto\n        ${isOpen ? 'translate-x-0' : '-translate-x-full'}\n      `}>\n        {/* Header */}\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-heading font-bold text-foreground\">\n              Admin Panel\n            </h2>\n            <button\n              onClick={onClose}\n              className=\"lg:hidden p-1 hover:bg-muted rounded\"\n            >\n              <X size={20} />\n            </button>\n          </div>\n        </div>\n\n        {/* Menu Items */}\n        <nav className=\"p-4 space-y-2\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            return (\n              <button\n                key={item.id}\n                onClick={() => {\n                  onSectionChange(item.id);\n                  onClose();\n                }}\n                className={`\n                  w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors duration-200\n                  ${activeSection === item.id \n                    ? 'bg-primary text-primary-foreground' \n                    : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                  }\n                `}\n              >\n                <Icon size={20} />\n                <div>\n                  <div className=\"font-body font-medium\">{item.label}</div>\n                  <div className=\"text-xs opacity-75\">{item.description}</div>\n                </div>\n              </button>\n            );\n          })}\n        </nav>\n      </div>\n    </>\n  );\n};\n\nexport default AdminSidebar;\n","size_bytes":2874},"src/pages/admin-panel/components/Dashboard.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { \n  Package, Users, ShoppingCart, DollarSign, TrendingUp, TrendingDown, \n  AlertTriangle, Plus, BarChart3, Calendar, Eye, RefreshCw \n} from 'lucide-react';\nimport dataService from '../../../services/dataService';\n\nconst Dashboard = () => {\n  const [stats, setStats] = useState({\n    totalProducts: 0,\n    totalUsers: 0,\n    totalOrders: 0,\n    totalRevenue: 0,\n    recentOrders: [],\n    lowStockProducts: [],\n    monthlyRevenue: 0,\n    weeklyOrders: 0,\n    topSellingProducts: [],\n    pendingOrders: 0,\n    completedOrders: 0,\n    averageOrderValue: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      \n      // Get all data\n      const productsResponse = await dataService.getProducts();\n      const users = dataService.getUsers(); // Direct call since it's synchronous\n      const orders = dataService.getOrders(); // Direct call since it's synchronous\n      \n      const products = productsResponse.data || [];\n      const customerUsers = users.filter(u => u.role === 'customer');\n      \n      // Calculate revenue metrics\n      const totalRevenue = orders.reduce((sum, order) => sum + (order.total || 0), 0);\n      const averageOrderValue = orders.length > 0 ? totalRevenue / orders.length : 0;\n      \n      // Calculate date-based metrics\n      const now = new Date();\n      const currentMonth = now.getMonth();\n      const currentWeek = getWeekNumber(now);\n      \n      const monthlyOrders = orders.filter(order => {\n        const orderDate = new Date(order.createdAt);\n        return orderDate.getMonth() === currentMonth && orderDate.getFullYear() === now.getFullYear();\n      });\n      \n      const weeklyOrders = orders.filter(order => {\n        const orderDate = new Date(order.createdAt);\n        return getWeekNumber(orderDate) === currentWeek && orderDate.getFullYear() === now.getFullYear();\n      });\n      \n      const monthlyRevenue = monthlyOrders.reduce((sum, order) => sum + (order.total || 0), 0);\n      \n      // Order status counts\n      const pendingOrders = orders.filter(order => order.status === 'pending').length;\n      const completedOrders = orders.filter(order => order.status === 'delivered' || order.status === 'completed').length;\n      \n      // Product analytics\n      const lowStockProducts = products.filter(p => (p.stockQuantity || 0) < 10);\n      const recentOrders = orders.slice(-5).reverse();\n      \n      // Top selling products (based on order frequency)\n      const productSales = {};\n      orders.forEach(order => {\n        if (order.items) {\n          order.items.forEach(item => {\n            const productId = item.productId || item.id;\n            if (productId) {\n              productSales[productId] = (productSales[productId] || 0) + (item.quantity || 1);\n            }\n          });\n        }\n      });\n      \n      const topSellingProducts = Object.entries(productSales)\n        .sort(([,a], [,b]) => b - a)\n        .slice(0, 5)\n        .map(([productId, quantity]) => {\n          const product = products.find(p => p.id == productId);\n          return product ? { ...product, soldQuantity: quantity } : null;\n        })\n        .filter(Boolean);\n      \n      setStats({\n        totalProducts: products.length,\n        totalUsers: customerUsers.length,\n        totalOrders: orders.length,\n        totalRevenue,\n        monthlyRevenue,\n        weeklyOrders: weeklyOrders.length,\n        averageOrderValue,\n        pendingOrders,\n        completedOrders,\n        recentOrders,\n        lowStockProducts,\n        topSellingProducts\n      });\n      \n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n  \n  const getWeekNumber = (date) => {\n    const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n    const dayNum = d.getUTCDay() || 7;\n    d.setUTCDate(d.getUTCDate() + 4 - dayNum);\n    const yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));\n    return Math.ceil((((d - yearStart) / 86400000) + 1)/7);\n  };\n  \n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await loadDashboardData();\n  };\n\n  const handleQuickRestockProduct = async (productId) => {\n    const restockAmount = prompt('Enter quantity to add to stock:');\n    if (restockAmount && !isNaN(restockAmount) && parseInt(restockAmount) > 0) {\n      try {\n        const products = await dataService.getProducts();\n        const product = products.data.find(p => p.id === productId);\n        if (product) {\n          const newStock = (product.stockQuantity || 0) + parseInt(restockAmount);\n          // In a real app, you'd call dataService.updateProduct\n          // For now, we'll just update the local data and show success\n          product.stockQuantity = newStock;\n          product.inStock = newStock > 0;\n          \n          await loadDashboardData(); // Refresh data\n          alert(`Stock updated! ${product.name} now has ${newStock} items in stock.`);\n        }\n      } catch (error) {\n        console.error('Error updating stock:', error);\n        alert('Failed to update stock. Please try again.');\n      }\n    }\n  };\n  \n  const handleBulkRestock = () => {\n    // Show modal or navigate to bulk stock management\n    alert('Bulk restock feature - would open a dedicated stock management interface');\n  };\n\n  const StatCard = ({ title, value, subtitle, icon: Icon, color = 'primary' }) => (\n    <div className=\"bg-card border border-border rounded-lg p-6 hover:shadow-lg transition-shadow\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-body text-muted-foreground\">{title}</p>\n          <p className=\"text-2xl font-heading font-bold text-foreground mt-1\">{value}</p>\n          {subtitle && (\n            <p className=\"text-xs text-muted-foreground mt-1\">{subtitle}</p>\n          )}\n        </div>\n        <div className={`p-3 rounded-full bg-${color}/10 flex-shrink-0`}>\n          <Icon className={`w-6 h-6 text-${color}`} />\n        </div>\n      </div>\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"w-8 h-8 animate-spin text-primary mx-auto mb-2\" />\n          <p className=\"text-muted-foreground\">Loading dashboard data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-heading font-bold text-foreground\">Dashboard</h1>\n          <p className=\"text-muted-foreground\">Welcome back! Here's what's happening with your store.</p>\n        </div>\n        <button\n          onClick={handleRefresh}\n          disabled={refreshing}\n          className=\"flex items-center space-x-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50\"\n        >\n          <RefreshCw className={`w-4 h-4 ${refreshing ? 'animate-spin' : ''}`} />\n          <span>Refresh</span>\n        </button>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Total Products\"\n          value={stats.totalProducts}\n          subtitle={`${stats.lowStockProducts.length} low stock`}\n          icon={Package}\n          color=\"primary\"\n        />\n        <StatCard\n          title=\"Total Customers\"\n          value={stats.totalUsers}\n          subtitle=\"Active users\"\n          icon={Users}\n          color=\"success\"\n        />\n        <StatCard\n          title=\"Total Orders\"\n          value={stats.totalOrders}\n          subtitle={`${stats.pendingOrders} pending`}\n          icon={ShoppingCart}\n          color=\"warning\"\n        />\n        <StatCard\n          title=\"Total Revenue\"\n          value={`‚Çπ${stats.totalRevenue.toLocaleString()}`}\n          subtitle={`Avg: ‚Çπ${Math.round(stats.averageOrderValue)}`}\n          icon={DollarSign}\n          color=\"success\"\n        />\n      </div>\n      \n      {/* Secondary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Monthly Revenue\"\n          value={`‚Çπ${stats.monthlyRevenue.toLocaleString()}`}\n          subtitle=\"This month\"\n          icon={BarChart3}\n          color=\"primary\"\n        />\n        <StatCard\n          title=\"Weekly Orders\"\n          value={stats.weeklyOrders}\n          subtitle=\"This week\"\n          icon={Calendar}\n          color=\"success\"\n        />\n        <StatCard\n          title=\"Pending Orders\"\n          value={stats.pendingOrders}\n          subtitle=\"Need attention\"\n          icon={AlertTriangle}\n          color=\"warning\"\n        />\n        <StatCard\n          title=\"Completed Orders\"\n          value={stats.completedOrders}\n          subtitle=\"Successfully delivered\"\n          icon={ShoppingCart}\n          color=\"success\"\n        />\n      </div>\n\n      {/* Dashboard Sections - 2x2 Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Revenue Overview */}\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-heading font-semibold text-foreground\">Revenue Overview</h2>\n            <BarChart3 className=\"w-5 h-5 text-muted-foreground\" />\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Total Revenue</span>\n              <span className=\"font-semibold text-foreground\">‚Çπ{stats.totalRevenue.toLocaleString()}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">This Month</span>\n              <span className=\"font-semibold text-primary\">‚Çπ{stats.monthlyRevenue.toLocaleString()}</span>\n            </div>\n            <div className=\"w-full bg-muted rounded-full h-3\">\n              <div \n                className=\"bg-primary h-3 rounded-full transition-all duration-300\"\n                style={{ \n                  width: `${stats.totalRevenue > 0 ? Math.min((stats.monthlyRevenue / stats.totalRevenue) * 100, 100) : 0}%` \n                }}\n              ></div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"p-3 bg-success/10 rounded-lg text-center\">\n                <p className=\"text-sm text-muted-foreground\">Avg Order</p>\n                <p className=\"font-semibold text-success\">‚Çπ{Math.round(stats.averageOrderValue)}</p>\n              </div>\n              <div className=\"p-3 bg-primary/10 rounded-lg text-center\">\n                <p className=\"text-sm text-muted-foreground\">Completion Rate</p>\n                <p className=\"font-semibold text-primary\">\n                  {stats.totalOrders > 0 ? Math.round((stats.completedOrders / stats.totalOrders) * 100) : 0}%\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Top Selling Products */}\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-heading font-semibold text-foreground\">Top Selling</h2>\n            <Eye className=\"w-5 h-5 text-muted-foreground\" />\n          </div>\n          <div className=\"space-y-3\">\n            {stats.topSellingProducts.length > 0 ? (\n              stats.topSellingProducts.slice(0, 5).map((product) => (\n                <div key={product.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-body font-medium text-foreground\">{product.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{product.weight || 'N/A'}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-body font-bold text-primary\">{product.soldQuantity} sold</p>\n                    <p className=\"text-sm text-success\">‚Çπ{product.price}</p>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8\">\n                <Eye className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-muted-foreground\">No sales data yet</p>\n              </div>\n            )}\n          </div>\n        </div>\n        {/* Stock Alerts */}\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"w-5 h-5 mr-2 text-warning\" />\n              <h2 className=\"text-lg font-heading font-semibold text-foreground\">Stock Alerts</h2>\n              {stats.lowStockProducts.length > 0 && (\n                <span className=\"ml-2 bg-warning text-warning-foreground px-2 py-1 rounded-full text-xs font-medium\">\n                  {stats.lowStockProducts.length}\n                </span>\n              )}\n            </div>\n            <button\n              onClick={handleBulkRestock}\n              className=\"flex items-center space-x-2 px-3 py-1 bg-primary/10 text-primary rounded-md text-sm hover:bg-primary/20 transition-colors\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span>+ Bulk</span>\n            </button>\n          </div>\n          <div className=\"space-y-3\">\n            {stats.lowStockProducts.length > 0 ? (\n              stats.lowStockProducts.slice(0, 5).map((product) => (\n                <div key={product.id} className=\"flex items-center justify-between p-3 bg-warning/10 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-body font-medium text-foreground\">{product.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{product.weight || 'N/A'}</p>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"text-right\">\n                      <p className={`font-body font-bold ${\n                        (product.stockQuantity || 0) <= 5 ? 'text-destructive' : 'text-warning'\n                      }`}>\n                        {product.stockQuantity || 0} left\n                      </p>\n                    </div>\n                    <button\n                      onClick={() => handleQuickRestockProduct(product.id)}\n                      className=\"px-3 py-1 bg-primary text-primary-foreground rounded hover:bg-primary/90 transition-colors text-sm\"\n                    >\n                      + Add\n                    </button>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8\">\n                <Package className=\"w-8 h-8 text-success mx-auto mb-2\" />\n                <p className=\"text-success font-medium\">All products well stocked!</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Recent Orders */}\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-heading font-semibold text-foreground\">Recent Orders</h2>\n            <ShoppingCart className=\"w-5 h-5 text-muted-foreground\" />\n          </div>\n          <div className=\"space-y-3\">\n            {stats.recentOrders.length > 0 ? (\n              stats.recentOrders.slice(0, 5).map((order) => (\n                <div key={order.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg hover:bg-muted/70 transition-colors\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-body font-medium text-foreground\">#{order.id}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {new Date(order.createdAt).toLocaleDateString('en-IN')}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {order.shippingAddress?.firstName || order.customerName || 'Customer'}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-body font-bold text-foreground\">‚Çπ{(order.total || 0).toLocaleString()}</p>\n                    <span className={`inline-block px-3 py-1 rounded-full text-xs font-medium capitalize mt-1 ${\n                      order.status === 'pending' ? 'bg-warning/20 text-warning' :\n                      order.status === 'processing' ? 'bg-primary/20 text-primary' :\n                      order.status === 'shipped' ? 'bg-blue-100 text-blue-600' :\n                      order.status === 'delivered' || order.status === 'completed' ? 'bg-success/20 text-success' :\n                      order.status === 'cancelled' ? 'bg-destructive/20 text-destructive' :\n                      'bg-muted text-muted-foreground'\n                    }`}>\n                      {order.status}\n                    </span>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8\">\n                <ShoppingCart className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-muted-foreground\">No orders yet</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","size_bytes":17937},"src/pages/admin-panel/components/OrderManagement.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Search, Eye, Package, Truck, CheckCircle, Download, Printer } from 'lucide-react';\nimport dataService from '../../../services/dataService';\nimport { Button } from '../../../components/ui/Button';\nimport { Input } from '../../../components/ui/Input';\nimport { downloadInvoice, printInvoice } from '../../../utils/invoiceGenerator';\n\nconst OrderManagement = () => {\n  const [orders, setOrders] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadOrders();\n  }, []);\n\n  const loadOrders = () => {\n    setLoading(true);\n    const allOrders = dataService.getOrders();\n    setOrders(allOrders);\n    setLoading(false);\n  };\n\n  const filteredOrders = orders.filter(order => {\n    const matchesSearch = order.id.toString().includes(searchTerm) ||\n                         order.shippingAddress?.name?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = !statusFilter || order.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const updateOrderStatus = (orderId, newStatus) => {\n    dataService.updateOrder(orderId, { status: newStatus });\n    loadOrders();\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'pending':\n        return <Package className=\"w-4 h-4 text-warning\" />;\n      case 'processing':\n        return <Package className=\"w-4 h-4 text-primary\" />;\n      case 'shipped':\n        return <Truck className=\"w-4 h-4 text-primary\" />;\n      case 'delivered':\n        return <CheckCircle className=\"w-4 h-4 text-success\" />;\n      default:\n        return <Package className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'pending':\n        return 'text-warning bg-warning/10';\n      case 'processing':\n        return 'text-primary bg-primary/10';\n      case 'shipped':\n        return 'text-primary bg-primary/10';\n      case 'delivered':\n        return 'text-success bg-success/10';\n      case 'cancelled':\n        return 'text-destructive bg-destructive/10';\n      default:\n        return 'text-muted-foreground bg-muted/10';\n    }\n  };\n\n  const handleDownloadInvoice = (order) => {\n    try {\n      const settings = dataService.getSettings();\n      const customer = dataService.getUser(order.userId) || { \n        name: order.customerName, \n        email: order.customerEmail, \n        phone: order.customerPhone \n      };\n      downloadInvoice(order, customer, settings);\n    } catch (error) {\n      console.error('Error downloading invoice:', error);\n      alert('Failed to download invoice. Please try again.');\n    }\n  };\n\n  const handlePrintInvoice = (order) => {\n    try {\n      const settings = dataService.getSettings();\n      const customer = dataService.getUser(order.userId) || { \n        name: order.customerName, \n        email: order.customerEmail, \n        phone: order.customerPhone \n      };\n      printInvoice(order, customer, settings);\n    } catch (error) {\n      console.error('Error printing invoice:', error);\n      alert('Failed to print invoice. Please try again.');\n    }\n  };\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center h-64\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-heading font-bold text-foreground\">Order Management</h1>\n        <p className=\"text-muted-foreground\">Track and manage customer orders</p>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-card border border-border rounded-lg p-4\">\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={20} />\n              <Input\n                placeholder=\"Search by order ID or customer name...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n          <div className=\"sm:w-48\">\n            <select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value)}\n              className=\"w-full h-10 px-3 rounded-md border border-border bg-background text-foreground\"\n            >\n              <option value=\"\">All Status</option>\n              <option value=\"pending\">Pending</option>\n              <option value=\"processing\">Processing</option>\n              <option value=\"shipped\">Shipped</option>\n              <option value=\"delivered\">Delivered</option>\n              <option value=\"cancelled\">Cancelled</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Orders List */}\n      <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted/50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Order\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Customer\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Total\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Date\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {filteredOrders.map((order) => (\n                <tr key={order.id} className=\"hover:bg-muted/50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground\">#{order.id}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {order.items?.length} item(s)\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground\">\n                        {order.shippingAddress?.name}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {order.shippingAddress?.city}\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm font-medium text-foreground\">‚Çπ{order.total}</div>\n                    <div className=\"text-sm text-muted-foreground capitalize\">\n                      {order.paymentMethod}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(order.status)}`}>\n                      {getStatusIcon(order.status)}\n                      <span className=\"ml-1 capitalize\">{order.status}</span>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                    {new Date(order.createdAt).toLocaleDateString()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center space-x-2\">\n                      <select\n                        value={order.status}\n                        onChange={(e) => updateOrderStatus(order.id, e.target.value)}\n                        className=\"text-xs px-2 py-1 rounded border border-border bg-background\"\n                      >\n                        <option value=\"pending\">Pending</option>\n                        <option value=\"processing\">Processing</option>\n                        <option value=\"shipped\">Shipped</option>\n                        <option value=\"delivered\">Delivered</option>\n                        <option value=\"cancelled\">Cancelled</option>\n                      </select>\n                      <button\n                        onClick={() => handleDownloadInvoice(order)}\n                        className=\"p-1 text-primary hover:text-primary/80 transition-colors\"\n                        title=\"Download Invoice\"\n                      >\n                        <Download className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={() => handlePrintInvoice(order)}\n                        className=\"p-1 text-primary hover:text-primary/80 transition-colors\"\n                        title=\"Print Invoice\"\n                      >\n                        <Printer className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {filteredOrders.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">No orders found matching your criteria.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OrderManagement;\n","size_bytes":10016},"src/pages/admin-panel/components/ProductForm.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { X } from 'lucide-react';\nimport dataService from '../../../services/dataService';\nimport { Button } from '../../../components/ui/Button';\nimport { Input } from '../../../components/ui/Input';\n\nconst ProductForm = ({ product, onSave, onCancel }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    price: '',\n    originalPrice: '',\n    category: '',\n    subcategory: '',\n    image: '',\n    weight: '',\n    stockQuantity: '',\n    ingredients: '',\n    benefits: '',\n    inStock: true\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (product) {\n      setFormData({\n        ...product,\n        price: product.price.toString(),\n        originalPrice: product.originalPrice.toString(),\n        stockQuantity: product.stockQuantity.toString(),\n        ingredients: product.ingredients?.join(', ') || '',\n        benefits: product.benefits?.join(', ') || ''\n      });\n    }\n  }, [product]);\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const productData = {\n        ...formData,\n        price: parseFloat(formData.price),\n        originalPrice: parseFloat(formData.originalPrice),\n        stockQuantity: parseInt(formData.stockQuantity),\n        ingredients: formData.ingredients.split(',').map(item => item.trim()).filter(Boolean),\n        benefits: formData.benefits.split(',').map(item => item.trim()).filter(Boolean),\n        rating: product?.rating || 4.5,\n        reviewCount: product?.reviewCount || 0,\n        badges: product?.badges || []\n      };\n\n      if (product) {\n        dataService.updateProduct(product.id, productData);\n      } else {\n        dataService.addProduct(productData);\n      }\n\n      onSave();\n    } catch (err) {\n      setError('Failed to save product. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const categories = [\n    { id: 'oils-ghee', name: 'Oils & Ghee' },\n    { id: 'spices-masalas', name: 'Spices & Masalas' },\n    { id: 'natural-sweeteners', name: 'Natural Sweeteners' },\n    { id: 'dairy-products', name: 'Dairy Products' },\n    { id: 'pickles-preserves', name: 'Pickles & Preserves' },\n    { id: 'sweets-desserts', name: 'Sweets & Desserts' }\n  ];\n\n  const handleImageUpload = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setFormData(prev => ({\n          ...prev,\n          image: event.target.result\n        }));\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-card border border-border rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between p-6 border-b border-border\">\n          <h2 className=\"text-xl font-heading font-bold text-foreground\">\n            {product ? 'Edit Product' : 'Add New Product'}\n          </h2>\n          <button\n            onClick={onCancel}\n            className=\"p-2 hover:bg-muted rounded-full transition-colors\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-1\">\n                Product Name *\n              </label>\n              <Input\n                name=\"name\"\n                value={formData.name}\n                onChange={handleChange}\n                required\n                placeholder=\"Enter product name\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-1\">\n                Weight/Size *\n              </label>\n              <Input\n                name=\"weight\"\n                value={formData.weight}\n                onChange={handleChange}\n                required\n                placeholder=\"e.g., 500ml, 250g\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-1\">\n              Description *\n            </label>\n            <textarea\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              required\n              rows={3}\n              className=\"w-full px-3 py-2 border border-border rounded-md bg-background text-foreground\"\n              placeholder=\"Enter product description\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-1\">\n                Price *\n              </label>\n              <Input\n                name=\"price\"\n                type=\"number\"\n                value={formData.price}\n                onChange={handleChange}\n                required\n                placeholder=\"0.00\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-1\">\n                Original Price\n              </label>\n              <Input\n                name=\"originalPrice\"\n                type=\"number\"\n                value={formData.originalPrice}\n                onChange={handleChange}\n                placeholder=\"0.00\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-1\">\n                Stock Quantity *\n              </label>\n              <Input\n                name=\"stockQuantity\"\n                type=\"number\"\n                value={formData.stockQuantity}\n                onChange={handleChange}\n                required\n                placeholder=\"0\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-1\">\n                Category *\n              </label>\n              <select\n                name=\"category\"\n                value={formData.category}\n                onChange={handleChange}\n                required\n                className=\"w-full h-10 px-3 rounded-md border border-border bg-background text-foreground\"\n              >\n                <option value=\"\">Select Category</option>\n                {categories.map((category, index) => (\n                  <option key={index} value={category.id}>{category.name}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-1\">\n                Subcategory\n              </label>\n              <Input\n                name=\"subcategory\"\n                value={formData.subcategory}\n                onChange={handleChange}\n                placeholder=\"Enter subcategory\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-1\">\n              Product Image\n            </label>\n            <div className=\"space-y-2\">\n              <input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"w-full px-3 py-2 border border-border rounded-md bg-background text-foreground file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-primary file:text-primary-foreground hover:file:bg-primary/90\"\n              />\n              {formData.image && (\n                <div className=\"mt-2\">\n                  <img\n                    src={formData.image}\n                    alt=\"Preview\"\n                    className=\"w-20 h-20 object-cover rounded-md border\"\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-1\">\n              Ingredients (comma-separated)\n            </label>\n            <Input\n              name=\"ingredients\"\n              value={formData.ingredients}\n              onChange={handleChange}\n              placeholder=\"Organic coconut, Sea salt, etc.\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-1\">\n              Benefits (comma-separated)\n            </label>\n            <Input\n              name=\"benefits\"\n              value={formData.benefits}\n              onChange={handleChange}\n              placeholder=\"Rich in vitamins, Natural antioxidants, etc.\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              name=\"inStock\"\n              checked={formData.inStock}\n              onChange={handleChange}\n              className=\"w-4 h-4 text-primary border-border rounded\"\n            />\n            <label className=\"text-sm font-medium text-foreground\">\n              In Stock\n            </label>\n          </div>\n\n          {error && (\n            <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-3\">\n              <p className=\"text-sm text-destructive\">{error}</p>\n            </div>\n          )}\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? 'Saving...' : 'Save Product'}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductForm;","size_bytes":10157},"src/pages/admin-panel/components/ProductManagement.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Plus, Edit, Trash2, Search, Filter } from 'lucide-react';\nimport dataService from '../../../services/dataService';\nimport { Button } from '../../../components/ui/Button';\nimport { Input } from '../../../components/ui/Input';\nimport ProductForm from './ProductForm';\n\nconst ProductManagement = () => {\n  const [products, setProducts] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [showProductForm, setShowProductForm] = useState(false);\n  const [editingProduct, setEditingProduct] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadProducts();\n  }, []);\n\n  const loadProducts = async () => {\n    try {\n      setLoading(true);\n      const response = await dataService.getProducts();\n      setProducts(response.data);\n    } catch (error) {\n      console.error('Error loading products:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = !selectedCategory || product.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const handleAddProduct = () => {\n    setEditingProduct(null);\n    setShowProductForm(true);\n  };\n\n  const handleEditProduct = (product) => {\n    setEditingProduct(product);\n    setShowProductForm(true);\n  };\n\n  const handleDeleteProduct = (productId) => {\n    if (window.confirm('Are you sure you want to delete this product?')) {\n      dataService.deleteProduct(productId);\n      loadProducts();\n    }\n  };\n\n  const handleProductSaved = () => {\n    setShowProductForm(false);\n    setEditingProduct(null);\n    loadProducts();\n  };\n\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    const loadCategories = async () => {\n      try {\n        const response = await dataService.getCategories();\n        setCategories(response.data);\n      } catch (error) {\n        console.error('Error loading categories:', error);\n      }\n    };\n    loadCategories();\n  }, []);\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center h-64\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-heading font-bold text-foreground\">Product Management</h1>\n          <p className=\"text-muted-foreground\">Manage your product catalog</p>\n        </div>\n        <Button onClick={handleAddProduct} className=\"flex items-center space-x-2\">\n          <Plus size={20} />\n          <span>Add Product</span>\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-card border border-border rounded-lg p-4\">\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={20} />\n              <Input\n                placeholder=\"Search products...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n          <div className=\"sm:w-48\">\n            <select\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"w-full h-10 px-3 rounded-md border border-border bg-background text-foreground\"\n            >\n              <option value=\"\" key=\"all-categories\">All Categories</option>\n              {categories.map((category, index) => (\n                <option key={index} value={category.id || category}>\n                  {category.name || category}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Products Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredProducts.map((product) => (\n          <div key={product.id} className=\"bg-card border border-border rounded-lg overflow-hidden\">\n            <div className=\"aspect-square bg-muted relative\">\n              <img\n                src={product.image}\n                alt={product.name}\n                className=\"w-full h-full object-cover\"\n                onError={(e) => {\n                  e.target.src = '/assets/images/no_image.png';\n                }}\n              />\n              <div className=\"absolute top-2 right-2 flex space-x-2\">\n                <button\n                  onClick={() => handleEditProduct(product)}\n                  className=\"p-2 bg-card/80 backdrop-blur-sm rounded-full hover:bg-card transition-colors\"\n                >\n                  <Edit size={16} className=\"text-primary\" />\n                </button>\n                <button\n                  onClick={() => handleDeleteProduct(product.id)}\n                  className=\"p-2 bg-card/80 backdrop-blur-sm rounded-full hover:bg-card transition-colors\"\n                >\n                  <Trash2 size={16} className=\"text-destructive\" />\n                </button>\n              </div>\n            </div>\n            <div className=\"p-4\">\n              <h3 className=\"font-body font-medium text-foreground line-clamp-2 mb-2\">\n                {product.name}\n              </h3>\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-lg font-bold text-foreground\">‚Çπ{product.price}</span>\n                  {product.originalPrice > product.price && (\n                    <span className=\"text-sm text-muted-foreground line-through\">\n                      ‚Çπ{product.originalPrice}\n                    </span>\n                  )}\n                </div>\n                <span className=\"text-sm text-muted-foreground\">{product.weight}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className={`px-2 py-1 rounded-full ${\n                  product.inStock ? 'bg-success/10 text-success' : 'bg-destructive/10 text-destructive'\n                }`}>\n                  {product.inStock ? 'In Stock' : 'Out of Stock'}\n                </span>\n                <span className=\"text-muted-foreground\">Stock: {product.stockQuantity}</span>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {filteredProducts.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">No products found matching your criteria.</p>\n        </div>\n      )}\n\n      {/* Product Form Modal */}\n      {showProductForm && (\n        <ProductForm\n          product={editingProduct}\n          onSave={handleProductSaved}\n          onCancel={() => setShowProductForm(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ProductManagement;","size_bytes":7281},"src/pages/admin-panel/components/Settings.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Save } from 'lucide-react';\nimport dataService from '../../../services/dataService';\nimport { Button } from '../../../components/ui/Button';\nimport { Input } from '../../../components/ui/Input';\n\nconst Settings = () => {\n  const [settings, setSettings] = useState({\n    siteName: '',\n    currency: '',\n    shippingFee: '',\n    freeShippingThreshold: '',\n    taxRate: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [saved, setSaved] = useState(false);\n\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  const loadSettings = () => {\n    const currentSettings = dataService.getSettings();\n    setSettings({\n      siteName: currentSettings.siteName || '',\n      currency: currentSettings.currency || '',\n      shippingFee: currentSettings.shippingFee?.toString() || '',\n      freeShippingThreshold: currentSettings.freeShippingThreshold?.toString() || '',\n      taxRate: (currentSettings.taxRate * 100)?.toString() || ''\n    });\n  };\n\n  const handleChange = (e) => {\n    setSettings({\n      ...settings,\n      [e.target.name]: e.target.value\n    });\n    setSaved(false);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    const updatedSettings = {\n      siteName: settings.siteName,\n      currency: settings.currency,\n      shippingFee: parseFloat(settings.shippingFee),\n      freeShippingThreshold: parseFloat(settings.freeShippingThreshold),\n      taxRate: parseFloat(settings.taxRate) / 100\n    };\n\n    dataService.updateSettings(updatedSettings);\n    setLoading(false);\n    setSaved(true);\n\n    setTimeout(() => setSaved(false), 3000);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-heading font-bold text-foreground\">Settings</h1>\n        <p className=\"text-muted-foreground\">Configure your store settings</p>\n      </div>\n\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">\n                Site Name\n              </label>\n              <Input\n                name=\"siteName\"\n                value={settings.siteName}\n                onChange={handleChange}\n                placeholder=\"Your Store Name\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">\n                Currency\n              </label>\n              <Input\n                name=\"currency\"\n                value={settings.currency}\n                onChange={handleChange}\n                placeholder=\"INR\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">\n                Shipping Fee (‚Çπ)\n              </label>\n              <Input\n                name=\"shippingFee\"\n                type=\"number\"\n                value={settings.shippingFee}\n                onChange={handleChange}\n                placeholder=\"50\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">\n                Free Shipping Threshold (‚Çπ)\n              </label>\n              <Input\n                name=\"freeShippingThreshold\"\n                type=\"number\"\n                value={settings.freeShippingThreshold}\n                onChange={handleChange}\n                placeholder=\"500\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">\n                Tax Rate (%)\n              </label>\n              <Input\n                name=\"taxRate\"\n                type=\"number\"\n                step=\"0.01\"\n                value={settings.taxRate}\n                onChange={handleChange}\n                placeholder=\"18\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between pt-6 border-t border-border\">\n            {saved && (\n              <div className=\"text-sm text-success\">Settings saved successfully!</div>\n            )}\n            <Button\n              type=\"submit\"\n              disabled={loading}\n              className=\"flex items-center space-x-2 ml-auto\"\n            >\n              <Save size={16} />\n              <span>{loading ? 'Saving...' : 'Save Settings'}</span>\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n","size_bytes":4740},"src/pages/admin-panel/components/UserManagement.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Search, User, Mail, Phone, Calendar } from 'lucide-react';\nimport dataService from '../../../services/dataService';\nimport Input from '../../../components/ui/Input';\n\nconst UserManagement = () => {\n  const [users, setUsers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = () => {\n    setLoading(true);\n    const allUsers = dataService.getUsers().filter(user => user.role === 'customer');\n    setUsers(allUsers);\n    setLoading(false);\n  };\n\n  const filteredUsers = users.filter(user => {\n    return user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n           user.email.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center h-64\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-heading font-bold text-foreground\">User Management</h1>\n        <p className=\"text-muted-foreground\">Manage customer accounts and information</p>\n      </div>\n\n      {/* Search */}\n      <div className=\"bg-card border border-border rounded-lg p-4\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={20} />\n          <Input\n            placeholder=\"Search users by name or email...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Users Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredUsers.map((user) => (\n          <div key={user.id} className=\"bg-card border border-border rounded-lg p-6\">\n            <div className=\"flex items-center space-x-4 mb-4\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                <User className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div>\n                <h3 className=\"font-body font-medium text-foreground\">{user.name}</h3>\n                <p className=\"text-sm text-muted-foreground\">Customer #{user.id}</p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-foreground\">{user.email}</span>\n              </div>\n              \n              {user.phone && (\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                  <span className=\"text-foreground\">{user.phone}</span>\n                </div>\n              )}\n              \n              <div className=\"flex items-center space-x-2 text-sm\">\n                <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-foreground\">\n                  Joined {new Date(user.createdAt).toLocaleDateString()}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"mt-4 pt-4 border-t border-border\">\n              <div className=\"grid grid-cols-2 gap-4 text-center\">\n                <div>\n                  <div className=\"text-lg font-bold text-foreground\">{user.orders?.length || 0}</div>\n                  <div className=\"text-xs text-muted-foreground\">Orders</div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-bold text-foreground\">{user.wishlist?.length || 0}</div>\n                  <div className=\"text-xs text-muted-foreground\">Wishlist</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {filteredUsers.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">No users found matching your criteria.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserManagement;\n","size_bytes":4214},"src/pages/checkout-process/components/CheckoutProgress.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst CheckoutProgress = ({ currentStep = 1, totalSteps = 4 }) => {\n  const steps = [\n    { id: 1, label: 'Shipping', icon: 'Truck' },\n    { id: 2, label: 'Delivery', icon: 'Clock' },\n    { id: 3, label: 'Payment', icon: 'CreditCard' },\n    { id: 4, label: 'Review', icon: 'CheckCircle' }\n  ];\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-4 mb-6\">\n      <div className=\"flex items-center justify-between\">\n        {steps?.map((step, index) => (\n          <React.Fragment key={step?.id}>\n            <div className=\"flex flex-col items-center\">\n              <div className={`w-10 h-10 rounded-full flex items-center justify-center border-2 transition-colors duration-200 ${\n                step?.id <= currentStep \n                  ? 'bg-primary border-primary text-primary-foreground' \n                  : 'bg-background border-border text-muted-foreground'\n              }`}>\n                {step?.id < currentStep ? (\n                  <Icon name=\"Check\" size={16} />\n                ) : (\n                  <Icon name={step?.icon} size={16} />\n                )}\n              </div>\n              <span className={`mt-2 text-xs font-caption font-medium ${\n                step?.id <= currentStep ? 'text-foreground' : 'text-muted-foreground'\n              }`}>\n                {step?.label}\n              </span>\n            </div>\n            {index < steps?.length - 1 && (\n              <div className={`flex-1 h-0.5 mx-2 ${\n                step?.id < currentStep ? 'bg-primary' : 'bg-border'\n              }`} />\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CheckoutProgress;","size_bytes":1749},"src/pages/checkout-process/components/DeliveryOptions.jsx":{"content":"import React, { useState } from 'react';\nimport Button from '../../../components/ui/Button';\nimport Icon from '../../../components/AppIcon';\n\nconst DeliveryOptions = ({ onNext, onBack, shippingAddress }) => {\n  const [selectedOption, setSelectedOption] = useState('');\n\n  const isBengaluru = shippingAddress?.city?.toLowerCase() === 'bengaluru'|| shippingAddress?.pincode?.startsWith('560');\n\n  const deliveryOptions = [\n    {\n      id: 'standard',\n      name: 'Standard Delivery',\n      description: isBengaluru ? '2-3 business days' : '4-5 business days',\n      price: isBengaluru ? 0 : 49,\n      icon: 'Truck',\n      recommended: false\n    },\n    {\n      id: 'express',\n      name: 'Express Delivery',\n      description: isBengaluru ? 'Next business day' : '2-3 business days',\n      price: isBengaluru ? 99 : 149,\n      icon: 'Zap',\n      recommended: true\n    },\n    {\n      id: 'premium',\n      name: 'Premium Delivery',\n      description: isBengaluru ? 'Same day delivery' : 'Next business day',\n      price: isBengaluru ? 199 : 249,\n      icon: 'Clock',\n      recommended: false\n    }\n  ];\n\n  const handleSubmit = (e) => {\n    e?.preventDefault();\n    if (selectedOption) {\n      const selected = deliveryOptions?.find(option => option?.id === selectedOption);\n      onNext(selected);\n    }\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\">\n      <h2 className=\"font-heading font-semibold text-xl text-foreground mb-6\">\n        Delivery Options\n      </h2>\n      {/* Location Info */}\n      <div className=\"bg-muted/50 border border-border rounded-lg p-4 mb-6\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <Icon name=\"MapPin\" size={16} className=\"text-primary\" />\n          <span className=\"font-body font-medium text-foreground\">\n            Delivering to: {shippingAddress?.city || 'Your Location'}\n          </span>\n        </div>\n        <p className=\"font-body text-sm text-muted-foreground\">\n          {isBengaluru ? (\n            'You qualify for faster delivery options in Bengaluru!'\n          ) : (\n            'Delivery times may vary for locations outside Bengaluru'\n          )}\n        </p>\n      </div>\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        {deliveryOptions?.map((option) => (\n          <label\n            key={option?.id}\n            className={`block p-4 border rounded-lg cursor-pointer transition-colors duration-200 relative ${\n              selectedOption === option?.id\n                ? 'border-primary bg-primary/5' :'border-border hover:border-primary/50'\n            }`}\n          >\n            <input\n              type=\"radio\"\n              name=\"deliveryOption\"\n              value={option?.id}\n              checked={selectedOption === option?.id}\n              onChange={(e) => setSelectedOption(e?.target?.value)}\n              className=\"sr-only\"\n            />\n            \n            {option?.recommended && (\n              <div className=\"absolute -top-2 left-4 bg-primary text-primary-foreground px-2 py-1 rounded text-xs font-caption font-medium\">\n                Recommended\n              </div>\n            )}\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                  selectedOption === option?.id ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'\n                }`}>\n                  <Icon name={option?.icon} size={20} />\n                </div>\n                <div>\n                  <h3 className=\"font-body font-medium text-foreground\">\n                    {option?.name}\n                  </h3>\n                  <p className=\"font-body text-sm text-muted-foreground\">\n                    {option?.description}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <p className=\"font-data font-semibold text-foreground\">\n                  {option?.price === 0 ? 'Free' : `‚Çπ${option?.price}`}\n                </p>\n                <div className={`w-5 h-5 rounded-full border-2 flex items-center justify-center mt-1 ${\n                  selectedOption === option?.id\n                    ? 'border-primary bg-primary' :'border-border'\n                }`}>\n                  {selectedOption === option?.id && (\n                    <div className=\"w-2 h-2 bg-primary-foreground rounded-full\" />\n                  )}\n                </div>\n              </div>\n            </div>\n          </label>\n        ))}\n\n        {/* Delivery Information */}\n        <div className=\"bg-accent/10 border border-accent/20 rounded-lg p-4 mt-6\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"Info\" size={16} className=\"text-accent mt-0.5\" />\n            <div className=\"space-y-2\">\n              <h4 className=\"font-body font-medium text-foreground\">\n                Delivery Information\n              </h4>\n              <ul className=\"font-body text-sm text-muted-foreground space-y-1\">\n                <li>‚Ä¢ Orders placed before 2 PM are processed the same day</li>\n                <li>‚Ä¢ Weekend deliveries available for express and premium options</li>\n                <li>‚Ä¢ Free delivery on orders above ‚Çπ{isBengaluru ? '499' : '999'}</li>\n                <li>‚Ä¢ All products are carefully packaged to maintain freshness</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between pt-6\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onBack}\n            iconName=\"ArrowLeft\"\n            iconPosition=\"left\"\n          >\n            Back to Shipping\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"default\"\n            iconName=\"ArrowRight\"\n            iconPosition=\"right\"\n            disabled={!selectedOption}\n          >\n            Continue to Payment\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default DeliveryOptions;","size_bytes":6162},"src/pages/checkout-process/components/OrderReview.jsx":{"content":"import React from 'react';\nimport Button from '../../../components/ui/Button';\nimport Icon from '../../../components/AppIcon';\n\nconst OrderReview = ({ \n  onBack, \n  onPlaceOrder, \n  shippingAddress, \n  deliveryOption, \n  paymentMethod, \n  orderTotal,\n  isProcessing = false \n}) => {\n  const handlePlaceOrder = () => {\n    if (onPlaceOrder) {\n      onPlaceOrder();\n    }\n  };\n\n  const formatAddress = (address) => {\n    if (!address) return 'No address provided';\n    \n    if (typeof address === 'object') {\n      return `${address?.firstName} ${address?.lastName}\\n${address?.address}${address?.apartment ? ', ' + address?.apartment : ''}\\n${address?.city}, ${address?.state} - ${address?.pincode}\\n${address?.phone}`;\n    }\n    \n    return address;\n  };\n\n  const getPaymentMethodDisplay = (method) => {\n    const methodMap = {\n      'cod': 'Cash on Delivery',\n      'upi': 'UPI Payment',\n      'card': 'Credit/Debit Card',\n      'netbanking': 'Net Banking'\n    };\n    return methodMap?.[method] || method;\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\">\n      <h2 className=\"font-heading font-semibold text-xl text-foreground mb-6\">\n        Review Your Order\n      </h2>\n      <div className=\"space-y-6\">\n        {/* Shipping Information */}\n        <div className=\"p-4 bg-muted/30 rounded-lg border border-border\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"font-body font-medium text-foreground flex items-center space-x-2\">\n              <Icon name=\"MapPin\" size={16} />\n              <span>Shipping Address</span>\n            </h3>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onBack && onBack(1)}\n              iconName=\"Edit\"\n              iconPosition=\"left\"\n            >\n              Edit\n            </Button>\n          </div>\n          <div className=\"font-body text-sm text-muted-foreground whitespace-pre-line\">\n            {formatAddress(shippingAddress)}\n          </div>\n        </div>\n\n        {/* Delivery Information */}\n        <div className=\"p-4 bg-muted/30 rounded-lg border border-border\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"font-body font-medium text-foreground flex items-center space-x-2\">\n              <Icon name=\"Truck\" size={16} />\n              <span>Delivery Option</span>\n            </h3>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onBack && onBack(2)}\n              iconName=\"Edit\"\n              iconPosition=\"left\"\n            >\n              Edit\n            </Button>\n          </div>\n          {deliveryOption ? (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"font-body font-medium text-foreground\">\n                  {deliveryOption?.name}\n                </span>\n                <span className=\"font-data font-medium text-foreground\">\n                  {deliveryOption?.price === 0 ? 'Free' : `‚Çπ${deliveryOption?.price}`}\n                </span>\n              </div>\n              <p className=\"font-body text-sm text-muted-foreground\">\n                {deliveryOption?.description}\n              </p>\n            </div>\n          ) : (\n            <p className=\"font-body text-sm text-muted-foreground\">\n              No delivery option selected\n            </p>\n          )}\n        </div>\n\n        {/* Payment Information */}\n        <div className=\"p-4 bg-muted/30 rounded-lg border border-border\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"font-body font-medium text-foreground flex items-center space-x-2\">\n              <Icon name=\"CreditCard\" size={16} />\n              <span>Payment Method</span>\n            </h3>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onBack && onBack(3)}\n              iconName=\"Edit\"\n              iconPosition=\"left\"\n            >\n              Edit\n            </Button>\n          </div>\n          <div className=\"space-y-2\">\n            <p className=\"font-body font-medium text-foreground\">\n              {getPaymentMethodDisplay(paymentMethod?.method)}\n            </p>\n            {paymentMethod?.method === 'cod' && (\n              <p className=\"font-body text-sm text-muted-foreground\">\n                Pay ‚Çπ{orderTotal?.toFixed(2)} when your order is delivered\n              </p>\n            )}\n            {paymentMethod?.method === 'upi' && paymentMethod?.upiId && (\n              <p className=\"font-body text-sm text-muted-foreground\">\n                UPI ID: {paymentMethod?.upiId}\n              </p>\n            )}\n            {paymentMethod?.method === 'card' && paymentMethod?.cardData && (\n              <p className=\"font-body text-sm text-muted-foreground\">\n                Card ending in {paymentMethod?.cardData?.cardNumber?.slice(-4)}\n              </p>\n            )}\n          </div>\n        </div>\n\n        {/* Order Confirmation */}\n        <div className=\"bg-primary/10 border border-primary/20 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"Info\" size={16} className=\"text-primary mt-0.5\" />\n            <div className=\"space-y-2\">\n              <h4 className=\"font-body font-medium text-foreground\">\n                Order Confirmation\n              </h4>\n              <ul className=\"font-body text-sm text-muted-foreground space-y-1\">\n                <li>‚Ä¢ You will receive an order confirmation email shortly</li>\n                <li>‚Ä¢ Track your order status in your account dashboard</li>\n                <li>‚Ä¢ Contact support for any questions about your order</li>\n                <li>‚Ä¢ Return policy applies for 7 days from delivery</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* Terms and Conditions */}\n        <div className=\"text-center\">\n          <p className=\"font-body text-sm text-muted-foreground\">\n            By placing this order, you agree to our{' '}\n            <a href=\"/terms\" className=\"text-primary hover:underline\">\n              Terms of Service\n            </a>{' '}\n            and{' '}\n            <a href=\"/privacy\" className=\"text-primary hover:underline\">\n              Privacy Policy\n            </a>\n          </p>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-between pt-6\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => onBack && onBack(3)}\n            iconName=\"ArrowLeft\"\n            iconPosition=\"left\"\n            disabled={isProcessing}\n          >\n            Back to Payment\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"default\"\n            onClick={handlePlaceOrder}\n            loading={isProcessing}\n            iconName=\"CheckCircle\"\n            iconPosition=\"right\"\n            className=\"min-w-[140px]\"\n          >\n            {isProcessing ? 'Processing...' : 'Place Order'}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderReview;","size_bytes":7234},"src/pages/checkout-process/components/OrderSummary.jsx":{"content":"import React, { useState } from 'react';\nimport Image from '../../../components/AppImage';\nimport Input from '../../../components/ui/Input';\nimport Button from '../../../components/ui/Button';\nimport Icon from '../../../components/AppIcon';\n\nconst OrderSummary = ({ \n  cartItems = [], \n  subtotal = 0, \n  shipping = 0, \n  discount = 0, \n  total = 0,\n  onApplyCoupon,\n  appliedCoupon = null,\n  isCollapsible = false \n}) => {\n  const [isExpanded, setIsExpanded] = useState(!isCollapsible);\n  const [couponCode, setCouponCode] = useState('');\n  const [couponError, setCouponError] = useState('');\n\n  const mockCartItems = [\n    {\n      id: 1,\n      name: 'Organic Turmeric Powder',\n      variant: '250g',\n      price: 299,\n      originalPrice: 349,\n      quantity: 2,\n      image: 'https://images.unsplash.com/photo-1615485290382-441e4d049cb5?w=400&h=400&fit=crop'\n    },\n    {\n      id: 2,\n      name: 'Cold Pressed Coconut Oil',\n      variant: '500ml',\n      price: 450,\n      originalPrice: 500,\n      quantity: 1,\n      image: 'https://images.unsplash.com/photo-1474979266404-7eaacbcd87c5?w=400&h=400&fit=crop'\n    },\n    {\n      id: 3,\n      name: 'Himalayan Pink Salt',\n      variant: '1kg',\n      price: 199,\n      originalPrice: 249,\n      quantity: 1,\n      image: 'https://images.unsplash.com/photo-1518843875459-f738682238a6?w=400&h=400&fit=crop'\n    }\n  ];\n\n  const items = cartItems?.length > 0 ? cartItems : mockCartItems;\n  const calculatedSubtotal = subtotal || items?.reduce((sum, item) => sum + (item?.price * item?.quantity), 0);\n  const calculatedShipping = shipping || (calculatedSubtotal >= 499 ? 0 : 49);\n  const calculatedDiscount = discount || (appliedCoupon === 'FLAT10' && calculatedSubtotal >= 1499 ? calculatedSubtotal * 0.1 : 0);\n  const calculatedTotal = total || (calculatedSubtotal + calculatedShipping - calculatedDiscount);\n\n  const handleApplyCoupon = () => {\n    setCouponError('');\n    \n    if (!couponCode?.trim()) {\n      setCouponError('Please enter a coupon code');\n      return;\n    }\n\n    if (couponCode?.toUpperCase() === 'FLAT10') {\n      if (calculatedSubtotal >= 1499) {\n        if (onApplyCoupon) {\n          onApplyCoupon(couponCode?.toUpperCase());\n        }\n        setCouponCode('');\n      } else {\n        setCouponError('Minimum order value ‚Çπ1,499 required for FLAT10');\n      }\n    } else {\n      setCouponError('Invalid coupon code');\n    }\n  };\n\n  const handleRemoveCoupon = () => {\n    if (onApplyCoupon) {\n      onApplyCoupon(null);\n    }\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n      {/* Header - Collapsible on mobile */}\n      {isCollapsible && (\n        <button\n          onClick={() => setIsExpanded(!isExpanded)}\n          className=\"w-full p-4 flex items-center justify-between bg-muted/30 hover:bg-muted/50 transition-colors duration-200\"\n        >\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"ShoppingCart\" size={20} />\n            <span className=\"font-heading font-semibold text-foreground\">\n              Order Summary ({items?.length} items)\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"font-data font-semibold text-foreground\">\n              ‚Çπ{calculatedTotal?.toFixed(2)}\n            </span>\n            <Icon \n              name=\"ChevronDown\" \n              size={16} \n              className={`transform transition-transform duration-200 ${isExpanded ? 'rotate-180' : ''}`}\n            />\n          </div>\n        </button>\n      )}\n      {/* Content */}\n      {isExpanded && (\n        <div className=\"p-4 space-y-4\">\n          {!isCollapsible && (\n            <h3 className=\"font-heading font-semibold text-lg text-foreground\">\n              Order Summary\n            </h3>\n          )}\n\n          {/* Cart Items */}\n          <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n            {items?.map((item) => (\n              <div key={item?.id} className=\"flex items-center space-x-3\">\n                <div className=\"relative w-12 h-12 rounded-lg overflow-hidden flex-shrink-0\">\n                  <Image\n                    src={item?.image}\n                    alt={item?.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                  <div className=\"absolute -top-1 -right-1 bg-primary text-primary-foreground text-xs font-data font-bold rounded-full w-5 h-5 flex items-center justify-center\">\n                    {item?.quantity}\n                  </div>\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <h4 className=\"font-body font-medium text-sm text-foreground truncate\">\n                    {item?.name}\n                  </h4>\n                  <p className=\"font-caption text-xs text-muted-foreground\">\n                    {item?.variant}\n                  </p>\n                </div>\n                \n                <div className=\"text-right\">\n                  <p className=\"font-data font-semibold text-sm text-foreground\">\n                    ‚Çπ{(item?.price * item?.quantity)?.toFixed(2)}\n                  </p>\n                  {item?.originalPrice && item?.originalPrice > item?.price && (\n                    <p className=\"font-data text-xs text-muted-foreground line-through\">\n                      ‚Çπ{(item?.originalPrice * item?.quantity)?.toFixed(2)}\n                    </p>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Coupon Section */}\n          <div className=\"border-t border-border pt-4\">\n            {appliedCoupon ? (\n              <div className=\"flex items-center justify-between p-3 bg-success/10 border border-success/20 rounded-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <Icon name=\"Tag\" size={16} className=\"text-success\" />\n                  <span className=\"font-body font-medium text-success\">\n                    {appliedCoupon} Applied\n                  </span>\n                </div>\n                <button\n                  onClick={handleRemoveCoupon}\n                  className=\"text-success hover:text-success/80 transition-colors duration-200\"\n                >\n                  <Icon name=\"X\" size={16} />\n                </button>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Enter coupon code\"\n                    value={couponCode}\n                    onChange={(e) => setCouponCode(e?.target?.value?.toUpperCase())}\n                    error={couponError}\n                    className=\"flex-1\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleApplyCoupon}\n                    disabled={!couponCode?.trim()}\n                  >\n                    Apply\n                  </Button>\n                </div>\n                {calculatedSubtotal >= 1499 && !appliedCoupon && (\n                  <p className=\"font-body text-xs text-success\">\n                    Use code FLAT10 for 10% off!\n                  </p>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Order Totals */}\n          <div className=\"border-t border-border pt-4 space-y-2\">\n            <div className=\"flex justify-between font-body text-sm\">\n              <span className=\"text-muted-foreground\">Subtotal</span>\n              <span className=\"font-data font-medium\">‚Çπ{calculatedSubtotal?.toFixed(2)}</span>\n            </div>\n            \n            <div className=\"flex justify-between font-body text-sm\">\n              <span className=\"text-muted-foreground\">Shipping</span>\n              <span className=\"font-data font-medium\">\n                {calculatedShipping === 0 ? 'Free' : `‚Çπ${calculatedShipping?.toFixed(2)}`}\n              </span>\n            </div>\n            \n            {calculatedDiscount > 0 && (\n              <div className=\"flex justify-between font-body text-sm\">\n                <span className=\"text-success\">Discount ({appliedCoupon})</span>\n                <span className=\"font-data font-medium text-success\">\n                  -‚Çπ{calculatedDiscount?.toFixed(2)}\n                </span>\n              </div>\n            )}\n            \n            <div className=\"flex justify-between font-heading font-semibold text-base pt-2 border-t border-border\">\n              <span>Total</span>\n              <span className=\"font-data\">‚Çπ{calculatedTotal?.toFixed(2)}</span>\n            </div>\n          </div>\n\n          {/* Free Shipping Notice */}\n          {calculatedSubtotal < 499 && (\n            <div className=\"bg-warning/10 border border-warning/20 rounded-lg p-3\">\n              <p className=\"font-caption text-xs text-warning-foreground\">\n                Add ‚Çπ{(499 - calculatedSubtotal)?.toFixed(2)} more for free shipping!\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OrderSummary;","size_bytes":9199},"src/pages/checkout-process/components/PaymentForm.jsx":{"content":"import React, { useState } from 'react';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport Button from '../../../components/ui/Button';\nimport { Checkbox } from '../../../components/ui/Checkbox';\nimport Icon from '../../../components/AppIcon';\n\nconst PaymentForm = ({ onNext, onBack, orderTotal }) => {\n  const [paymentMethod, setPaymentMethod] = useState('');\n  const [cardData, setCardData] = useState({\n    cardNumber: '',\n    expiryMonth: '',\n    expiryYear: '',\n    cvv: '',\n    cardholderName: ''\n  });\n  const [upiId, setUpiId] = useState('');\n  const [savePaymentMethod, setSavePaymentMethod] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const paymentMethods = [\n    {\n      id: 'cod',\n      name: 'Cash on Delivery',\n      description: 'Pay when your order is delivered',\n      icon: 'Banknote',\n      fee: 0,\n      available: true\n    },\n    {\n      id: 'upi',\n      name: 'UPI Payment',\n      description: 'Pay using Google Pay, PhonePe, Paytm, etc.',\n      icon: 'Smartphone',\n      fee: 0,\n      available: true\n    },\n    {\n      id: 'card',\n      name: 'Credit/Debit Card',\n      description: 'Visa, Mastercard, RuPay accepted',\n      icon: 'CreditCard',\n      fee: 0,\n      available: true\n    },\n    {\n      id: 'netbanking',\n      name: 'Net Banking',\n      description: 'Pay directly from your bank account',\n      icon: 'Building2',\n      fee: 0,\n      available: true\n    }\n  ];\n\n  const monthOptions = Array.from({ length: 12 }, (_, i) => ({\n    value: String(i + 1)?.padStart(2, '0'),\n    label: String(i + 1)?.padStart(2, '0')\n  }));\n\n  const yearOptions = Array.from({ length: 10 }, (_, i) => {\n    const year = new Date()?.getFullYear() + i;\n    return { value: String(year), label: String(year) };\n  });\n\n  const handleCardInputChange = (e) => {\n    const { name, value } = e?.target;\n    let formattedValue = value;\n\n    if (name === 'cardNumber') {\n      formattedValue = value?.replace(/\\s/g, '')?.replace(/(.{4})/g, '$1 ')?.trim();\n      if (formattedValue?.length > 19) return;\n    } else if (name === 'cvv') {\n      formattedValue = value?.replace(/\\D/g, '');\n      if (formattedValue?.length > 3) return;\n    }\n\n    setCardData(prev => ({ ...prev, [name]: formattedValue }));\n    if (errors?.[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const validatePaymentForm = () => {\n    const newErrors = {};\n\n    if (paymentMethod === 'card') {\n      if (!cardData?.cardNumber?.replace(/\\s/g, '')) {\n        newErrors.cardNumber = 'Card number is required';\n      } else if (cardData?.cardNumber?.replace(/\\s/g, '')?.length < 16) {\n        newErrors.cardNumber = 'Invalid card number';\n      }\n      \n      if (!cardData?.expiryMonth) newErrors.expiryMonth = 'Expiry month is required';\n      if (!cardData?.expiryYear) newErrors.expiryYear = 'Expiry year is required';\n      if (!cardData?.cvv) newErrors.cvv = 'CVV is required';\n      if (!cardData?.cardholderName?.trim()) newErrors.cardholderName = 'Cardholder name is required';\n    } else if (paymentMethod === 'upi') {\n      if (!upiId?.trim()) {\n        newErrors.upiId = 'UPI ID is required';\n      } else if (!/^[\\w.-]+@[\\w.-]+$/?.test(upiId)) {\n        newErrors.upiId = 'Invalid UPI ID format';\n      }\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors)?.length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e?.preventDefault();\n    if (!paymentMethod) {\n      setErrors({ paymentMethod: 'Please select a payment method' });\n      return;\n    }\n\n    if (validatePaymentForm()) {\n      const paymentData = {\n        method: paymentMethod,\n        ...(paymentMethod === 'card' && { cardData }),\n        ...(paymentMethod === 'upi' && { upiId }),\n        savePaymentMethod\n      };\n      onNext(paymentData);\n    }\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\">\n      <h2 className=\"font-heading font-semibold text-xl text-foreground mb-6\">\n        Payment Method\n      </h2>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Payment Methods */}\n        <div className=\"space-y-3\">\n          {paymentMethods?.map((method) => (\n            <label\n              key={method?.id}\n              className={`block p-4 border rounded-lg cursor-pointer transition-colors duration-200 ${\n                paymentMethod === method?.id\n                  ? 'border-primary bg-primary/5'\n                  : method?.available \n                    ? 'border-border hover:border-primary/50' :'border-border bg-muted/50 cursor-not-allowed'\n              }`}\n            >\n              <input\n                type=\"radio\"\n                name=\"paymentMethod\"\n                value={method?.id}\n                checked={paymentMethod === method?.id}\n                onChange={(e) => setPaymentMethod(e?.target?.value)}\n                disabled={!method?.available}\n                className=\"sr-only\"\n              />\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                    paymentMethod === method?.id \n                      ? 'bg-primary text-primary-foreground' \n                      : method?.available\n                        ? 'bg-muted text-muted-foreground'\n                        : 'bg-muted/50 text-muted-foreground/50'\n                  }`}>\n                    <Icon name={method?.icon} size={20} />\n                  </div>\n                  <div>\n                    <h3 className={`font-body font-medium ${\n                      method?.available ? 'text-foreground' : 'text-muted-foreground'\n                    }`}>\n                      {method?.name}\n                    </h3>\n                    <p className=\"font-body text-sm text-muted-foreground\">\n                      {method?.description}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  {method?.fee > 0 && (\n                    <span className=\"font-data text-sm text-muted-foreground\">\n                      +‚Çπ{method?.fee}\n                    </span>\n                  )}\n                  <div className={`w-5 h-5 rounded-full border-2 flex items-center justify-center ${\n                    paymentMethod === method?.id\n                      ? 'border-primary bg-primary' :'border-border'\n                  }`}>\n                    {paymentMethod === method?.id && (\n                      <div className=\"w-2 h-2 bg-primary-foreground rounded-full\" />\n                    )}\n                  </div>\n                </div>\n              </div>\n            </label>\n          ))}\n        </div>\n\n        {errors?.paymentMethod && (\n          <p className=\"text-destructive text-sm font-body\">{errors?.paymentMethod}</p>\n        )}\n\n        {/* Card Payment Form */}\n        {paymentMethod === 'card' && (\n          <div className=\"space-y-4 p-4 bg-muted/30 rounded-lg border border-border\">\n            <h3 className=\"font-body font-medium text-foreground\">\n              Card Details\n            </h3>\n            \n            <Input\n              label=\"Cardholder Name\"\n              type=\"text\"\n              name=\"cardholderName\"\n              value={cardData?.cardholderName}\n              onChange={handleCardInputChange}\n              error={errors?.cardholderName}\n              required\n              placeholder=\"Name as on card\"\n            />\n\n            <Input\n              label=\"Card Number\"\n              type=\"text\"\n              name=\"cardNumber\"\n              value={cardData?.cardNumber}\n              onChange={handleCardInputChange}\n              error={errors?.cardNumber}\n              required\n              placeholder=\"1234 5678 9012 3456\"\n            />\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <Select\n                label=\"Month\"\n                options={monthOptions}\n                value={cardData?.expiryMonth}\n                onChange={(value) => setCardData(prev => ({ ...prev, expiryMonth: value }))}\n                error={errors?.expiryMonth}\n                required\n                placeholder=\"MM\"\n              />\n              <Select\n                label=\"Year\"\n                options={yearOptions}\n                value={cardData?.expiryYear}\n                onChange={(value) => setCardData(prev => ({ ...prev, expiryYear: value }))}\n                error={errors?.expiryYear}\n                required\n                placeholder=\"YYYY\"\n              />\n              <Input\n                label=\"CVV\"\n                type=\"text\"\n                name=\"cvv\"\n                value={cardData?.cvv}\n                onChange={handleCardInputChange}\n                error={errors?.cvv}\n                required\n                placeholder=\"123\"\n              />\n            </div>\n          </div>\n        )}\n\n        {/* UPI Payment Form */}\n        {paymentMethod === 'upi' && (\n          <div className=\"space-y-4 p-4 bg-muted/30 rounded-lg border border-border\">\n            <h3 className=\"font-body font-medium text-foreground\">\n              UPI Details\n            </h3>\n            \n            <Input\n              label=\"UPI ID\"\n              type=\"text\"\n              value={upiId}\n              onChange={(e) => setUpiId(e?.target?.value)}\n              error={errors?.upiId}\n              required\n              placeholder=\"yourname@paytm\"\n              description=\"Enter your UPI ID (e.g., 9876543210@paytm)\"\n            />\n          </div>\n        )}\n\n        {/* COD Information */}\n        {paymentMethod === 'cod' && (\n          <div className=\"p-4 bg-warning/10 border border-warning/20 rounded-lg\">\n            <div className=\"flex items-start space-x-3\">\n              <Icon name=\"Info\" size={16} className=\"text-warning mt-0.5\" />\n              <div>\n                <h4 className=\"font-body font-medium text-foreground mb-2\">\n                  Cash on Delivery\n                </h4>\n                <ul className=\"font-body text-sm text-muted-foreground space-y-1\">\n                  <li>‚Ä¢ Pay ‚Çπ{orderTotal?.toFixed(2)} when your order is delivered</li>\n                  <li>‚Ä¢ Please keep exact change ready</li>\n                  <li>‚Ä¢ COD available for orders up to ‚Çπ5,000</li>\n                  <li>‚Ä¢ Additional verification may be required</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Save Payment Method */}\n        {(paymentMethod === 'card' || paymentMethod === 'upi') && (\n          <Checkbox\n            label=\"Save this payment method for future orders\"\n            checked={savePaymentMethod}\n            onChange={(e) => setSavePaymentMethod(e?.target?.checked)}\n          />\n        )}\n\n        {/* Security Information */}\n        <div className=\"bg-success/10 border border-success/20 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"Shield\" size={16} className=\"text-success mt-0.5\" />\n            <div>\n              <h4 className=\"font-body font-medium text-foreground mb-2\">\n                Secure Payment\n              </h4>\n              <p className=\"font-body text-sm text-muted-foreground\">\n                Your payment information is encrypted and secure. We never store your card details.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between pt-6\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onBack}\n            iconName=\"ArrowLeft\"\n            iconPosition=\"left\"\n          >\n            Back to Delivery\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"default\"\n            iconName=\"ArrowRight\"\n            iconPosition=\"right\"\n          >\n            Review Order\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default PaymentForm;","size_bytes":12124},"src/pages/checkout-process/components/ShippingForm.jsx":{"content":"import React, { useState } from 'react';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport Button from '../../../components/ui/Button';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\n\nconst ShippingForm = ({ onNext, savedAddresses = [], onAddressSelect }) => {\n  const [selectedAddress, setSelectedAddress] = useState('');\n  const [showNewAddressForm, setShowNewAddressForm] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    address: '',\n    apartment: '',\n    city: '',\n    state: '',\n    pincode: '',\n    country: 'India'\n  });\n  const [errors, setErrors] = useState({});\n  const [saveAddress, setSaveAddress] = useState(false);\n\n  const stateOptions = [\n    { value: 'karnataka', label: 'Karnataka' },\n    { value: 'maharashtra', label: 'Maharashtra' },\n    { value: 'tamil-nadu', label: 'Tamil Nadu' },\n    { value: 'delhi', label: 'Delhi' },\n    { value: 'gujarat', label: 'Gujarat' },\n    { value: 'rajasthan', label: 'Rajasthan' },\n    { value: 'west-bengal', label: 'West Bengal' },\n    { value: 'uttar-pradesh', label: 'Uttar Pradesh' }\n  ];\n\n  const mockSavedAddresses = [\n    {\n      id: 1,\n      name: 'Home',\n      fullName: 'Priya Sharma',\n      address: '123 MG Road, Koramangala',\n      city: 'Bengaluru',\n      state: 'Karnataka',\n      pincode: '560034',\n      phone: '+91 98765 43210'\n    },\n    {\n      id: 2,\n      name: 'Office',\n      fullName: 'Priya Sharma',\n      address: '456 Brigade Road, Commercial Street',\n      city: 'Bengaluru',\n      state: 'Karnataka',\n      pincode: '560025',\n      phone: '+91 98765 43210'\n    }\n  ];\n\n  const handleInputChange = (e) => {\n    const { name, value } = e?.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    if (errors?.[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData?.firstName?.trim()) newErrors.firstName = 'First name is required';\n    if (!formData?.lastName?.trim()) newErrors.lastName = 'Last name is required';\n    if (!formData?.email?.trim()) newErrors.email = 'Email is required';\n    else if (!/\\S+@\\S+\\.\\S+/?.test(formData?.email)) newErrors.email = 'Invalid email format';\n    if (!formData?.phone?.trim()) newErrors.phone = 'Phone number is required';\n    else if (!/^[+]?[91]?[6-9]\\d{9}$/?.test(formData?.phone?.replace(/\\s/g, ''))) {\n      newErrors.phone = 'Invalid Indian phone number';\n    }\n    if (!formData?.address?.trim()) newErrors.address = 'Address is required';\n    if (!formData?.city?.trim()) newErrors.city = 'City is required';\n    if (!formData?.state) newErrors.state = 'State is required';\n    if (!formData?.pincode?.trim()) newErrors.pincode = 'Pincode is required';\n    else if (!/^\\d{6}$/?.test(formData?.pincode)) newErrors.pincode = 'Invalid pincode format';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors)?.length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e?.preventDefault();\n    if (selectedAddress || (showNewAddressForm && validateForm())) {\n      onNext(selectedAddress || formData);\n    }\n  };\n\n  const handleAddressSelection = (addressId) => {\n    setSelectedAddress(addressId);\n    setShowNewAddressForm(false);\n    if (onAddressSelect) {\n      const address = mockSavedAddresses?.find(addr => addr?.id === parseInt(addressId));\n      onAddressSelect(address);\n    }\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\">\n      <h2 className=\"font-heading font-semibold text-xl text-foreground mb-6\">\n        Shipping Information\n      </h2>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Saved Addresses */}\n        {mockSavedAddresses?.length > 0 && (\n          <div className=\"space-y-4\">\n            <h3 className=\"font-body font-medium text-foreground\">\n              Choose from saved addresses\n            </h3>\n            <div className=\"space-y-3\">\n              {mockSavedAddresses?.map((address) => (\n                <label\n                  key={address?.id}\n                  className={`block p-4 border rounded-lg cursor-pointer transition-colors duration-200 ${\n                    selectedAddress === address?.id?.toString()\n                      ? 'border-primary bg-primary/5' :'border-border hover:border-primary/50'\n                  }`}\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"savedAddress\"\n                    value={address?.id}\n                    checked={selectedAddress === address?.id?.toString()}\n                    onChange={(e) => handleAddressSelection(e?.target?.value)}\n                    className=\"sr-only\"\n                  />\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <span className=\"font-body font-medium text-foreground\">\n                          {address?.name}\n                        </span>\n                        <span className=\"bg-muted text-muted-foreground px-2 py-1 rounded text-xs font-caption\">\n                          {address?.fullName}\n                        </span>\n                      </div>\n                      <p className=\"font-body text-sm text-muted-foreground\">\n                        {address?.address}\n                      </p>\n                      <p className=\"font-body text-sm text-muted-foreground\">\n                        {address?.city}, {address?.state} - {address?.pincode}\n                      </p>\n                      <p className=\"font-data text-sm text-muted-foreground\">\n                        {address?.phone}\n                      </p>\n                    </div>\n                    <div className={`w-5 h-5 rounded-full border-2 flex items-center justify-center ${\n                      selectedAddress === address?.id?.toString()\n                        ? 'border-primary bg-primary' :'border-border'\n                    }`}>\n                      {selectedAddress === address?.id?.toString() && (\n                        <div className=\"w-2 h-2 bg-primary-foreground rounded-full\" />\n                      )}\n                    </div>\n                  </div>\n                </label>\n              ))}\n            </div>\n            \n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => {\n                setShowNewAddressForm(true);\n                setSelectedAddress('');\n              }}\n              iconName=\"Plus\"\n              iconPosition=\"left\"\n              className=\"w-full\"\n            >\n              Add New Address\n            </Button>\n          </div>\n        )}\n\n        {/* New Address Form */}\n        {(showNewAddressForm || mockSavedAddresses?.length === 0) && (\n          <div className=\"space-y-4\">\n            {mockSavedAddresses?.length > 0 && (\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-body font-medium text-foreground\">\n                  Add New Address\n                </h3>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowNewAddressForm(false)}\n                  iconName=\"X\"\n                  iconPosition=\"left\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            )}\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Input\n                label=\"First Name\"\n                type=\"text\"\n                name=\"firstName\"\n                value={formData?.firstName}\n                onChange={handleInputChange}\n                error={errors?.firstName}\n                required\n                placeholder=\"Enter first name\"\n              />\n              <Input\n                label=\"Last Name\"\n                type=\"text\"\n                name=\"lastName\"\n                value={formData?.lastName}\n                onChange={handleInputChange}\n                error={errors?.lastName}\n                required\n                placeholder=\"Enter last name\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Input\n                label=\"Email Address\"\n                type=\"email\"\n                name=\"email\"\n                value={formData?.email}\n                onChange={handleInputChange}\n                error={errors?.email}\n                required\n                placeholder=\"your.email@example.com\"\n              />\n              <Input\n                label=\"Phone Number\"\n                type=\"tel\"\n                name=\"phone\"\n                value={formData?.phone}\n                onChange={handleInputChange}\n                error={errors?.phone}\n                required\n                placeholder=\"+91 98765 43210\"\n              />\n            </div>\n\n            <Input\n              label=\"Address\"\n              type=\"text\"\n              name=\"address\"\n              value={formData?.address}\n              onChange={handleInputChange}\n              error={errors?.address}\n              required\n              placeholder=\"House number, street name\"\n            />\n\n            <Input\n              label=\"Apartment, suite, etc. (optional)\"\n              type=\"text\"\n              name=\"apartment\"\n              value={formData?.apartment}\n              onChange={handleInputChange}\n              placeholder=\"Apartment, suite, unit, building, floor, etc.\"\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Input\n                label=\"City\"\n                type=\"text\"\n                name=\"city\"\n                value={formData?.city}\n                onChange={handleInputChange}\n                error={errors?.city}\n                required\n                placeholder=\"Enter city\"\n              />\n              <Select\n                label=\"State\"\n                options={stateOptions}\n                value={formData?.state}\n                onChange={(value) => setFormData(prev => ({ ...prev, state: value }))}\n                error={errors?.state}\n                required\n                placeholder=\"Select state\"\n              />\n              <Input\n                label=\"Pincode\"\n                type=\"text\"\n                name=\"pincode\"\n                value={formData?.pincode}\n                onChange={handleInputChange}\n                error={errors?.pincode}\n                required\n                placeholder=\"560001\"\n                maxLength={6}\n              />\n            </div>\n\n            <Checkbox\n              label=\"Save this address for future orders\"\n              checked={saveAddress}\n              onChange={(e) => setSaveAddress(e?.target?.checked)}\n            />\n          </div>\n        )}\n\n        <div className=\"flex justify-end pt-4\">\n          <Button\n            type=\"submit\"\n            variant=\"default\"\n            iconName=\"ArrowRight\"\n            iconPosition=\"right\"\n            disabled={!selectedAddress && !showNewAddressForm}\n          >\n            Continue to Delivery\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ShippingForm;","size_bytes":11427},"src/pages/checkout-process/components/TrustSignals.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst TrustSignals = () => {\n  const trustFeatures = [\n    {\n      icon: 'Shield',\n      title: 'Secure Checkout',\n      description: '256-bit SSL encryption'\n    },\n    {\n      icon: 'Truck',\n      title: 'Free Shipping',\n      description: 'On orders above ‚Çπ499'\n    },\n    {\n      icon: 'RotateCcw',\n      title: 'Easy Returns',\n      description: '7-day return policy'\n    },\n    {\n      icon: 'Headphones',\n      title: '24/7 Support',\n      description: 'Customer service available'\n    }\n  ];\n\n  const securityBadges = [\n    {\n      name: 'SSL Secured',\n      icon: 'Lock',\n      color: 'text-success'\n    },\n    {\n      name: 'Payment Protected',\n      icon: 'CreditCard',\n      color: 'text-primary'\n    },\n    {\n      name: 'Data Safe',\n      icon: 'Database',\n      color: 'text-accent'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Trust Features */}\n      <div className=\"bg-card border border-border rounded-lg p-4\">\n        <h3 className=\"font-heading font-semibold text-foreground mb-4\">\n          Why Shop With Us?\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n          {trustFeatures?.map((feature, index) => (\n            <div key={index} className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                <Icon name={feature?.icon} size={16} className=\"text-primary\" />\n              </div>\n              <div>\n                <h4 className=\"font-body font-medium text-sm text-foreground\">\n                  {feature?.title}\n                </h4>\n                <p className=\"font-caption text-xs text-muted-foreground\">\n                  {feature?.description}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Security Badges */}\n      <div className=\"bg-card border border-border rounded-lg p-4\">\n        <h3 className=\"font-heading font-semibold text-foreground mb-4\">\n          Security & Trust\n        </h3>\n        <div className=\"flex flex-wrap gap-3\">\n          {securityBadges?.map((badge, index) => (\n            <div\n              key={index}\n              className=\"flex items-center space-x-2 bg-muted/50 px-3 py-2 rounded-lg\"\n            >\n              <Icon name={badge?.icon} size={14} className={badge?.color} />\n              <span className=\"font-caption text-xs font-medium text-foreground\">\n                {badge?.name}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Contact Information */}\n      <div className=\"bg-card border border-border rounded-lg p-4\">\n        <h3 className=\"font-heading font-semibold text-foreground mb-4\">\n          Need Help?\n        </h3>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center space-x-3\">\n            <Icon name=\"Phone\" size={16} className=\"text-primary\" />\n            <div>\n              <p className=\"font-body font-medium text-sm text-foreground\">\n                Call Us\n              </p>\n              <p className=\"font-data text-xs text-muted-foreground\">\n                +91 80-4567-8900\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <Icon name=\"MessageCircle\" size={16} className=\"text-success\" />\n            <div>\n              <p className=\"font-body font-medium text-sm text-foreground\">\n                WhatsApp\n              </p>\n              <p className=\"font-data text-xs text-muted-foreground\">\n                +91 98765 43210\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <Icon name=\"Mail\" size={16} className=\"text-accent\" />\n            <div>\n              <p className=\"font-body font-medium text-sm text-foreground\">\n                Email Support\n              </p>\n              <p className=\"font-data text-xs text-muted-foreground\">\n                support@neenusnatural.com\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Return Policy Link */}\n      <div className=\"text-center\">\n        <a\n          href=\"/return-policy\"\n          className=\"font-body text-sm text-primary hover:underline inline-flex items-center space-x-1\"\n        >\n          <Icon name=\"FileText\" size={14} />\n          <span>View Return & Refund Policy</span>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default TrustSignals;","size_bytes":4616},"src/pages/homepage/components/BestsellersCarousel.jsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../../../components/AppImage';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst BestsellersCarousel = ({ onAddToCart }) => {\n  const [currentSlide, setCurrentSlide] = useState(0);\n\n  const bestsellers = [\n    {\n      id: 1,\n      name: \"Traditional Mysore Pak\",\n      originalPrice: 450,\n      salePrice: 399,\n      image: \"https://images.unsplash.com/photo-1606313564200-e75d5e30476c?w=400&h=400&fit=crop\",\n      rating: 4.8,\n      reviewCount: 124,\n      badges: [\"Handmade\", \"No Palm Oil\"],\n      weight: \"250g\",\n      inStock: true,\n      quickAdd: true\n    },\n    {\n      id: 2,\n      name: \"Homemade Mango Pickle\",\n      originalPrice: 320,\n      salePrice: 280,\n      image: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=400&h=400&fit=crop\",\n      rating: 4.9,\n      reviewCount: 89,\n      badges: [\"Organic\", \"Traditional Recipe\"],\n      weight: \"500g\",\n      inStock: true,\n      quickAdd: true\n    },\n    {\n      id: 3,\n      name: \"Coconut Laddu Box\",\n      originalPrice: 380,\n      salePrice: 340,\n      image: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=400&fit=crop\",\n      rating: 4.7,\n      reviewCount: 156,\n      badges: [\"Fresh Made\", \"No Preservatives\"],\n      weight: \"300g\",\n      inStock: true,\n      quickAdd: true\n    },\n    {\n      id: 4,\n      name: \"Spiced Cashew Mix\",\n      originalPrice: 550,\n      salePrice: 495,\n      image: \"https://images.unsplash.com/photo-1599490659213-e2b9527bd087?w=400&h=400&fit=crop\",\n      rating: 4.6,\n      reviewCount: 78,\n      badges: [\"Premium Quality\", \"Roasted Fresh\"],\n      weight: \"200g\",\n      inStock: true,\n      quickAdd: true\n    },\n    {\n      id: 5,\n      name: \"Pure Ghee\",\n      originalPrice: 680,\n      salePrice: 620,\n      image: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=400&h=400&fit=crop\",\n      rating: 4.9,\n      reviewCount: 203,\n      badges: [\"A2 Cow Milk\", \"Chemical Free\"],\n      weight: \"500ml\",\n      inStock: true,\n      quickAdd: true\n    },\n    {\n      id: 6,\n      name: \"Sambar Powder\",\n      originalPrice: 180,\n      salePrice: 160,\n      image: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=400&h=400&fit=crop\",\n      rating: 4.8,\n      reviewCount: 92,\n      badges: [\"Authentic Blend\", \"No Artificial Colors\"],\n      weight: \"100g\",\n      inStock: true,\n      quickAdd: true\n    }\n  ];\n\n  const itemsPerSlide = {\n    mobile: 2,\n    tablet: 3,\n    desktop: 4\n  };\n\n  const totalSlides = Math.ceil(bestsellers?.length / itemsPerSlide?.desktop);\n\n  const nextSlide = () => {\n    setCurrentSlide((prev) => (prev + 1) % totalSlides);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide((prev) => (prev - 1 + totalSlides) % totalSlides);\n  };\n\n  const calculateSavings = (original, sale) => {\n    return Math.round(((original - sale) / original) * 100);\n  };\n\n  const handleQuickAdd = (product) => {\n    if (onAddToCart) {\n      onAddToCart({\n        id: product?.id,\n        name: product?.name,\n        price: product?.price || product?.salePrice || 0,\n        originalPrice: product?.originalPrice || product?.price || product?.salePrice || 0,\n        image: product?.image,\n        variant: product?.weight,\n        quantity: 1\n      });\n    }\n  };\n\n  return (\n    <section className=\"py-16 lg:py-20 bg-muted/30\">\n      <div className=\"container mx-auto px-4\">\n        {/* Section Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"font-heading font-bold text-3xl lg:text-4xl text-foreground mb-2\">\n              Bestsellers\n            </h2>\n            <p className=\"font-body text-muted-foreground\">\n              Most loved products by our customers\n            </p>\n          </div>\n          \n          {/* Navigation Arrows - Desktop */}\n          <div className=\"hidden lg:flex items-center space-x-2\">\n            <button\n              onClick={prevSlide}\n              className=\"w-10 h-10 rounded-full border border-border bg-card hover:bg-muted transition-colors duration-200 flex items-center justify-center\"\n              aria-label=\"Previous products\"\n            >\n              <Icon name=\"ChevronLeft\" size={20} />\n            </button>\n            <button\n              onClick={nextSlide}\n              className=\"w-10 h-10 rounded-full border border-border bg-card hover:bg-muted transition-colors duration-200 flex items-center justify-center\"\n              aria-label=\"Next products\"\n            >\n              <Icon name=\"ChevronRight\" size={20} />\n            </button>\n          </div>\n        </div>\n\n        {/* Products Carousel */}\n        <div className=\"relative overflow-hidden\">\n          <div \n            className=\"flex transition-transform duration-500 ease-in-out\"\n            style={{ \n              transform: `translateX(-${currentSlide * (100 / totalSlides)}%)`,\n              width: `${totalSlides * 100}%`\n            }}\n          >\n            {Array.from({ length: totalSlides })?.map((_, slideIndex) => (\n              <div \n                key={slideIndex}\n                className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 lg:gap-6\"\n                style={{ width: `${100 / totalSlides}%` }}\n              >\n                {bestsellers?.slice(slideIndex * itemsPerSlide?.desktop, (slideIndex + 1) * itemsPerSlide?.desktop)?.map((product) => (\n                    <div\n                      key={product?.id}\n                      className=\"group bg-card border border-border rounded-xl overflow-hidden hover:shadow-warm-lg transition-all duration-300 hover:-translate-y-1\"\n                    >\n                      {/* Product Image */}\n                      <div className=\"relative aspect-square overflow-hidden\">\n                        <Link to={`/product-detail-page?id=${product?.id}`}>\n                          <Image\n                            src={product?.image}\n                            alt={product?.name}\n                            className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-500\"\n                          />\n                        </Link>\n                        \n                        {/* Badges */}\n                        <div className=\"absolute top-2 left-2 space-y-1\">\n                          {product?.badges?.slice(0, 1)?.map((badge, index) => (\n                            <span\n                              key={index}\n                              className=\"bg-primary text-primary-foreground px-2 py-1 rounded-full text-xs font-caption font-medium\"\n                            >\n                              {badge}\n                            </span>\n                          ))}\n                        </div>\n\n                        {/* Discount Badge */}\n                        {product?.originalPrice > product?.salePrice && (\n                          <div className=\"absolute top-2 right-2\">\n                            <span className=\"bg-destructive text-destructive-foreground px-2 py-1 rounded-full text-xs font-caption font-medium\">\n                              {calculateSavings(product?.originalPrice, product?.salePrice)}% OFF\n                            </span>\n                          </div>\n                        )}\n\n                        {/* Quick Add Button */}\n                        <div className=\"absolute bottom-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                          <button\n                            onClick={() => handleQuickAdd(product)}\n                            className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center hover:bg-primary/90 transition-colors duration-200\"\n                            aria-label=\"Quick add to cart\"\n                          >\n                            <Icon name=\"Plus\" size={16} />\n                          </button>\n                        </div>\n                      </div>\n\n                      {/* Product Info */}\n                      <div className=\"p-4\">\n                        <Link to={`/product-detail-page?id=${product?.id}`}>\n                          <h3 className=\"font-body font-semibold text-sm lg:text-base text-foreground mb-2 line-clamp-2 hover:text-primary transition-colors duration-200\">\n                            {product?.name}\n                          </h3>\n                        </Link>\n                        \n                        {/* Rating */}\n                        <div className=\"flex items-center space-x-1 mb-2\">\n                          <div className=\"flex items-center\">\n                            {[...Array(5)]?.map((_, i) => (\n                              <Icon\n                                key={i}\n                                name=\"Star\"\n                                size={12}\n                                className={i < Math.floor(product?.rating) ? \"text-warning fill-current\" : \"text-muted-foreground\"}\n                              />\n                            ))}\n                          </div>\n                          <span className=\"font-caption text-xs text-muted-foreground\">\n                            ({product?.reviewCount})\n                          </span>\n                        </div>\n\n                        {/* Weight */}\n                        <p className=\"font-caption text-xs text-muted-foreground mb-2\">\n                          {product?.weight}\n                        </p>\n\n                        {/* Price */}\n                        <div className=\"flex items-center space-x-2 mb-3\">\n                          <span className=\"font-data font-bold text-base text-foreground\">\n                            ‚Çπ{product?.salePrice}\n                          </span>\n                          {product?.originalPrice > product?.salePrice && (\n                            <span className=\"font-data text-sm text-muted-foreground line-through\">\n                              ‚Çπ{product?.originalPrice}\n                            </span>\n                          )}\n                        </div>\n\n                        {/* Add to Cart Button */}\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          fullWidth\n                          onClick={() => handleQuickAdd(product)}\n                          iconName=\"ShoppingCart\"\n                          iconPosition=\"left\"\n                          iconSize={14}\n                        >\n                          Add to Cart\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Mobile Navigation Dots */}\n        <div className=\"flex justify-center space-x-2 mt-6 lg:hidden\">\n          {Array.from({ length: totalSlides })?.map((_, index) => (\n            <button\n              key={index}\n              onClick={() => setCurrentSlide(index)}\n              className={`w-2 h-2 rounded-full transition-colors duration-200 ${\n                index === currentSlide ? 'bg-primary' : 'bg-muted-foreground/30'\n              }`}\n              aria-label={`Go to slide ${index + 1}`}\n            />\n          ))}\n        </div>\n\n        {/* View All Link */}\n        <div className=\"text-center mt-8\">\n          <Link to=\"/product-collection-grid?filter=bestsellers\">\n            <Button variant=\"outline\" iconName=\"ArrowRight\" iconPosition=\"right\">\n              View All Bestsellers\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default BestsellersCarousel;","size_bytes":11836},"src/pages/homepage/components/CategoryTiles.jsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../../../components/AppImage';\nimport Icon from '../../../components/AppIcon';\n\nconst CategoryTiles = () => {\n  const categories = [\n    {\n      id: 1,\n      name: \"Unpolished Pulses, Dals & Rice\",\n      description: \"Chemical-free rice varieties and authentic pulses\",\n      image: \"https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=unpolished-pulses-dals-rice\",\n      productCount: \"15+ Products\",\n      featured: true\n    },\n    {\n      id: 2,\n      name: \"Poha / Aval\",\n      description: \"Traditional flattened rice varieties\",\n      image: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=poha-aval\",\n      productCount: \"3+ Products\"\n    },\n    {\n      id: 3,\n      name: \"Sugars & Honey\",\n      description: \"Natural sweeteners and organic honey\",\n      image: \"https://images.unsplash.com/photo-1587049352846-4a222e784d38?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=sugars-honey\",\n      productCount: \"6+ Products\"\n    },\n    {\n      id: 4,\n      name: \"Haircare Products\",\n      description: \"Natural hair care solutions and oils\",\n      image: \"https://images.unsplash.com/photo-1522335789203-aabd1fc54bc9?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=haircare-products\",\n      productCount: \"12+ Products\",\n      badge: \"Natural\"\n    },\n    {\n      id: 5,\n      name: \"Skincare Products\",\n      description: \"Herbal skincare and beauty products\",\n      image: \"https://images.unsplash.com/photo-1596755389378-c31d21fd1273?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=skincare-products\",\n      productCount: \"8+ Products\"\n    },\n    {\n      id: 6,\n      name: \"Millet Items\",\n      description: \"Nutritious millet-based food products\",\n      image: \"https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=millet-items\",\n      productCount: \"10+ Products\",\n      badge: \"Healthy\"\n    },\n    {\n      id: 7,\n      name: \"Powders\",\n      description: \"Freshly ground spice powders and mixes\",\n      image: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=powders\",\n      productCount: \"10+ Products\"\n    },\n    {\n      id: 8,\n      name: \"Fries\",\n      description: \"Traditional dried and fried delicacies\",\n      image: \"https://images.unsplash.com/photo-1599490659213-e2b9527bd087?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=fries\",\n      productCount: \"7+ Products\"\n    },\n    {\n      id: 9,\n      name: \"Herbal Handmade Soaps\",\n      description: \"Natural handcrafted soaps with herbs\",\n      image: \"https://images.unsplash.com/photo-1556228720-195a672e8a03?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=herbal-handmade-soaps\",\n      productCount: \"20+ Products\",\n      featured: true\n    },\n    {\n      id: 10,\n      name: \"Snacks\",\n      description: \"Healthy millet-based snacks and sweets\",\n      image: \"https://images.unsplash.com/photo-1606313564200-e75d5e30476c?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=snacks\",\n      productCount: \"25+ Products\",\n      badge: \"Popular\"\n    },\n    {\n      id: 11,\n      name: \"Herbal Products\",\n      description: \"Traditional herbal remedies and health products\",\n      image: \"https://images.unsplash.com/photo-1512290923902-8a9f81dc236c?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=herbal-products\",\n      productCount: \"30+ Products\"\n    },\n    {\n      id: 12,\n      name: \"Herbal Powders\",\n      description: \"Natural herbal powders for health and wellness\",\n      image: \"https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?w=400&h=300&fit=crop\",\n      link: \"/product-collection-grid?category=herbal-powders\",\n      productCount: \"25+ Products\"\n    }\n  ];\n\n  return (\n    <section className=\"py-16 lg:py-20 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        {/* Section Header */}\n        <div className=\"text-center mb-12\">\n          <h2 className=\"font-heading font-bold text-3xl lg:text-4xl text-foreground mb-4\">\n            Shop by Category\n          </h2>\n          <p className=\"font-body text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Explore our carefully curated collection of natural and handmade food products\n          </p>\n        </div>\n\n        {/* Category Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4 lg:gap-6\">\n          {categories?.map((category) => (\n            <Link\n              key={category?.id}\n              to={category?.link}\n              className=\"group relative bg-card border border-border rounded-xl overflow-hidden hover:shadow-warm-lg transition-all duration-300 hover:-translate-y-1\"\n            >\n              {/* Category Image */}\n              <div className=\"aspect-square overflow-hidden\">\n                <Image\n                  src={category?.image}\n                  alt={category?.name}\n                  className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-500\"\n                />\n              </div>\n\n              {/* Overlay */}\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n\n              {/* Content */}\n              <div className=\"absolute bottom-0 left-0 right-0 p-4 text-white transform translate-y-2 group-hover:translate-y-0 transition-transform duration-300\">\n                <h3 className=\"font-heading font-semibold text-sm lg:text-base mb-1\">\n                  {category?.name}\n                </h3>\n                <p className=\"font-caption text-xs opacity-90 hidden lg:block\">\n                  {category?.productCount}\n                </p>\n              </div>\n\n              {/* Badges */}\n              {category?.badge && (\n                <div className=\"absolute top-2 right-2\">\n                  <span className=\"bg-primary text-primary-foreground px-2 py-1 rounded-full text-xs font-caption font-medium\">\n                    {category?.badge}\n                  </span>\n                </div>\n              )}\n\n              {category?.seasonal && (\n                <div className=\"absolute top-2 left-2\">\n                  <span className=\"bg-accent text-accent-foreground px-2 py-1 rounded-full text-xs font-caption font-medium\">\n                    Seasonal\n                  </span>\n                </div>\n              )}\n\n              {category?.featured && (\n                <div className=\"absolute top-2 left-2\">\n                  <div className=\"bg-warning text-warning-foreground p-1 rounded-full\">\n                    <Icon name=\"Star\" size={12} />\n                  </div>\n                </div>\n              )}\n\n              {/* Hover Arrow */}\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                <div className=\"bg-white/20 backdrop-blur-sm rounded-full p-2\">\n                  <Icon name=\"ArrowRight\" size={20} color=\"white\" />\n                </div>\n              </div>\n            </Link>\n          ))}\n        </div>\n\n        {/* View All Categories */}\n        <div className=\"text-center mt-8\">\n          <Link to=\"/product-collection-grid\">\n            <button className=\"font-body font-medium text-primary hover:text-primary/80 transition-colors duration-200 inline-flex items-center space-x-2\">\n              <span>View All Products</span>\n              <Icon name=\"ArrowRight\" size={16} />\n            </button>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default CategoryTiles;","size_bytes":8077},"src/pages/homepage/components/Footer.jsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\n\nconst Footer = () => {\n  const currentYear = new Date()?.getFullYear();\n\n  const popularSearches = [\n    \"Organic Spices\", \"Handmade Sweets\", \"Traditional Pickles\", \"Pure Ghee\",\n    \"Coconut Oil\", \"Mango Pickle\", \"Mysore Pak\", \"Sambar Powder\",\n    \"Cashew Mix\", \"Natural Honey\", \"Sesame Oil\", \"Turmeric Powder\"\n  ];\n\n  const footerLinks = {\n    company: [\n      { label: \"About Us\", path: \"/about\" },\n      { label: \"Our Story\", path: \"/our-story\" },\n      { label: \"Blog\", path: \"/blog\" },\n      { label: \"Careers\", path: \"/careers\" }\n    ],\n    customer: [\n      { label: \"My Account\", path: \"/user-account-dashboard\" },\n      { label: \"Order History\", path: \"/user-account-dashboard?tab=orders\" },\n      { label: \"Track Order\", path: \"/track-order\" },\n      { label: \"Help & Support\", path: \"/support\" }\n    ],\n    policies: [\n      { label: \"Shipping Policy\", path: \"/shipping-policy\" },\n      { label: \"Return Policy\", path: \"/return-policy\" },\n      { label: \"Privacy Policy\", path: \"/privacy-policy\" },\n      { label: \"Terms of Service\", path: \"/terms-of-service\" }\n    ]\n  };\n\n  const socialLinks = [\n    { name: \"Facebook\", icon: \"Facebook\", url: \"https://facebook.com/neenusnatural\" },\n    { name: \"Instagram\", icon: \"Instagram\", url: \"https://instagram.com/neenusnatural\" },\n    { name: \"Twitter\", icon: \"Twitter\", url: \"https://twitter.com/neenusnatural\" },\n    { name: \"YouTube\", icon: \"Youtube\", url: \"https://youtube.com/neenusnatural\" }\n  ];\n\n  const contactInfo = {\n    phone: \"+91 80 4567 8901\",\n    whatsapp: \"+91 98765 43210\",\n    email: \"hello@neenusnatural.com\",\n    address: \"123 MG Road, Bengaluru, Karnataka 560001\"\n  };\n\n  return (\n    <footer className=\"bg-card border-t border-border\">\n      {/* Popular Searches Section */}\n      <div className=\"border-b border-border py-8\">\n        <div className=\"container mx-auto px-4\">\n          <h3 className=\"font-heading font-semibold text-lg text-foreground mb-4\">\n            Popular Searches\n          </h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {popularSearches?.map((search, index) => (\n              <Link\n                key={index}\n                to={`/product-collection-grid?search=${encodeURIComponent(search)}`}\n                className=\"bg-muted hover:bg-primary hover:text-primary-foreground px-3 py-1 rounded-full text-sm font-caption transition-colors duration-200\"\n              >\n                {search}\n              </Link>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Main Footer Content */}\n      <div className=\"py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8\">\n            {/* Brand Section */}\n            <div className=\"lg:col-span-2\">\n              <Link to=\"/homepage\" className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <Icon name=\"Leaf\" size={20} color=\"white\" />\n                </div>\n                <span className=\"font-heading font-bold text-xl text-foreground\">\n                  Neenu's Natural\n                </span>\n              </Link>\n              <p className=\"font-body text-muted-foreground mb-6 max-w-md\">\n                Bringing you the finest natural and handmade food products crafted with love and traditional recipes. Experience the authentic taste of India.\n              </p>\n              \n              {/* Contact Info */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <Icon name=\"Phone\" size={16} className=\"text-primary\" />\n                  <a \n                    href={`tel:${contactInfo?.phone}`}\n                    className=\"font-body text-sm text-foreground hover:text-primary transition-colors duration-200\"\n                  >\n                    {contactInfo?.phone}\n                  </a>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Icon name=\"MessageCircle\" size={16} className=\"text-success\" />\n                  <a \n                    href={`https://wa.me/${contactInfo?.whatsapp?.replace(/\\s/g, '')}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"font-body text-sm text-foreground hover:text-success transition-colors duration-200\"\n                  >\n                    WhatsApp: {contactInfo?.whatsapp}\n                  </a>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Icon name=\"Mail\" size={16} className=\"text-primary\" />\n                  <a \n                    href={`mailto:${contactInfo?.email}`}\n                    className=\"font-body text-sm text-foreground hover:text-primary transition-colors duration-200\"\n                  >\n                    {contactInfo?.email}\n                  </a>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <Icon name=\"MapPin\" size={16} className=\"text-primary mt-0.5\" />\n                  <span className=\"font-body text-sm text-muted-foreground\">\n                    {contactInfo?.address}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Company Links */}\n            <div>\n              <h4 className=\"font-heading font-semibold text-foreground mb-4\">\n                Company\n              </h4>\n              <ul className=\"space-y-3\">\n                {footerLinks?.company?.map((link, index) => (\n                  <li key={index}>\n                    <Link\n                      to={link?.path}\n                      className=\"font-body text-sm text-muted-foreground hover:text-primary transition-colors duration-200\"\n                    >\n                      {link?.label}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Customer Service */}\n            <div>\n              <h4 className=\"font-heading font-semibold text-foreground mb-4\">\n                Customer Service\n              </h4>\n              <ul className=\"space-y-3\">\n                {footerLinks?.customer?.map((link, index) => (\n                  <li key={index}>\n                    <Link\n                      to={link?.path}\n                      className=\"font-body text-sm text-muted-foreground hover:text-primary transition-colors duration-200\"\n                    >\n                      {link?.label}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Policies */}\n            <div>\n              <h4 className=\"font-heading font-semibold text-foreground mb-4\">\n                Policies\n              </h4>\n              <ul className=\"space-y-3\">\n                {footerLinks?.policies?.map((link, index) => (\n                  <li key={index}>\n                    <Link\n                      to={link?.path}\n                      className=\"font-body text-sm text-muted-foreground hover:text-primary transition-colors duration-200\"\n                    >\n                      {link?.label}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Bottom Footer */}\n      <div className=\"border-t border-border py-6\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between space-y-4 md:space-y-0\">\n            {/* Copyright */}\n            <p className=\"font-caption text-sm text-muted-foreground text-center md:text-left\">\n              ¬© {currentYear} Neenu's Natural. All rights reserved. Made with ‚ù§Ô∏è in India.\n            </p>\n\n            {/* Social Links */}\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"font-caption text-sm text-muted-foreground hidden md:block\">\n                Follow us:\n              </span>\n              {socialLinks?.map((social, index) => (\n                <a\n                  key={index}\n                  href={social?.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"w-8 h-8 bg-muted hover:bg-primary hover:text-primary-foreground rounded-full flex items-center justify-center transition-colors duration-200\"\n                  aria-label={`Follow us on ${social?.name}`}\n                >\n                  <Icon name={social?.icon} size={16} />\n                </a>\n              ))}\n            </div>\n\n            {/* Payment Methods */}\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-caption text-xs text-muted-foreground\">\n                We accept:\n              </span>\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-8 h-5 bg-muted rounded border flex items-center justify-center\">\n                  <span className=\"font-caption text-xs font-bold\">COD</span>\n                </div>\n                <div className=\"w-8 h-5 bg-muted rounded border flex items-center justify-center\">\n                  <Icon name=\"CreditCard\" size={12} />\n                </div>\n                <div className=\"w-8 h-5 bg-muted rounded border flex items-center justify-center\">\n                  <Icon name=\"Smartphone\" size={12} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":9787},"src/pages/homepage/components/HeroSection.jsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\n\nconst HeroSection = () => {\n  const heroData = {\n    title: \"Pure. Natural. Handmade.\",\n    subtitle: \"Discover authentic Indian flavors crafted with love and traditional recipes\",\n    description: \"From handpicked spices to artisanal sweets, experience the taste of home with our premium natural food products.\",\n    ctaText: \"Shop Now\",\n    ctaLink: \"/product-collection-grid\",\n    backgroundImage: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=1200&h=600&fit=crop\",\n    badge: \"Free Shipping on Orders ‚Çπ499+\"\n  };\n\n  return (\n    <section className=\"relative bg-gradient-to-br from-primary/5 to-accent/5 overflow-hidden\">\n      <div className=\"absolute inset-0 bg-black/20\"></div>\n      <div className=\"relative container mx-auto px-4 py-16 lg:py-24\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12 items-center\">\n          {/* Content */}\n          <div className=\"text-center lg:text-left space-y-6\">\n            <div className=\"inline-flex items-center px-4 py-2 bg-primary/10 border border-primary/20 rounded-full\">\n              <span className=\"font-caption text-sm font-medium text-primary\">\n                {heroData?.badge}\n              </span>\n            </div>\n            \n            <h1 className=\"font-heading font-bold text-4xl lg:text-5xl xl:text-6xl text-foreground leading-tight\">\n              {heroData?.title}\n            </h1>\n            \n            <p className=\"font-body text-xl lg:text-2xl text-muted-foreground font-medium\">\n              {heroData?.subtitle}\n            </p>\n            \n            <p className=\"font-body text-base lg:text-lg text-muted-foreground max-w-lg mx-auto lg:mx-0\">\n              {heroData?.description}\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center lg:justify-start\">\n              <Link to={heroData?.ctaLink}>\n                <Button \n                  variant=\"default\" \n                  size=\"lg\"\n                  iconName=\"ArrowRight\"\n                  iconPosition=\"right\"\n                  className=\"w-full sm:w-auto\"\n                >\n                  {heroData?.ctaText}\n                </Button>\n              </Link>\n              <Link to=\"/product-collection-grid?filter=bestsellers\">\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\"\n                  className=\"w-full sm:w-auto\"\n                >\n                  View Bestsellers\n                </Button>\n              </Link>\n            </div>\n          </div>\n          \n          {/* Hero Image */}\n          <div className=\"relative\">\n            <div className=\"aspect-square lg:aspect-[4/3] rounded-2xl overflow-hidden shadow-warm-xl\">\n              <Image\n                src={heroData?.backgroundImage}\n                alt=\"Natural food products showcase\"\n                className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-700\"\n              />\n            </div>\n            \n            {/* Floating Cards */}\n            <div className=\"absolute -top-4 -right-4 bg-card border border-border rounded-lg p-4 shadow-warm-lg hidden lg:block\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-success rounded-full\"></div>\n                <span className=\"font-caption text-sm font-medium text-foreground\">\n                  100% Natural\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"absolute -bottom-4 -left-4 bg-card border border-border rounded-lg p-4 shadow-warm-lg hidden lg:block\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-primary rounded-full\"></div>\n                <span className=\"font-caption text-sm font-medium text-foreground\">\n                  Handmade\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default HeroSection;","size_bytes":4197},"src/pages/homepage/components/NewsletterSection.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nconst NewsletterSection = () => {\n  const [email, setEmail] = useState('');\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e?.preventDefault();\n    if (!email?.trim()) return;\n\n    setIsLoading(true);\n    \n    // Simulate API call\n    setTimeout(() => {\n      setIsSubscribed(true);\n      setIsLoading(false);\n      setEmail('');\n    }, 1500);\n  };\n\n  const benefits = [\n    {\n      icon: \"Gift\",\n      title: \"Exclusive Offers\",\n      description: \"Get 10% off on your first order\"\n    },\n    {\n      icon: \"Bell\",\n      title: \"Early Access\",\n      description: \"Be first to know about new products\"\n    },\n    {\n      icon: \"Truck\",\n      title: \"Free Shipping\",\n      description: \"Special shipping deals for subscribers\"\n    }\n  ];\n\n  if (isSubscribed) {\n    return (\n      <section className=\"py-16 lg:py-20 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <div className=\"w-16 h-16 bg-success rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Icon name=\"Check\" size={32} color=\"white\" />\n            </div>\n            <h2 className=\"font-heading font-bold text-3xl text-foreground mb-4\">\n              Welcome to the Family!\n            </h2>\n            <p className=\"font-body text-lg text-muted-foreground mb-6\">\n              Thank you for subscribing! Check your email for a special welcome offer.\n            </p>\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsSubscribed(false)}\n            >\n              Subscribe Another Email\n            </Button>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 lg:py-20 bg-gradient-to-br from-primary/5 to-accent/5\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12 items-center\">\n            {/* Content */}\n            <div className=\"text-center lg:text-left\">\n              <h2 className=\"font-heading font-bold text-3xl lg:text-4xl text-foreground mb-4\">\n                Join Our Natural Family\n              </h2>\n              <p className=\"font-body text-lg text-muted-foreground mb-6\">\n                Subscribe to our newsletter and get exclusive access to new products, special offers, and traditional recipes straight to your inbox.\n              </p>\n\n              {/* Benefits */}\n              <div className=\"space-y-4 mb-8\">\n                {benefits?.map((benefit, index) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Icon name={benefit?.icon} size={20} className=\"text-primary\" />\n                    </div>\n                    <div className=\"text-left\">\n                      <h4 className=\"font-body font-semibold text-foreground\">\n                        {benefit?.title}\n                      </h4>\n                      <p className=\"font-caption text-sm text-muted-foreground\">\n                        {benefit?.description}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Newsletter Form */}\n            <div className=\"bg-card border border-border rounded-2xl p-6 lg:p-8 shadow-warm-lg\">\n              <div className=\"text-center mb-6\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Icon name=\"Mail\" size={24} className=\"text-primary\" />\n                </div>\n                <h3 className=\"font-heading font-semibold text-xl text-foreground mb-2\">\n                  Get 10% Off Your First Order\n                </h3>\n                <p className=\"font-body text-muted-foreground\">\n                  Plus exclusive recipes and health tips\n                </p>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <Input\n                  type=\"email\"\n                  label=\"Email Address\"\n                  placeholder=\"Enter your email address\"\n                  value={email}\n                  onChange={(e) => setEmail(e?.target?.value)}\n                  required\n                  className=\"mb-4\"\n                />\n                \n                <Button\n                  type=\"submit\"\n                  variant=\"default\"\n                  fullWidth\n                  loading={isLoading}\n                  iconName=\"ArrowRight\"\n                  iconPosition=\"right\"\n                  disabled={!email?.trim()}\n                >\n                  {isLoading ? 'Subscribing...' : 'Subscribe & Save 10%'}\n                </Button>\n              </form>\n\n              <p className=\"font-caption text-xs text-muted-foreground text-center mt-4\">\n                By subscribing, you agree to our Privacy Policy. Unsubscribe anytime.\n              </p>\n\n              {/* Trust Indicators */}\n              <div className=\"flex items-center justify-center space-x-4 mt-6 pt-6 border-t border-border\">\n                <div className=\"flex items-center space-x-1\">\n                  <Icon name=\"Shield\" size={16} className=\"text-success\" />\n                  <span className=\"font-caption text-xs text-muted-foreground\">\n                    Secure\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Icon name=\"Users\" size={16} className=\"text-primary\" />\n                  <span className=\"font-caption text-xs text-muted-foreground\">\n                    5000+ Subscribers\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Icon name=\"X\" size={16} className=\"text-muted-foreground\" />\n                  <span className=\"font-caption text-xs text-muted-foreground\">\n                    No Spam\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default NewsletterSection;","size_bytes":6612},"src/pages/product-collection-grid/components/FilterChips.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst FilterChips = ({ activeFilters, onRemoveFilter, onClearAll }) => {\n  const getFilterLabel = (type, value) => {\n    const labels = {\n      priceRange: {\n        'under-200': 'Under ‚Çπ200',\n        '200-500': '‚Çπ200 - ‚Çπ500',\n        '500-1000': '‚Çπ500 - ‚Çπ1000',\n        'above-1000': 'Above ‚Çπ1000'\n      },\n      dietary: {\n        'vegan': 'Vegan',\n        'gluten-free': 'Gluten Free',\n        'no-preservatives': 'No Preservatives',\n        'organic': 'Organic',\n        'handmade': 'Handmade',\n        'no-palm-oil': 'No Palm Oil'\n      },\n      categories: {\n        'sweets': 'Sweets',\n        'savouries': 'Savouries',\n        'pickles': 'Pickles',\n        'combos': 'Combos',\n        'summer-coolers': 'Summer Coolers',\n        'kitchen-essentials': 'Kitchen Essentials'\n      },\n      brands: {\n        'neenus-natural': \"Neenu\\'s Natural\",\n        'traditional-tastes': 'Traditional Tastes',\n        'organic-origins': 'Organic Origins',\n        'homemade-heritage': 'Homemade Heritage'\n      }\n    };\n\n    return labels?.[type]?.[value] || value;\n  };\n\n  const getAllActiveFilters = () => {\n    const filters = [];\n    \n    activeFilters?.priceRange?.forEach(value => {\n      filters?.push({ type: 'priceRange', value, label: getFilterLabel('priceRange', value) });\n    });\n    \n    activeFilters?.dietary?.forEach(value => {\n      filters?.push({ type: 'dietary', value, label: getFilterLabel('dietary', value) });\n    });\n    \n    activeFilters?.categories?.forEach(value => {\n      filters?.push({ type: 'categories', value, label: getFilterLabel('categories', value) });\n    });\n    \n    activeFilters?.brands?.forEach(value => {\n      filters?.push({ type: 'brands', value, label: getFilterLabel('brands', value) });\n    });\n    \n    return filters;\n  };\n\n  const allFilters = getAllActiveFilters();\n\n  if (allFilters?.length === 0) return null;\n\n  return (\n    <div className=\"bg-muted/50 rounded-lg p-4 space-y-3\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"font-body font-semibold text-foreground\">\n          Active Filters ({allFilters?.length})\n        </h3>\n        <button\n          onClick={onClearAll}\n          className=\"font-caption text-sm text-primary hover:text-primary/80 transition-colors duration-200\"\n        >\n          Clear All\n        </button>\n      </div>\n      <div className=\"flex flex-wrap gap-2\">\n        {allFilters?.map((filter, index) => (\n          <div\n            key={`${filter?.type}-${filter?.value}-${index}`}\n            className=\"flex items-center gap-2 bg-primary/10 text-primary border border-primary/20 rounded-full px-3 py-1 text-sm font-caption\"\n          >\n            <span>{filter?.label}</span>\n            <button\n              onClick={() => onRemoveFilter(filter?.type, filter?.value)}\n              className=\"hover:bg-primary/20 rounded-full p-0.5 transition-colors duration-200\"\n              aria-label={`Remove ${filter?.label} filter`}\n            >\n              <Icon name=\"X\" size={12} />\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default FilterChips;","size_bytes":3206},"src/pages/product-collection-grid/components/FilterSidebar.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst FilterSidebar = ({ \n  isOpen, \n  onClose, \n  filters, \n  onFilterChange, \n  onClearFilters,\n  isMobile = false \n}) => {\n  const [expandedSections, setExpandedSections] = useState({\n    price: true,\n    dietary: true,\n    category: true,\n    brand: true\n  });\n\n  const toggleSection = (section) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev?.[section]\n    }));\n  };\n\n  const priceRanges = [\n    { id: 'under-200', label: 'Under ‚Çπ200', min: 0, max: 200 },\n    { id: '200-500', label: '‚Çπ200 - ‚Çπ500', min: 200, max: 500 },\n    { id: '500-1000', label: '‚Çπ500 - ‚Çπ1000', min: 500, max: 1000 },\n    { id: 'above-1000', label: 'Above ‚Çπ1000', min: 1000, max: 99999 }\n  ];\n\n  const dietaryOptions = [\n    { id: 'vegan', label: 'Vegan', count: 45 },\n    { id: 'gluten-free', label: 'Gluten Free', count: 32 },\n    { id: 'no-preservatives', label: 'No Preservatives', count: 78 },\n    { id: 'organic', label: 'Organic', count: 56 },\n    { id: 'handmade', label: 'Handmade', count: 89 },\n    { id: 'no-palm-oil', label: 'No Palm Oil', count: 67 }\n  ];\n\n  const categories = [\n    { id: 'unpolished-pulses-dals-rice', label: 'Unpolished Pulses, Dals & Rice', count: 15 },\n    { id: 'poha-aval', label: 'Poha / Aval', count: 3 },\n    { id: 'sugars-honey', label: 'Sugars & Honey', count: 6 },\n    { id: 'haircare-products', label: 'Haircare Products', count: 12 },\n    { id: 'skincare-products', label: 'Skincare Products', count: 8 },\n    { id: 'millet-items', label: 'Millet Items', count: 10 },\n    { id: 'powders', label: 'Powders', count: 10 },\n    { id: 'fries', label: 'Fries', count: 7 },\n    { id: 'herbal-handmade-soaps', label: 'Herbal Handmade Soaps', count: 20 },\n    { id: 'snacks', label: 'Snacks', count: 25 },\n    { id: 'herbal-products', label: 'Herbal Products', count: 30 },\n    { id: 'herbal-powders', label: 'Herbal Powders', count: 25 }\n  ];\n\n  const brands = [\n    { id: 'neenus-natural', label: \"Neenu\\'s Natural\", count: 156 },\n    { id: 'traditional-tastes', label: 'Traditional Tastes', count: 45 },\n    { id: 'organic-origins', label: 'Organic Origins', count: 32 },\n    { id: 'homemade-heritage', label: 'Homemade Heritage', count: 28 }\n  ];\n\n  const FilterSection = ({ title, sectionKey, children }) => (\n    <div className=\"border-b border-border pb-4 mb-4\">\n      <button\n        onClick={() => toggleSection(sectionKey)}\n        className=\"flex items-center justify-between w-full py-2 font-heading font-semibold text-foreground hover:text-primary transition-colors duration-200\"\n      >\n        <span>{title}</span>\n        <Icon \n          name={expandedSections?.[sectionKey] ? \"ChevronUp\" : \"ChevronDown\"} \n          size={16} \n        />\n      </button>\n      {expandedSections?.[sectionKey] && (\n        <div className=\"mt-3 space-y-3\">\n          {children}\n        </div>\n      )}\n    </div>\n  );\n\n  const sidebarContent = (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"font-heading font-semibold text-lg text-foreground\">\n          Filters\n        </h2>\n        {isMobile && (\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-muted rounded-full transition-colors duration-200\"\n          >\n            <Icon name=\"X\" size={20} />\n          </button>\n        )}\n      </div>\n\n      {/* Active Filters Count */}\n      {(filters?.priceRange?.length > 0 || filters?.dietary?.length > 0 || filters?.categories?.length > 0 || filters?.brands?.length > 0) && (\n        <div className=\"bg-primary/10 border border-primary/20 rounded-lg p-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"font-body text-sm text-primary font-medium\">\n              {filters?.priceRange?.length + filters?.dietary?.length + filters?.categories?.length + filters?.brands?.length} filters applied\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClearFilters}\n              className=\"text-primary hover:text-primary/80\"\n            >\n              Clear All\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Price Range */}\n      <FilterSection title=\"Price Range\" sectionKey=\"price\">\n        {priceRanges?.map((range) => (\n          <Checkbox\n            key={range?.id}\n            label={range?.label}\n            checked={filters?.priceRange?.includes(range?.id)}\n            onChange={(e) => {\n              const newPriceRange = e?.target?.checked\n                ? [...filters?.priceRange, range?.id]\n                : filters?.priceRange?.filter(id => id !== range?.id);\n              onFilterChange('priceRange', newPriceRange);\n            }}\n          />\n        ))}\n      </FilterSection>\n\n      {/* Dietary Preferences */}\n      <FilterSection title=\"Dietary & Features\" sectionKey=\"dietary\">\n        {dietaryOptions?.map((option) => (\n          <div key={option?.id} className=\"flex items-center justify-between\">\n            <Checkbox\n              label={option?.label}\n              checked={filters?.dietary?.includes(option?.id)}\n              onChange={(e) => {\n                const newDietary = e?.target?.checked\n                  ? [...filters?.dietary, option?.id]\n                  : filters?.dietary?.filter(id => id !== option?.id);\n                onFilterChange('dietary', newDietary);\n              }}\n            />\n            <span className=\"font-caption text-xs text-muted-foreground\">\n              ({option?.count})\n            </span>\n          </div>\n        ))}\n      </FilterSection>\n\n      {/* Categories */}\n      <FilterSection title=\"Categories\" sectionKey=\"category\">\n        {categories?.map((category) => (\n          <div key={category?.id} className=\"flex items-center justify-between\">\n            <Checkbox\n              label={category?.label}\n              checked={filters?.categories?.includes(category?.id)}\n              onChange={(e) => {\n                const newCategories = e?.target?.checked\n                  ? [...filters?.categories, category?.id]\n                  : filters?.categories?.filter(id => id !== category?.id);\n                onFilterChange('categories', newCategories);\n              }}\n            />\n            <span className=\"font-caption text-xs text-muted-foreground\">\n              ({category?.count})\n            </span>\n          </div>\n        ))}\n      </FilterSection>\n\n      {/* Brands */}\n      <FilterSection title=\"Brands\" sectionKey=\"brand\">\n        {brands?.map((brand) => (\n          <div key={brand?.id} className=\"flex items-center justify-between\">\n            <Checkbox\n              label={brand?.label}\n              checked={filters?.brands?.includes(brand?.id)}\n              onChange={(e) => {\n                const newBrands = e?.target?.checked\n                  ? [...filters?.brands, brand?.id]\n                  : filters?.brands?.filter(id => id !== brand?.id);\n                onFilterChange('brands', newBrands);\n              }}\n            />\n            <span className=\"font-caption text-xs text-muted-foreground\">\n              ({brand?.count})\n            </span>\n          </div>\n        ))}\n      </FilterSection>\n    </div>\n  );\n\n  if (isMobile) {\n    return (\n      <>\n        {isOpen && (\n          <div className=\"fixed inset-0 bg-black/50 z-[1002]\" onClick={onClose} />\n        )}\n        <div className={`fixed top-0 right-0 h-full w-full max-w-sm bg-card shadow-warm-xl z-[1003] transform transition-transform duration-300 ${\n          isOpen ? 'translate-x-0' : 'translate-x-full'\n        }`}>\n          <div className=\"h-full overflow-y-auto p-6\">\n            {sidebarContent}\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"w-full bg-card rounded-lg border border-border p-6 sticky top-24 max-h-[calc(100vh-8rem)] overflow-y-auto\">\n      {sidebarContent}\n    </div>\n  );\n};\n\nexport default FilterSidebar;","size_bytes":8189},"src/pages/product-collection-grid/components/ProductCard.jsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\n\nconst ProductCard = ({ \n  product, \n  onQuickView, \n  onAddToCart, \n  onAddToWishlist, \n  isInWishlist = false \n}) => {\n  const [isImageLoading, setIsImageLoading] = useState(true);\n  const [selectedVariant, setSelectedVariant] = useState(product?.variants?.[0] || null);\n\n  const calculateSavings = (originalPrice, salePrice) => {\n    if (!originalPrice || !salePrice || originalPrice <= salePrice) return 0;\n    return Math.round(((originalPrice - salePrice) / originalPrice) * 100);\n  };\n\n  const renderStars = (rating) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n\n    for (let i = 0; i < fullStars; i++) {\n      stars?.push(\n        <Icon key={i} name=\"Star\" size={12} className=\"text-warning fill-current\" />\n      );\n    }\n\n    if (hasHalfStar) {\n      stars?.push(\n        <Icon key=\"half\" name=\"StarHalf\" size={12} className=\"text-warning fill-current\" />\n      );\n    }\n\n    const emptyStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < emptyStars; i++) {\n      stars?.push(\n        <Icon key={`empty-${i}`} name=\"Star\" size={12} className=\"text-muted-foreground\" />\n      );\n    }\n\n    return stars;\n  };\n\n  const currentPrice = selectedVariant?.salePrice || product?.salePrice || product?.price;\n  const originalPrice = selectedVariant?.originalPrice || product?.originalPrice;\n  const savings = calculateSavings(originalPrice, currentPrice);\n\n  // Handle Add to Cart for products with variants\n  const handleAddToCart = (e) => {\n    e.stopPropagation();\n    const cartItem = {\n      id: `${product.id}-default`,\n      productId: product.id,\n      name: product.name,\n      price: product.salePrice || product.price,\n      originalPrice: product.originalPrice || product.price,\n      image: product.image,\n      variant: 'Default',\n      category: product.category,\n      brand: product.brand\n    };\n    onAddToCart(cartItem, 1); // Assuming addToCart is passed as a prop\n    console.log('Added to cart:', cartItem);\n  };\n\n  // Handle Add to Cart for products with variants\n  const handleAddToCartWithVariant = (e) => {\n    e.stopPropagation();\n    if (!selectedVariant) return; // Ensure a variant is selected\n\n    const cartItem = {\n      id: `${product.id}-${selectedVariant.id}`, // Unique ID for each variant\n      productId: product.id,\n      name: product.name,\n      price: selectedVariant.salePrice || selectedVariant.price,\n      originalPrice: selectedVariant.originalPrice || selectedVariant.price,\n      image: product.image, // Consider if variants have different images\n      variant: selectedVariant.weight, // Displaying weight as variant\n      category: product.category,\n      brand: product.brand\n    };\n    onAddToCart(cartItem, 1); // Assuming addToCart is passed as a prop\n    console.log('Added to cart:', cartItem);\n  };\n\n\n  return (\n    <div className=\"group bg-card rounded-lg border border-border hover:shadow-warm-md transition-all duration-300 overflow-hidden\">\n      {/* Product Image */}\n      <div className=\"relative aspect-square overflow-hidden bg-muted\">\n        <Link to={`/product-detail-page?id=${product?.id}`}>\n          <Image\n            src={product?.image}\n            alt={product?.name}\n            className={`w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 ${\n              isImageLoading ? 'opacity-0' : 'opacity-100'\n            }`}\n            onLoad={() => setIsImageLoading(false)}\n          />\n        </Link>\n\n        {/* Loading Skeleton */}\n        {isImageLoading && (\n          <div className=\"absolute inset-0 bg-muted animate-pulse\" />\n        )}\n\n        {/* Badges */}\n        <div className=\"absolute top-2 left-2 flex flex-col gap-1\">\n          {product?.badges?.map((badge, index) => (\n            <span\n              key={index}\n              className=\"bg-primary text-primary-foreground text-xs font-caption font-medium px-2 py-1 rounded-full\"\n            >\n              {badge}\n            </span>\n          ))}\n          {savings > 0 && (\n            <span className=\"bg-success text-success-foreground text-xs font-caption font-bold px-2 py-1 rounded-full\">\n              {savings}% OFF\n            </span>\n          )}\n        </div>\n\n        {/* Wishlist Button */}\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            onAddToWishlist(product?.id);\n          }}\n          className=\"absolute top-2 right-2 p-2 bg-card/80 backdrop-blur-sm rounded-full hover:bg-card transition-colors duration-200 opacity-0 group-hover:opacity-100\"\n        >\n          <Icon \n            name=\"Heart\" \n            size={16} \n            className={isInWishlist ? 'text-destructive fill-current' : 'text-muted-foreground'} \n          />\n        </button>\n\n        {/* Quick View Button */}\n        <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center\">\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => onQuickView(product)}\n            className=\"transform translate-y-2 group-hover:translate-y-0 transition-transform duration-300\"\n          >\n            Quick View\n          </Button>\n        </div>\n      </div>\n      {/* Product Info */}\n      <div className=\"p-4 space-y-3\">\n        {/* Product Name */}\n        <Link to={`/product-detail-page?id=${product?.id}`}>\n          <h3 className=\"font-body font-medium text-foreground hover:text-primary transition-colors duration-200 line-clamp-2\">\n            {product?.name}\n          </h3>\n        </Link>\n\n        {/* Rating */}\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex items-center gap-1\">\n            {renderStars(product?.rating)}\n          </div>\n          <span className=\"font-caption text-xs text-muted-foreground\">\n            ({product?.reviewCount})\n          </span>\n        </div>\n\n        {/* Variant Selection */}\n        {product?.variants && product?.variants?.length > 1 && (\n          <div className=\"space-y-2\">\n            <span className=\"font-caption text-xs text-muted-foreground\">Weight:</span>\n            <div className=\"flex flex-wrap gap-1\">\n              {product?.variants?.map((variant, index) => (\n                <button\n                  key={index}\n                  onClick={() => setSelectedVariant(variant)}\n                  className={`px-2 py-1 text-xs font-caption rounded border transition-colors duration-200 ${\n                    selectedVariant?.weight === variant?.weight\n                      ? 'border-primary bg-primary text-primary-foreground'\n                      : 'border-border bg-background text-foreground hover:border-primary'\n                  }`}\n                >\n                  {variant?.weight}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Price */}\n        <div className=\"space-y-1\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"font-data font-bold text-lg text-foreground\">\n              ‚Çπ{(selectedVariant?.salePrice || product?.salePrice || product?.price)?.toFixed(2) || '0.00'}\n            </span>\n            {originalPrice && originalPrice > currentPrice && (\n              <>\n                <span className=\"font-data text-sm text-muted-foreground line-through\">\n                  ‚Çπ{originalPrice?.toFixed(2)}\n                </span>\n                <span className=\"font-caption text-xs font-medium text-success bg-success/10 px-2 py-1 rounded\">\n                  {Math.round(((originalPrice - currentPrice) / originalPrice) * 100)}% OFF\n                </span>\n              </>\n            )}\n          </div>\n          {savings > 0 && (\n            <p className=\"font-caption text-xs text-success\">\n              You save ‚Çπ{(originalPrice - currentPrice)?.toFixed(2)}\n            </p>\n          )}\n        </div>\n\n        {/* Add to Cart Button */}\n        <Button\n          variant=\"default\"\n          fullWidth\n          onClick={selectedVariant ? handleAddToCartWithVariant : handleAddToCart}\n          iconName=\"ShoppingCart\"\n          iconPosition=\"left\"\n          iconSize={16}\n        >\n          Add to Cart\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductCard;","size_bytes":8556},"src/pages/product-collection-grid/components/ProductGrid.jsx":{"content":"import React from 'react';\nimport ProductCard from './ProductCard';\n\nconst ProductGrid = ({ \n  products, \n  loading, \n  onQuickView, \n  onAddToCart, \n  onAddToWishlist, \n  wishlistItems = [] \n}) => {\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 md:gap-6\">\n        {Array.from({ length: 20 })?.map((_, index) => (\n          <div key={index} className=\"bg-card rounded-lg border border-border overflow-hidden\">\n            <div className=\"aspect-square bg-muted animate-pulse\" />\n            <div className=\"p-4 space-y-3\">\n              <div className=\"h-4 bg-muted animate-pulse rounded\" />\n              <div className=\"h-3 bg-muted animate-pulse rounded w-3/4\" />\n              <div className=\"h-6 bg-muted animate-pulse rounded w-1/2\" />\n              <div className=\"h-10 bg-muted animate-pulse rounded\" />\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (products?.length === 0) {\n    return (\n      <div className=\"text-center py-16\">\n        <div className=\"max-w-md mx-auto space-y-4\">\n          <div className=\"w-24 h-24 mx-auto bg-muted rounded-full flex items-center justify-center\">\n            <svg\n              className=\"w-12 h-12 text-muted-foreground\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={1.5}\n                d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-5.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H1\"\n              />\n            </svg>\n          </div>\n          <h3 className=\"font-heading font-semibold text-xl text-foreground\">\n            No products found\n          </h3>\n          <p className=\"font-body text-muted-foreground\">\n            Try adjusting your filters or search terms to find what you're looking for.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 md:gap-6\">\n      {products?.map((product) => (\n        <ProductCard\n          key={product?.id}\n          product={product}\n          onQuickView={onQuickView}\n          onAddToCart={onAddToCart}\n          onAddToWishlist={onAddToWishlist}\n          isInWishlist={wishlistItems?.includes(product?.id)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ProductGrid;","size_bytes":2579},"src/pages/product-collection-grid/components/QuickViewModal.jsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\n\nconst QuickViewModal = ({ product, isOpen, onClose, onAddToCart }) => {\n  const [selectedVariant, setSelectedVariant] = useState(product?.variants?.[0] || null);\n  const [quantity, setQuantity] = useState(1);\n  const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n\n  if (!isOpen || !product) return null;\n\n  const calculateSavings = (originalPrice, salePrice) => {\n    if (!originalPrice || !salePrice || originalPrice <= salePrice) return 0;\n    return Math.round(((originalPrice - salePrice) / originalPrice) * 100);\n  };\n\n  const renderStars = (rating) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n\n    for (let i = 0; i < fullStars; i++) {\n      stars?.push(\n        <Icon key={i} name=\"Star\" size={16} className=\"text-warning fill-current\" />\n      );\n    }\n\n    if (hasHalfStar) {\n      stars?.push(\n        <Icon key=\"half\" name=\"StarHalf\" size={16} className=\"text-warning fill-current\" />\n      );\n    }\n\n    const emptyStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < emptyStars; i++) {\n      stars?.push(\n        <Icon key={`empty-${i}`} name=\"Star\" size={16} className=\"text-muted-foreground\" />\n      );\n    }\n\n    return stars;\n  };\n\n  const currentPrice = selectedVariant?.salePrice || product?.salePrice;\n  const originalPrice = selectedVariant?.originalPrice || product?.originalPrice;\n  const savings = calculateSavings(originalPrice, currentPrice);\n\n  const productImages = product?.gallery || [product?.image];\n\n  const handleAddToCart = () => {\n    onAddToCart(product, selectedVariant, quantity);\n    onClose();\n  };\n\n  return (\n    <>\n      {/* Overlay */}\n      <div \n        className=\"fixed inset-0 bg-black/50 z-[1004]\"\n        onClick={onClose}\n      />\n      {/* Modal */}\n      <div className=\"fixed inset-4 md:inset-8 lg:inset-16 bg-card rounded-lg shadow-warm-xl z-[1004] overflow-hidden\">\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            <h2 className=\"font-heading font-semibold text-lg text-foreground\">\n              Quick View\n            </h2>\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-muted rounded-full transition-colors duration-200\"\n            >\n              <Icon name=\"X\" size={20} />\n            </button>\n          </div>\n\n          {/* Content */}\n          <div className=\"flex-1 overflow-y-auto\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 p-6\">\n              {/* Product Images */}\n              <div className=\"space-y-4\">\n                <div className=\"aspect-square rounded-lg overflow-hidden bg-muted\">\n                  <Image\n                    src={productImages?.[selectedImageIndex]}\n                    alt={product?.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n                \n                {productImages?.length > 1 && (\n                  <div className=\"flex gap-2 overflow-x-auto\">\n                    {productImages?.map((image, index) => (\n                      <button\n                        key={index}\n                        onClick={() => setSelectedImageIndex(index)}\n                        className={`flex-shrink-0 w-16 h-16 rounded-lg overflow-hidden border-2 transition-colors duration-200 ${\n                          selectedImageIndex === index\n                            ? 'border-primary' :'border-border hover:border-primary/50'\n                        }`}\n                      >\n                        <Image\n                          src={image}\n                          alt={`${product?.name} ${index + 1}`}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Product Details */}\n              <div className=\"space-y-6\">\n                {/* Product Name & Rating */}\n                <div className=\"space-y-3\">\n                  <h1 className=\"font-heading font-bold text-2xl text-foreground\">\n                    {product?.name}\n                  </h1>\n                  \n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex items-center gap-1\">\n                      {renderStars(product?.rating)}\n                    </div>\n                    <span className=\"font-caption text-sm text-muted-foreground\">\n                      ({product?.reviewCount} reviews)\n                    </span>\n                  </div>\n                </div>\n\n                {/* Badges */}\n                {product?.badges && product?.badges?.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2\">\n                    {product?.badges?.map((badge, index) => (\n                      <span\n                        key={index}\n                        className=\"bg-primary/10 text-primary text-sm font-caption font-medium px-3 py-1 rounded-full border border-primary/20\"\n                      >\n                        {badge}\n                      </span>\n                    ))}\n                  </div>\n                )}\n\n                {/* Price */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"font-data font-bold text-3xl text-foreground\">\n                      ‚Çπ{currentPrice}\n                    </span>\n                    {originalPrice && originalPrice > currentPrice && (\n                      <span className=\"font-data text-xl text-muted-foreground line-through\">\n                        ‚Çπ{originalPrice}\n                      </span>\n                    )}\n                    {savings > 0 && (\n                      <span className=\"bg-success text-success-foreground text-sm font-caption font-bold px-2 py-1 rounded-full\">\n                        {savings}% OFF\n                      </span>\n                    )}\n                  </div>\n                  {savings > 0 && (\n                    <p className=\"font-caption text-success\">\n                      You save ‚Çπ{originalPrice - currentPrice}\n                    </p>\n                  )}\n                </div>\n\n                {/* Variant Selection */}\n                {product?.variants && product?.variants?.length > 1 && (\n                  <div className=\"space-y-3\">\n                    <h3 className=\"font-body font-semibold text-foreground\">\n                      Weight Options:\n                    </h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {product?.variants?.map((variant, index) => (\n                        <button\n                          key={index}\n                          onClick={() => setSelectedVariant(variant)}\n                          className={`px-4 py-2 font-caption rounded-lg border transition-colors duration-200 ${\n                            selectedVariant?.weight === variant?.weight\n                              ? 'border-primary bg-primary text-primary-foreground'\n                              : 'border-border bg-background text-foreground hover:border-primary'\n                          }`}\n                        >\n                          {variant?.weight}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Quantity Selector */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"font-body font-semibold text-foreground\">\n                    Quantity:\n                  </h3>\n                  <div className=\"flex items-center gap-3\">\n                    <button\n                      onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                      className=\"w-10 h-10 rounded-lg border border-border flex items-center justify-center hover:bg-muted transition-colors duration-200\"\n                    >\n                      <Icon name=\"Minus\" size={16} />\n                    </button>\n                    <span className=\"font-data font-semibold text-lg w-12 text-center\">\n                      {quantity}\n                    </span>\n                    <button\n                      onClick={() => setQuantity(quantity + 1)}\n                      className=\"w-10 h-10 rounded-lg border border-border flex items-center justify-center hover:bg-muted transition-colors duration-200\"\n                    >\n                      <Icon name=\"Plus\" size={16} />\n                    </button>\n                  </div>\n                </div>\n\n                {/* Description */}\n                {product?.shortDescription && (\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-body font-semibold text-foreground\">\n                      Description:\n                    </h3>\n                    <p className=\"font-body text-muted-foreground leading-relaxed\">\n                      {product?.shortDescription}\n                    </p>\n                  </div>\n                )}\n\n                {/* Action Buttons */}\n                <div className=\"space-y-3\">\n                  <Button\n                    variant=\"default\"\n                    fullWidth\n                    onClick={handleAddToCart}\n                    iconName=\"ShoppingCart\"\n                    iconPosition=\"left\"\n                  >\n                    Add to Cart - ‚Çπ{(currentPrice * quantity)?.toFixed(2)}\n                  </Button>\n                  \n                  <Link to={`/product-detail-page?id=${product?.id}`}>\n                    <Button variant=\"outline\" fullWidth onClick={onClose}>\n                      View Full Details\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default QuickViewModal;","size_bytes":10273},"src/pages/product-collection-grid/components/SortDropdown.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst SortDropdown = ({ currentSort, onSortChange }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const sortOptions = [\n    { value: 'best-selling', label: 'Best Selling' },\n    { value: 'price-low-high', label: 'Price: Low to High' },\n    { value: 'price-high-low', label: 'Price: High to Low' },\n    { value: 'newest', label: 'Newest First' },\n    { value: 'oldest', label: 'Oldest First' },\n    { value: 'name-a-z', label: 'Name: A to Z' },\n    { value: 'name-z-a', label: 'Name: Z to A' },\n    { value: 'rating-high-low', label: 'Highest Rated' }\n  ];\n\n  const currentSortLabel = sortOptions?.find(option => option?.value === currentSort)?.label || 'Best Selling';\n\n  const handleSortSelect = (sortValue) => {\n    onSortChange(sortValue);\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"relative\">\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center gap-2 px-4 py-2 bg-card border border-border rounded-lg hover:bg-muted transition-colors duration-200 font-body text-foreground\"\n      >\n        <Icon name=\"ArrowUpDown\" size={16} />\n        <span>Sort: {currentSortLabel}</span>\n        <Icon \n          name=\"ChevronDown\" \n          size={16} \n          className={`transform transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}\n        />\n      </button>\n      {isOpen && (\n        <>\n          {/* Overlay for mobile */}\n          <div \n            className=\"fixed inset-0 z-[1000] md:hidden\"\n            onClick={() => setIsOpen(false)}\n          />\n          \n          {/* Dropdown Menu */}\n          <div className=\"absolute top-full right-0 mt-2 w-64 bg-card border border-border rounded-lg shadow-warm-lg z-[1001] py-2\">\n            {sortOptions?.map((option) => (\n              <button\n                key={option?.value}\n                onClick={() => handleSortSelect(option?.value)}\n                className={`w-full text-left px-4 py-2 font-body hover:bg-muted transition-colors duration-200 ${\n                  currentSort === option?.value\n                    ? 'text-primary bg-primary/5' :'text-foreground'\n                }`}\n              >\n                {option?.label}\n                {currentSort === option?.value && (\n                  <Icon name=\"Check\" size={16} className=\"float-right mt-0.5\" />\n                )}\n              </button>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default SortDropdown;","size_bytes":2544},"src/pages/product-detail-page/components/ProductDetails.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst ProductDetails = ({ product }) => {\n  const [activeTab, setActiveTab] = useState('description');\n\n  const tabs = [\n    { id: 'description', label: 'Description', icon: 'FileText' },\n    { id: 'ingredients', label: 'Ingredients', icon: 'List' },\n    { id: 'nutrition', label: 'Nutrition', icon: 'Activity' },\n    { id: 'shipping', label: 'Shipping', icon: 'Truck' }\n  ];\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      {/* Tab Navigation */}\n      <div className=\"flex flex-wrap gap-1 mb-6 border-b border-border\">\n        {tabs?.map((tab) => (\n          <button\n            key={tab?.id}\n            onClick={() => setActiveTab(tab?.id)}\n            className={`flex items-center gap-2 px-4 py-3 font-body font-medium transition-colors duration-200 border-b-2 ${\n              activeTab === tab?.id\n                ? 'text-primary border-primary' :'text-muted-foreground border-transparent hover:text-foreground'\n            }`}\n          >\n            <Icon name={tab?.icon} size={16} />\n            <span className=\"hidden sm:inline\">{tab?.label}</span>\n          </button>\n        ))}\n      </div>\n      {/* Tab Content */}\n      <div className=\"space-y-4\">\n        {activeTab === 'description' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"font-heading font-semibold text-lg text-foreground\">\n              Product Description\n            </h3>\n            <div className=\"font-body text-muted-foreground space-y-3\">\n              <p>{product?.description}</p>\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-foreground\">Key Features:</h4>\n                <ul className=\"list-disc list-inside space-y-1\">\n                  {product?.features?.map((feature, index) => (\n                    <li key={index}>{feature}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'ingredients' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"font-heading font-semibold text-lg text-foreground\">\n              Ingredients\n            </h3>\n            <div className=\"space-y-3\">\n              <p className=\"font-body text-muted-foreground\">\n                {product?.ingredients?.description}\n              </p>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div>\n                  <h4 className=\"font-body font-medium text-foreground mb-2\">\n                    Primary Ingredients:\n                  </h4>\n                  <ul className=\"space-y-1\">\n                    {product?.ingredients?.primary?.map((ingredient, index) => (\n                      <li key={index} className=\"font-caption text-sm text-muted-foreground\">\n                        ‚Ä¢ {ingredient}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-body font-medium text-foreground mb-2\">\n                    Spices & Seasonings:\n                  </h4>\n                  <ul className=\"space-y-1\">\n                    {product?.ingredients?.spices?.map((spice, index) => (\n                      <li key={index} className=\"font-caption text-sm text-muted-foreground\">\n                        ‚Ä¢ {spice}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'nutrition' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"font-heading font-semibold text-lg text-foreground\">\n              Nutritional Information\n            </h3>\n            <div className=\"bg-muted/50 rounded-lg p-4\">\n              <p className=\"font-caption text-sm text-muted-foreground mb-4\">\n                Per 100g serving\n              </p>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {Object.entries(product?.nutrition)?.map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between\">\n                    <span className=\"font-body text-foreground capitalize\">\n                      {key?.replace(/([A-Z])/g, ' $1')?.trim()}:\n                    </span>\n                    <span className=\"font-data font-medium text-foreground\">\n                      {value}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'shipping' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"font-heading font-semibold text-lg text-foreground\">\n              Shipping Information\n            </h3>\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted/50 rounded-lg p-4 space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Icon name=\"MapPin\" size={16} className=\"text-primary\" />\n                  <span className=\"font-body font-medium text-foreground\">\n                    Bengaluru\n                  </span>\n                </div>\n                <p className=\"font-caption text-sm text-muted-foreground\">\n                  Free shipping on orders above ‚Çπ499\n                </p>\n                <p className=\"font-caption text-sm text-muted-foreground\">\n                  Delivery in 1-2 business days\n                </p>\n              </div>\n              \n              <div className=\"bg-muted/50 rounded-lg p-4 space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Icon name=\"MapPin\" size={16} className=\"text-secondary\" />\n                  <span className=\"font-body font-medium text-foreground\">\n                    Other Cities\n                  </span>\n                </div>\n                <p className=\"font-caption text-sm text-muted-foreground\">\n                  Free shipping on orders above ‚Çπ999\n                </p>\n                <p className=\"font-caption text-sm text-muted-foreground\">\n                  Delivery in 3-5 business days\n                </p>\n              </div>\n\n              <div className=\"flex items-center gap-2 p-3 bg-success/10 rounded-lg\">\n                <Icon name=\"CheckCircle\" size={16} className=\"text-success\" />\n                <span className=\"font-caption text-sm text-success font-medium\">\n                  Cash on Delivery Available\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProductDetails;","size_bytes":6670},"src/pages/product-detail-page/components/ProductFAQ.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst ProductFAQ = ({ faqs }) => {\n  const [openIndex, setOpenIndex] = useState(null);\n\n  const toggleFAQ = (index) => {\n    setOpenIndex(openIndex === index ? null : index);\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      <h3 className=\"font-heading font-semibold text-lg text-foreground mb-6\">\n        Frequently Asked Questions\n      </h3>\n      <div className=\"space-y-4\">\n        {faqs?.map((faq, index) => (\n          <div key={index} className=\"border border-border rounded-lg\">\n            <button\n              onClick={() => toggleFAQ(index)}\n              className=\"w-full flex items-center justify-between p-4 text-left hover:bg-muted/50 transition-colors duration-200\"\n            >\n              <span className=\"font-body font-medium text-foreground pr-4\">\n                {faq?.question}\n              </span>\n              <Icon\n                name=\"ChevronDown\"\n                size={20}\n                className={`text-muted-foreground transform transition-transform duration-200 flex-shrink-0 ${\n                  openIndex === index ? 'rotate-180' : ''\n                }`}\n              />\n            </button>\n            \n            {openIndex === index && (\n              <div className=\"px-4 pb-4\">\n                <div className=\"pt-2 border-t border-border\">\n                  <p className=\"font-body text-muted-foreground\">\n                    {faq?.answer}\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ProductFAQ;","size_bytes":1692},"src/pages/product-detail-page/components/ProductImageGallery.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\n\nconst ProductImageGallery = ({ images, productName }) => {\n  const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n  const [isZoomed, setIsZoomed] = useState(false);\n\n  const handlePrevious = () => {\n    setSelectedImageIndex((prev) => \n      prev === 0 ? images?.length - 1 : prev - 1\n    );\n  };\n\n  const handleNext = () => {\n    setSelectedImageIndex((prev) => \n      prev === images?.length - 1 ? 0 : prev + 1\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Main Image */}\n      <div className=\"relative aspect-square bg-muted rounded-lg overflow-hidden\">\n        <Image\n          src={images?.[selectedImageIndex]}\n          alt={`${productName} - Image ${selectedImageIndex + 1}`}\n          className={`w-full h-full object-cover transition-transform duration-300 cursor-zoom-in ${\n            isZoomed ? 'scale-150' : 'scale-100'\n          }`}\n          onClick={() => setIsZoomed(!isZoomed)}\n        />\n        \n        {/* Navigation Arrows */}\n        {images?.length > 1 && (\n          <>\n            <button\n              onClick={handlePrevious}\n              className=\"absolute left-2 top-1/2 transform -translate-y-1/2 w-10 h-10 bg-background/80 hover:bg-background rounded-full flex items-center justify-center shadow-warm transition-colors duration-200\"\n              aria-label=\"Previous image\"\n            >\n              <Icon name=\"ChevronLeft\" size={20} />\n            </button>\n            <button\n              onClick={handleNext}\n              className=\"absolute right-2 top-1/2 transform -translate-y-1/2 w-10 h-10 bg-background/80 hover:bg-background rounded-full flex items-center justify-center shadow-warm transition-colors duration-200\"\n              aria-label=\"Next image\"\n            >\n              <Icon name=\"ChevronRight\" size={20} />\n            </button>\n          </>\n        )}\n\n        {/* Zoom Indicator */}\n        <div className=\"absolute top-2 right-2 bg-background/80 rounded-full p-2\">\n          <Icon name=\"ZoomIn\" size={16} className=\"text-muted-foreground\" />\n        </div>\n      </div>\n      {/* Thumbnail Navigation */}\n      {images?.length > 1 && (\n        <div className=\"flex gap-2 overflow-x-auto pb-2\">\n          {images?.map((image, index) => (\n            <button\n              key={index}\n              onClick={() => setSelectedImageIndex(index)}\n              className={`flex-shrink-0 w-16 h-16 rounded-lg overflow-hidden border-2 transition-colors duration-200 ${\n                index === selectedImageIndex\n                  ? 'border-primary' :'border-border hover:border-primary/50'\n              }`}\n            >\n              <Image\n                src={image}\n                alt={`${productName} thumbnail ${index + 1}`}\n                className=\"w-full h-full object-cover\"\n              />\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProductImageGallery;","size_bytes":3057},"src/pages/product-detail-page/components/ProductInfo.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nconst ProductInfo = ({ product, onAddToCart, onAddToWishlist, isInWishlist }) => {\n  const [selectedVariant, setSelectedVariant] = useState(product?.variants?.[0]);\n  const [quantity, setQuantity] = useState(1);\n\n  const handleVariantChange = (variantId) => {\n    const variant = product?.variants?.find(v => v?.id === variantId);\n    setSelectedVariant(variant);\n  };\n\n  const handleQuantityChange = (change) => {\n    const newQuantity = quantity + change;\n    if (newQuantity >= 1 && newQuantity <= 10) {\n      setQuantity(newQuantity);\n    }\n  };\n\n  const handleAddToCart = () => {\n    onAddToCart({\n      productId: product?.id,\n      variantId: selectedVariant?.id,\n      quantity: quantity\n    });\n  };\n\n  const discountPercentage = Math.round(\n    ((selectedVariant?.originalPrice - selectedVariant?.price) / selectedVariant?.originalPrice) * 100\n  );\n\n  const variantOptions = product?.variants?.map(variant => ({\n    value: variant?.id,\n    label: `${variant?.weight} - ‚Çπ${variant?.price?.toFixed(2)}`\n  }));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Product Title */}\n      <div>\n        <h1 className=\"font-heading font-bold text-2xl lg:text-3xl text-foreground mb-2\">\n          {product?.name}\n        </h1>\n        <p className=\"font-body text-muted-foreground\">\n          {product?.shortDescription}\n        </p>\n      </div>\n      {/* Product Badges */}\n      <div className=\"flex flex-wrap gap-2\">\n        {product?.badges?.map((badge, index) => (\n          <span\n            key={index}\n            className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-caption font-medium bg-accent/10 text-accent border border-accent/20\"\n          >\n            {badge}\n          </span>\n        ))}\n      </div>\n      {/* Pricing */}\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center gap-3\">\n          <span className=\"font-heading font-bold text-2xl text-foreground\">\n            ‚Çπ{selectedVariant?.price?.toFixed(2)}\n          </span>\n          {selectedVariant?.originalPrice > selectedVariant?.price && (\n            <>\n              <span className=\"font-data text-lg text-muted-foreground line-through\">\n                ‚Çπ{selectedVariant?.originalPrice?.toFixed(2)}\n              </span>\n              <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-caption font-medium bg-success/10 text-success\">\n                Save {discountPercentage}%\n              </span>\n            </>\n          )}\n        </div>\n        <p className=\"font-caption text-sm text-muted-foreground\">\n          Inclusive of all taxes\n        </p>\n      </div>\n      {/* Variant Selection */}\n      <div>\n        <Select\n          label=\"Select Weight\"\n          options={variantOptions}\n          value={selectedVariant?.id}\n          onChange={handleVariantChange}\n          className=\"max-w-xs\"\n        />\n      </div>\n      {/* Quantity and Add to Cart */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-4\">\n          <span className=\"font-body font-medium text-foreground\">Quantity:</span>\n          <div className=\"flex items-center border border-border rounded-lg\">\n            <button\n              onClick={() => handleQuantityChange(-1)}\n              disabled={quantity <= 1}\n              className=\"w-10 h-10 flex items-center justify-center hover:bg-muted disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200\"\n            >\n              <Icon name=\"Minus\" size={16} />\n            </button>\n            <span className=\"w-12 text-center font-data font-medium\">\n              {quantity}\n            </span>\n            <button\n              onClick={() => handleQuantityChange(1)}\n              disabled={quantity >= 10}\n              className=\"w-10 h-10 flex items-center justify-center hover:bg-muted disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200\"\n            >\n              <Icon name=\"Plus\" size={16} />\n            </button>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3\">\n          <Button\n            variant=\"default\"\n            onClick={handleAddToCart}\n            iconName=\"ShoppingCart\"\n            iconPosition=\"left\"\n            className=\"flex-1\"\n          >\n            Add to Cart\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={onAddToWishlist}\n            iconName={isInWishlist ? \"Heart\" : \"Heart\"}\n            size=\"icon\"\n            className={isInWishlist ? \"text-destructive\" : \"\"}\n          >\n          </Button>\n        </div>\n      </div>\n      {/* Stock Status */}\n      <div className=\"flex items-center gap-2\">\n        <div className=\"w-2 h-2 bg-success rounded-full\"></div>\n        <span className=\"font-caption text-sm text-success font-medium\">\n          In Stock ({selectedVariant?.stock} units available)\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductInfo;","size_bytes":5156},"src/pages/product-detail-page/components/ProductReviews.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ProductReviews = ({ reviews, averageRating, totalReviews }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const reviewsPerPage = 5;\n  const totalPages = Math.ceil(reviews?.length / reviewsPerPage);\n  \n  const startIndex = (currentPage - 1) * reviewsPerPage;\n  const currentReviews = reviews?.slice(startIndex, startIndex + reviewsPerPage);\n\n  const ratingDistribution = [5, 4, 3, 2, 1]?.map(rating => {\n    const count = reviews?.filter(review => review?.rating === rating)?.length;\n    const percentage = totalReviews > 0 ? (count / totalReviews) * 100 : 0;\n    return { rating, count, percentage };\n  });\n\n  const renderStars = (rating, size = 16) => {\n    return Array.from({ length: 5 }, (_, index) => (\n      <Icon\n        key={index}\n        name=\"Star\"\n        size={size}\n        className={`${\n          index < rating\n            ? 'text-warning fill-current' :'text-muted-foreground'\n        }`}\n      />\n    ));\n  };\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date?.toLocaleDateString('en-IN', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      <h3 className=\"font-heading font-semibold text-lg text-foreground mb-6\">\n        Customer Reviews\n      </h3>\n      {/* Rating Summary */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        <div className=\"text-center lg:text-left\">\n          <div className=\"flex items-center justify-center lg:justify-start gap-2 mb-2\">\n            <span className=\"font-heading font-bold text-3xl text-foreground\">\n              {averageRating?.toFixed(1)}\n            </span>\n            <div className=\"flex\">\n              {renderStars(Math.round(averageRating), 20)}\n            </div>\n          </div>\n          <p className=\"font-body text-muted-foreground\">\n            Based on {totalReviews} reviews\n          </p>\n        </div>\n\n        <div className=\"space-y-2\">\n          {ratingDistribution?.map(({ rating, count, percentage }) => (\n            <div key={rating} className=\"flex items-center gap-3\">\n              <div className=\"flex items-center gap-1 w-12\">\n                <span className=\"font-caption text-sm text-foreground\">{rating}</span>\n                <Icon name=\"Star\" size={12} className=\"text-warning fill-current\" />\n              </div>\n              <div className=\"flex-1 bg-muted rounded-full h-2\">\n                <div\n                  className=\"bg-warning rounded-full h-2 transition-all duration-300\"\n                  style={{ width: `${percentage}%` }}\n                />\n              </div>\n              <span className=\"font-caption text-sm text-muted-foreground w-8\">\n                {count}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Reviews List */}\n      <div className=\"space-y-6\">\n        {currentReviews?.map((review) => (\n          <div key={review?.id} className=\"border-b border-border pb-6 last:border-b-0 last:pb-0\">\n            <div className=\"flex items-start gap-4\">\n              <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"font-heading font-semibold text-primary\">\n                  {review?.customerName?.charAt(0)?.toUpperCase()}\n                </span>\n              </div>\n              \n              <div className=\"flex-1 space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-body font-medium text-foreground\">\n                      {review?.customerName}\n                    </h4>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"flex\">\n                        {renderStars(review?.rating)}\n                      </div>\n                      <span className=\"font-caption text-sm text-muted-foreground\">\n                        {formatDate(review?.date)}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  {review?.verified && (\n                    <div className=\"flex items-center gap-1 text-success\">\n                      <Icon name=\"CheckCircle\" size={14} />\n                      <span className=\"font-caption text-xs\">Verified Purchase</span>\n                    </div>\n                  )}\n                </div>\n                \n                <p className=\"font-body text-muted-foreground\">\n                  {review?.comment}\n                </p>\n                \n                {review?.helpful > 0 && (\n                  <div className=\"flex items-center gap-2\">\n                    <button className=\"flex items-center gap-1 text-muted-foreground hover:text-foreground transition-colors duration-200\">\n                      <Icon name=\"ThumbsUp\" size={14} />\n                      <span className=\"font-caption text-sm\">\n                        Helpful ({review?.helpful})\n                      </span>\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"flex items-center justify-center gap-2 mt-6 pt-6 border-t border-border\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n            disabled={currentPage === 1}\n            iconName=\"ChevronLeft\"\n            iconPosition=\"left\"\n          >\n            Previous\n          </Button>\n          \n          <div className=\"flex items-center gap-1\">\n            {Array.from({ length: totalPages }, (_, index) => (\n              <button\n                key={index + 1}\n                onClick={() => setCurrentPage(index + 1)}\n                className={`w-8 h-8 rounded-lg font-caption text-sm transition-colors duration-200 ${\n                  currentPage === index + 1\n                    ? 'bg-primary text-primary-foreground'\n                    : 'text-muted-foreground hover:bg-muted'\n                }`}\n              >\n                {index + 1}\n              </button>\n            ))}\n          </div>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n            disabled={currentPage === totalPages}\n            iconName=\"ChevronRight\"\n            iconPosition=\"right\"\n          >\n            Next\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProductReviews;","size_bytes":6873},"src/pages/product-detail-page/components/RelatedProducts.jsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\n\nconst RelatedProducts = ({ products, onAddToCart }) => {\n  const handleAddToCart = (product) => {\n    onAddToCart({\n      productId: product?.id,\n      variantId: product?.variants?.[0]?.id,\n      quantity: 1\n    });\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"font-heading font-semibold text-lg text-foreground\">\n          You might also like\n        </h3>\n        <Link\n          to=\"/product-collection-grid\"\n          className=\"font-body text-sm text-primary hover:text-primary/80 transition-colors duration-200\"\n        >\n          View All\n        </Link>\n      </div>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {products?.map((product) => (\n          <div key={product?.id} className=\"group\">\n            <div className=\"bg-muted/50 rounded-lg border border-border hover:shadow-warm-md transition-all duration-300\">\n              {/* Product Image */}\n              <div className=\"relative aspect-square rounded-t-lg overflow-hidden\">\n                <Link to={`/product-detail-page?id=${product?.id}`}>\n                  <Image\n                    src={product?.image}\n                    alt={product?.name}\n                    className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                </Link>\n                \n                {/* Quick Actions */}\n                <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n                  <button\n                    className=\"w-8 h-8 bg-background/80 hover:bg-background rounded-full flex items-center justify-center shadow-warm\"\n                    aria-label=\"Add to wishlist\"\n                  >\n                    <Icon name=\"Heart\" size={16} />\n                  </button>\n                </div>\n\n                {/* Badges */}\n                {product?.badges && product?.badges?.length > 0 && (\n                  <div className=\"absolute top-2 left-2\">\n                    <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-caption font-medium bg-accent/90 text-white\">\n                      {product?.badges?.[0]}\n                    </span>\n                  </div>\n                )}\n              </div>\n\n              {/* Product Info */}\n              <div className=\"p-4 space-y-3\">\n                <div>\n                  <Link to={`/product-detail-page?id=${product?.id}`}>\n                    <h4 className=\"font-body font-medium text-foreground hover:text-primary transition-colors duration-200 line-clamp-2\">\n                      {product?.name}\n                    </h4>\n                  </Link>\n                  <p className=\"font-caption text-sm text-muted-foreground mt-1\">\n                    {product?.variants?.[0]?.weight}\n                  </p>\n                </div>\n\n                {/* Pricing */}\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-data font-semibold text-foreground\">\n                    ‚Çπ{product?.variants?.[0]?.price?.toFixed(2)}\n                  </span>\n                  {product?.variants?.[0]?.originalPrice > product?.variants?.[0]?.price && (\n                    <span className=\"font-data text-sm text-muted-foreground line-through\">\n                      ‚Çπ{product?.variants?.[0]?.originalPrice?.toFixed(2)}\n                    </span>\n                  )}\n                </div>\n\n                {/* Rating */}\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"flex\">\n                    {Array.from({ length: 5 }, (_, index) => (\n                      <Icon\n                        key={index}\n                        name=\"Star\"\n                        size={12}\n                        className={`${\n                          index < Math.round(product?.rating)\n                            ? 'text-warning fill-current' :'text-muted-foreground'\n                        }`}\n                      />\n                    ))}\n                  </div>\n                  <span className=\"font-caption text-xs text-muted-foreground\">\n                    ({product?.reviewCount})\n                  </span>\n                </div>\n\n                {/* Add to Cart Button */}\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  fullWidth\n                  onClick={() => handleAddToCart(product)}\n                  iconName=\"ShoppingCart\"\n                  iconPosition=\"left\"\n                  className=\"mt-3\"\n                >\n                  Add to Cart\n                </Button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default RelatedProducts;","size_bytes":5126},"src/pages/shopping-cart/components/CartItem.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\n\nconst CartItem = ({ item, onUpdateQuantity, onRemoveItem, onSaveForLater }) => {\n  const handleQuantityChange = (newQuantity) => {\n    if (newQuantity === 0) {\n      onRemoveItem(item?.id);\n    } else {\n      onUpdateQuantity(item?.id, newQuantity);\n    }\n  };\n\n  const discountAmount = item?.originalPrice - item?.price;\n  const discountPercentage = Math.round((discountAmount / item?.originalPrice) * 100);\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-4 shadow-warm\">\n      <div className=\"flex gap-4\">\n        {/* Product Image */}\n        <div className=\"w-20 h-20 sm:w-24 sm:h-24 rounded-lg overflow-hidden flex-shrink-0\">\n          <Image\n            src={item?.image}\n            alt={item?.name}\n            className=\"w-full h-full object-cover\"\n          />\n        </div>\n\n        {/* Product Details */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex justify-between items-start mb-2\">\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-heading font-semibold text-base text-foreground truncate\">\n                {item?.name}\n              </h3>\n              <p className=\"font-body text-sm text-muted-foreground\">\n                {item?.variant}\n              </p>\n              {item?.badges && item?.badges?.length > 0 && (\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {item?.badges?.map((badge, index) => (\n                    <span\n                      key={index}\n                      className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-caption font-medium bg-accent/10 text-accent\"\n                    >\n                      {badge}\n                    </span>\n                  ))}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={() => onRemoveItem(item?.id)}\n              className=\"p-1 hover:bg-destructive/10 hover:text-destructive rounded transition-colors duration-200 ml-2\"\n              aria-label=\"Remove item\"\n            >\n              <Icon name=\"Trash2\" size={18} />\n            </button>\n          </div>\n\n          {/* Price and Quantity Controls */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex flex-col\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"font-data font-bold text-lg text-foreground\">\n                  ‚Çπ{(item?.price * item?.quantity)?.toFixed(2)}\n                </span>\n                {discountAmount > 0 && (\n                  <>\n                    <span className=\"font-data text-sm text-muted-foreground line-through\">\n                      ‚Çπ{(item?.originalPrice * item?.quantity)?.toFixed(2)}\n                    </span>\n                    <span className=\"font-caption text-xs font-medium text-success bg-success/10 px-2 py-1 rounded\">\n                      {discountPercentage}% OFF\n                    </span>\n                  </>\n                )}\n              </div>\n              <p className=\"font-caption text-xs text-muted-foreground\">\n                ‚Çπ{item?.price?.toFixed(2)} per unit\n              </p>\n            </div>\n\n            {/* Quantity Controls */}\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex items-center border border-border rounded-lg\">\n                <button\n                  onClick={() => handleQuantityChange(item?.quantity - 1)}\n                  className=\"p-2 hover:bg-muted transition-colors duration-200 rounded-l-lg\"\n                  disabled={item?.quantity <= 1}\n                >\n                  <Icon name=\"Minus\" size={16} />\n                </button>\n                <span className=\"font-data font-medium px-4 py-2 min-w-[3rem] text-center\">\n                  {item?.quantity}\n                </span>\n                <button\n                  onClick={() => handleQuantityChange(item?.quantity + 1)}\n                  className=\"p-2 hover:bg-muted transition-colors duration-200 rounded-r-lg\"\n                >\n                  <Icon name=\"Plus\" size={16} />\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-2 mt-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onSaveForLater(item?.id)}\n              iconName=\"Heart\"\n              iconPosition=\"left\"\n              iconSize={14}\n            >\n              Save for Later\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;","size_bytes":4825},"src/pages/shopping-cart/components/EmptyCart.jsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Image from '../../../components/AppImage';\n\nconst EmptyCart = () => {\n  const suggestedCategories = [\n    {\n      name: 'Sweets',\n      path: '/product-collection-grid?category=sweets',\n      image: 'https://images.unsplash.com/photo-1578985545062-69928b1d9587?w=300&h=200&fit=crop',\n      description: 'Traditional handmade sweets'\n    },\n    {\n      name: 'Savouries',\n      path: '/product-collection-grid?category=savouries',\n      image: 'https://images.unsplash.com/photo-1606491956689-2ea866880c84?w=300&h=200&fit=crop',\n      description: 'Crispy and flavorful snacks'\n    },\n    {\n      name: 'Pickles',\n      path: '/product-collection-grid?category=pickles',\n      image: 'https://images.unsplash.com/photo-1599599810769-bcde5a160d32?w=300&h=200&fit=crop',\n      description: 'Authentic homemade pickles'\n    },\n    {\n      name: 'Kitchen Essentials',\n      path: '/product-collection-grid?category=kitchen-essentials',\n      image: 'https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=300&h=200&fit=crop',\n      description: 'Natural oils and spices'\n    }\n  ];\n\n  const popularProducts = [\n    {\n      id: 1,\n      name: 'Organic Turmeric Powder',\n      price: 149,\n      originalPrice: 199,\n      image: 'https://images.unsplash.com/photo-1615485290382-441e4d049cb5?w=200&h=200&fit=crop',\n      rating: 4.8,\n      reviews: 156\n    },\n    {\n      id: 2,\n      name: 'Homemade Mango Pickle',\n      price: 299,\n      originalPrice: 349,\n      image: 'https://images.unsplash.com/photo-1599599810769-bcde5a160d32?w=200&h=200&fit=crop',\n      rating: 4.9,\n      reviews: 203\n    },\n    {\n      id: 3,\n      name: 'Cold Pressed Coconut Oil',\n      price: 399,\n      originalPrice: 499,\n      image: 'https://images.unsplash.com/photo-1474979266404-7eaacbcd87c5?w=200&h=200&fit=crop',\n      rating: 4.7,\n      reviews: 89\n    }\n  ];\n\n  return (\n    <div className=\"text-center py-12\">\n      {/* Empty Cart Icon */}\n      <div className=\"mb-8\">\n        <div className=\"w-24 h-24 mx-auto bg-muted rounded-full flex items-center justify-center mb-4\">\n          <Icon name=\"ShoppingCart\" size={48} className=\"text-muted-foreground\" />\n        </div>\n        <h2 className=\"font-heading font-semibold text-2xl text-foreground mb-2\">\n          Your cart is empty\n        </h2>\n        <p className=\"font-body text-muted-foreground max-w-md mx-auto\">\n          Looks like you haven't added any items to your cart yet. Start shopping to fill it up with natural goodness!\n        </p>\n      </div>\n      {/* Quick Actions */}\n      <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n        <Link to=\"/homepage\">\n          <Button variant=\"default\" size=\"lg\" iconName=\"Home\" iconPosition=\"left\">\n            Go to Homepage\n          </Button>\n        </Link>\n        <Link to=\"/product-collection-grid\">\n          <Button variant=\"outline\" size=\"lg\" iconName=\"Search\" iconPosition=\"left\">\n            Browse Products\n          </Button>\n        </Link>\n      </div>\n      {/* Suggested Categories */}\n      <div className=\"mb-12\">\n        <h3 className=\"font-heading font-semibold text-xl text-foreground mb-6\">\n          Shop by Category\n        </h3>\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n          {suggestedCategories?.map((category, index) => (\n            <Link\n              key={index}\n              to={category?.path}\n              className=\"group bg-card border border-border rounded-lg overflow-hidden hover:shadow-warm-md transition-all duration-300\"\n            >\n              <div className=\"aspect-video overflow-hidden\">\n                <Image\n                  src={category?.image}\n                  alt={category?.name}\n                  className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                />\n              </div>\n              <div className=\"p-4\">\n                <h4 className=\"font-body font-semibold text-foreground mb-1\">\n                  {category?.name}\n                </h4>\n                <p className=\"font-caption text-sm text-muted-foreground\">\n                  {category?.description}\n                </p>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </div>\n      {/* Popular Products */}\n      <div>\n        <h3 className=\"font-heading font-semibold text-xl text-foreground mb-6\">\n          Popular Products\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {popularProducts?.map((product) => {\n            const discountPercentage = Math.round(((product?.originalPrice - product?.price) / product?.originalPrice) * 100);\n            \n            return (\n              <div\n                key={product?.id}\n                className=\"bg-card border border-border rounded-lg overflow-hidden hover:shadow-warm-md transition-all duration-300\"\n              >\n                <div className=\"aspect-square overflow-hidden\">\n                  <Image\n                    src={product?.image}\n                    alt={product?.name}\n                    className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-300\"\n                  />\n                </div>\n                <div className=\"p-4\">\n                  <h4 className=\"font-body font-semibold text-foreground mb-2 line-clamp-2\">\n                    {product?.name}\n                  </h4>\n                  \n                  {/* Rating */}\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <div className=\"flex items-center\">\n                      {[...Array(5)]?.map((_, i) => (\n                        <Icon\n                          key={i}\n                          name=\"Star\"\n                          size={14}\n                          className={i < Math.floor(product?.rating) ? 'text-warning fill-current' : 'text-muted-foreground'}\n                        />\n                      ))}\n                    </div>\n                    <span className=\"font-caption text-xs text-muted-foreground\">\n                      ({product?.reviews})\n                    </span>\n                  </div>\n                  \n                  {/* Price */}\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <span className=\"font-data font-bold text-lg text-foreground\">\n                      ‚Çπ{product?.price}\n                    </span>\n                    <span className=\"font-data text-sm text-muted-foreground line-through\">\n                      ‚Çπ{product?.originalPrice}\n                    </span>\n                    <span className=\"font-caption text-xs font-medium text-success bg-success/10 px-2 py-1 rounded\">\n                      {discountPercentage}% OFF\n                    </span>\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    fullWidth\n                    size=\"sm\"\n                    iconName=\"ShoppingCart\"\n                    iconPosition=\"left\"\n                    iconSize={16}\n                  >\n                    Add to Cart\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmptyCart;","size_bytes":7478},"src/pages/shopping-cart/components/OrderSummary.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport { Link } from 'react-router-dom';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nconst OrderSummary = ({ \n  subtotal, \n  discount, \n  shipping, \n  total, \n  onApplyCoupon, \n  appliedCoupon,\n  onPincodeChange,\n  pincode,\n  shippingLocation \n}) => {\n  const [couponCode, setCouponCode] = useState('');\n  const [pincodeInput, setPincodeInput] = useState(pincode || '');\n\n  const handleApplyCoupon = () => {\n    if (couponCode?.trim()) {\n      onApplyCoupon(couponCode);\n      setCouponCode('');\n    }\n  };\n\n  const handlePincodeSubmit = () => {\n    if (pincodeInput?.trim()) {\n      onPincodeChange(pincodeInput);\n    }\n  };\n\n  const freeShippingThreshold = shippingLocation === 'bengaluru' ? 499 : 999;\n  const remainingForFreeShipping = Math.max(0, freeShippingThreshold - subtotal);\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6 shadow-warm sticky top-4\">\n      <h2 className=\"font-heading font-semibold text-lg text-foreground mb-4\">\n        Order Summary\n      </h2>\n      {/* Shipping Calculator */}\n      <div className=\"mb-6\">\n        <h3 className=\"font-body font-medium text-foreground mb-3\">\n          Delivery Location\n        </h3>\n        <div className=\"flex gap-2\">\n          <Input\n            type=\"text\"\n            placeholder=\"Enter pincode\"\n            value={pincodeInput}\n            onChange={(e) => setPincodeInput(e?.target?.value)}\n            className=\"flex-1\"\n          />\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handlePincodeSubmit}\n            iconName=\"MapPin\"\n            iconSize={16}\n          >\n            Check\n          </Button>\n        </div>\n        {shippingLocation && (\n          <p className=\"font-caption text-sm text-muted-foreground mt-2\">\n            Delivering to: {shippingLocation === 'bengaluru' ? 'Bengaluru' : 'Other Cities'}\n          </p>\n        )}\n      </div>\n      {/* Free Shipping Progress */}\n      {remainingForFreeShipping > 0 && (\n        <div className=\"mb-6 p-4 bg-warning/10 border border-warning/20 rounded-lg\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Icon name=\"Truck\" size={16} className=\"text-warning\" />\n            <p className=\"font-caption text-sm font-medium text-warning-foreground\">\n              Add ‚Çπ{remainingForFreeShipping?.toFixed(2)} more for FREE shipping!\n            </p>\n          </div>\n          <div className=\"w-full bg-warning/20 rounded-full h-2\">\n            <div \n              className=\"bg-warning h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${Math.min(100, (subtotal / freeShippingThreshold) * 100)}%` }}\n            />\n          </div>\n        </div>\n      )}\n      {/* Coupon Code */}\n      <div className=\"mb-6\">\n        <h3 className=\"font-body font-medium text-foreground mb-3\">\n          Coupon Code\n        </h3>\n        {appliedCoupon ? (\n          <div className=\"flex items-center justify-between p-3 bg-success/10 border border-success/20 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <Icon name=\"Tag\" size={16} className=\"text-success\" />\n              <span className=\"font-data font-medium text-success\">\n                {appliedCoupon?.code}\n              </span>\n            </div>\n            <button\n              onClick={() => onApplyCoupon(null)}\n              className=\"text-success hover:text-success/80 transition-colors duration-200\"\n            >\n              <Icon name=\"X\" size={16} />\n            </button>\n          </div>\n        ) : (\n          <div className=\"flex gap-2\">\n            <Input\n              type=\"text\"\n              placeholder=\"Enter coupon code\"\n              value={couponCode}\n              onChange={(e) => setCouponCode(e?.target?.value?.toUpperCase())}\n              className=\"flex-1\"\n            />\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleApplyCoupon}\n              disabled={!couponCode?.trim()}\n            >\n              Apply\n            </Button>\n          </div>\n        )}\n        \n        {/* Available Coupons */}\n        <div className=\"mt-3 p-3 bg-muted/50 rounded-lg\">\n          <p className=\"font-caption text-xs font-medium text-foreground mb-2\">\n            Available Offers:\n          </p>\n          <div className=\"space-y-1\">\n            <p className=\"font-caption text-xs text-muted-foreground\">\n              ‚Ä¢ FLAT10: 10% off on orders ‚â•‚Çπ1,499\n            </p>\n            <p className=\"font-caption text-xs text-muted-foreground\">\n              ‚Ä¢ FREE50: Free shipping on orders ‚â•‚Çπ{freeShippingThreshold}\n            </p>\n          </div>\n        </div>\n      </div>\n      {/* Price Breakdown */}\n      <div className=\"space-y-3 mb-6\">\n        <div className=\"flex justify-between font-body text-sm\">\n          <span className=\"text-muted-foreground\">Subtotal</span>\n          <span className=\"font-data font-medium text-foreground\">\n            ‚Çπ{subtotal?.toFixed(2)}\n          </span>\n        </div>\n        \n        {discount > 0 && (\n          <div className=\"flex justify-between font-body text-sm\">\n            <span className=\"text-success\">Discount</span>\n            <span className=\"font-data font-medium text-success\">\n              -‚Çπ{discount?.toFixed(2)}\n            </span>\n          </div>\n        )}\n        \n        <div className=\"flex justify-between font-body text-sm\">\n          <span className=\"text-muted-foreground\">Shipping</span>\n          <span className=\"font-data font-medium text-foreground\">\n            {shipping === 0 ? 'FREE' : `‚Çπ${shipping?.toFixed(2)}`}\n          </span>\n        </div>\n        \n        <div className=\"border-t border-border pt-3\">\n          <div className=\"flex justify-between font-heading font-semibold text-lg\">\n            <span className=\"text-foreground\">Total</span>\n            <span className=\"font-data text-foreground\">‚Çπ{total?.toFixed(2)}</span>\n          </div>\n        </div>\n      </div>\n      {/* Checkout Button */}\n      <Link to=\"/checkout-process\">\n        <Button\n          variant=\"default\"\n          fullWidth\n          size=\"lg\"\n          iconName=\"ArrowRight\"\n          iconPosition=\"right\"\n        >\n          Proceed to Checkout\n        </Button>\n      </Link>\n      {/* Security Badge */}\n      <div className=\"flex items-center justify-center gap-2 mt-4 p-3 bg-muted/50 rounded-lg\">\n        <Icon name=\"Shield\" size={16} className=\"text-success\" />\n        <p className=\"font-caption text-xs text-muted-foreground\">\n          Secure checkout with 256-bit SSL encryption\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderSummary;","size_bytes":6834},"src/pages/shopping-cart/components/RelatedProducts.jsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Image from '../../../components/AppImage';\n\nconst RelatedProducts = ({ onAddToCart }) => {\n  const relatedProducts = [\n    {\n      id: 101,\n      name: 'Premium Basmati Rice',\n      price: 299,\n      originalPrice: 349,\n      image: 'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=300&h=300&fit=crop',\n      rating: 4.6,\n      reviews: 124,\n      badges: ['Organic', 'Premium Quality'],\n      variant: '1kg'\n    },\n    {\n      id: 102,\n      name: 'Homemade Ghee',\n      price: 599,\n      originalPrice: 699,\n      image: 'https://images.unsplash.com/photo-1628294895950-9805252327bc?w=300&h=300&fit=crop',\n      rating: 4.8,\n      reviews: 89,\n      badges: ['Pure', 'Traditional'],\n      variant: '500ml'\n    },\n    {\n      id: 103,\n      name: 'Mixed Spice Powder',\n      price: 199,\n      originalPrice: 249,\n      image: 'https://images.unsplash.com/photo-1596040033229-a9821ebd058d?w=300&h=300&fit=crop',\n      rating: 4.7,\n      reviews: 156,\n      badges: ['Handmade', 'No Preservatives'],\n      variant: '200g'\n    },\n    {\n      id: 104,\n      name: 'Organic Jaggery',\n      price: 149,\n      originalPrice: 179,\n      image: 'https://images.unsplash.com/photo-1609501676725-7186f734b2b0?w=300&h=300&fit=crop',\n      rating: 4.5,\n      reviews: 78,\n      badges: ['Organic', 'Chemical Free'],\n      variant: '500g'\n    }\n  ];\n\n  const handleAddToCart = (product) => {\n    const cartItem = {\n      id: product?.id,\n      name: product?.name,\n      price: product?.price,\n      originalPrice: product?.originalPrice,\n      image: product?.image,\n      variant: product?.variant,\n      badges: product?.badges,\n      quantity: 1\n    };\n    onAddToCart(cartItem);\n  };\n\n  return (\n    <div className=\"mt-12\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"font-heading font-semibold text-xl text-foreground\">\n          You might also like\n        </h2>\n        <Link to=\"/product-collection-grid\">\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"ArrowRight\" iconPosition=\"right\">\n            View All\n          </Button>\n        </Link>\n      </div>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {relatedProducts?.map((product) => {\n          const discountPercentage = Math.round(((product?.originalPrice - product?.price) / product?.originalPrice) * 100);\n          \n          return (\n            <div\n              key={product?.id}\n              className=\"bg-card border border-border rounded-lg overflow-hidden hover:shadow-warm-md transition-all duration-300 group\"\n            >\n              {/* Product Image */}\n              <div className=\"relative aspect-square overflow-hidden\">\n                <Image\n                  src={product?.image}\n                  alt={product?.name}\n                  className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                />\n                \n                {/* Discount Badge */}\n                {discountPercentage > 0 && (\n                  <div className=\"absolute top-2 left-2\">\n                    <span className=\"bg-destructive text-destructive-foreground text-xs font-caption font-bold px-2 py-1 rounded\">\n                      {discountPercentage}% OFF\n                    </span>\n                  </div>\n                )}\n\n                {/* Quick Actions */}\n                <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                  <button\n                    className=\"p-2 bg-background/90 hover:bg-background rounded-full shadow-warm transition-colors duration-200\"\n                    aria-label=\"Add to wishlist\"\n                  >\n                    <Icon name=\"Heart\" size={16} />\n                  </button>\n                </div>\n              </div>\n              {/* Product Info */}\n              <div className=\"p-4\">\n                {/* Badges */}\n                {product?.badges && product?.badges?.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1 mb-2\">\n                    {product?.badges?.slice(0, 2)?.map((badge, index) => (\n                      <span\n                        key={index}\n                        className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-caption font-medium bg-accent/10 text-accent\"\n                      >\n                        {badge}\n                      </span>\n                    ))}\n                  </div>\n                )}\n\n                <Link to={`/product-detail-page?id=${product?.id}`}>\n                  <h3 className=\"font-body font-semibold text-foreground mb-1 hover:text-primary transition-colors duration-200 line-clamp-2\">\n                    {product?.name}\n                  </h3>\n                </Link>\n                \n                <p className=\"font-caption text-sm text-muted-foreground mb-2\">\n                  {product?.variant}\n                </p>\n\n                {/* Rating */}\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <div className=\"flex items-center\">\n                    {[...Array(5)]?.map((_, i) => (\n                      <Icon\n                        key={i}\n                        name=\"Star\"\n                        size={12}\n                        className={i < Math.floor(product?.rating) ? 'text-warning fill-current' : 'text-muted-foreground'}\n                      />\n                    ))}\n                  </div>\n                  <span className=\"font-caption text-xs text-muted-foreground\">\n                    {product?.rating} ({product?.reviews})\n                  </span>\n                </div>\n\n                {/* Price */}\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <span className=\"font-data font-bold text-lg text-foreground\">\n                    ‚Çπ{product?.price}\n                  </span>\n                  {product?.originalPrice > product?.price && (\n                    <span className=\"font-data text-sm text-muted-foreground line-through\">\n                      ‚Çπ{product?.originalPrice}\n                    </span>\n                  )}\n                </div>\n\n                {/* Add to Cart Button */}\n                <Button\n                  variant=\"outline\"\n                  fullWidth\n                  size=\"sm\"\n                  onClick={() => handleAddToCart(product)}\n                  iconName=\"ShoppingCart\"\n                  iconPosition=\"left\"\n                  iconSize={16}\n                >\n                  Add to Cart\n                </Button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default RelatedProducts;","size_bytes":6918},"src/pages/shopping-cart/components/SavedItems.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Image from '../../../components/AppImage';\n\nconst SavedItems = ({ savedItems = [], onMoveToCart, onRemoveFromSaved }) => {\n  if (savedItems?.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"mt-8\">\n      <h2 className=\"font-heading font-semibold text-lg text-foreground mb-4\">\n        Saved for Later ({savedItems?.length})\n      </h2>\n      <div className=\"space-y-4\">\n        {savedItems?.map((item) => {\n          const discountAmount = item?.originalPrice - item?.price;\n          const discountPercentage = Math.round((discountAmount / item?.originalPrice) * 100);\n          \n          return (\n            <div key={item?.id} className=\"bg-card border border-border rounded-lg p-4 shadow-warm\">\n              <div className=\"flex gap-4\">\n                {/* Product Image */}\n                <div className=\"w-16 h-16 sm:w-20 sm:h-20 rounded-lg overflow-hidden flex-shrink-0\">\n                  <Image\n                    src={item?.image}\n                    alt={item?.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n\n                {/* Product Details */}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-body font-semibold text-foreground truncate\">\n                        {item?.name}\n                      </h3>\n                      <p className=\"font-caption text-sm text-muted-foreground\">\n                        {item?.variant}\n                      </p>\n                      \n                      {/* Badges */}\n                      {item?.badges && item?.badges?.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {item?.badges?.slice(0, 2)?.map((badge, index) => (\n                            <span\n                              key={index}\n                              className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-caption font-medium bg-accent/10 text-accent\"\n                            >\n                              {badge}\n                            </span>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                    \n                    <button\n                      onClick={() => onRemoveFromSaved(item?.id)}\n                      className=\"p-1 hover:bg-destructive/10 hover:text-destructive rounded transition-colors duration-200 ml-2\"\n                      aria-label=\"Remove from saved\"\n                    >\n                      <Icon name=\"X\" size={16} />\n                    </button>\n                  </div>\n\n                  {/* Price */}\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <span className=\"font-data font-bold text-foreground\">\n                      ‚Çπ{item?.price?.toFixed(2)}\n                    </span>\n                    {discountAmount > 0 && (\n                      <>\n                        <span className=\"font-data text-sm text-muted-foreground line-through\">\n                          ‚Çπ{item?.originalPrice?.toFixed(2)}\n                        </span>\n                        <span className=\"font-caption text-xs font-medium text-success bg-success/10 px-2 py-1 rounded\">\n                          {discountPercentage}% OFF\n                        </span>\n                      </>\n                    )}\n                  </div>\n\n                  {/* Stock Status */}\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <div className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 bg-success rounded-full\"></div>\n                      <span className=\"font-caption text-xs text-success\">In Stock</span>\n                    </div>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"default\"\n                      size=\"sm\"\n                      onClick={() => onMoveToCart(item)}\n                      iconName=\"ShoppingCart\"\n                      iconPosition=\"left\"\n                      iconSize={14}\n                    >\n                      Move to Cart\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onRemoveFromSaved(item?.id)}\n                      iconName=\"Trash2\"\n                      iconPosition=\"left\"\n                      iconSize={14}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default SavedItems;","size_bytes":5068},"src/pages/user-account-dashboard/components/AddressBook.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nconst AddressBook = ({ addresses, onAddAddress, onUpdateAddress, onDeleteAddress, onSetDefault }) => {\n  const [isAddingAddress, setIsAddingAddress] = useState(false);\n  const [editingAddress, setEditingAddress] = useState(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    phone: '',\n    street: '',\n    city: '',\n    state: '',\n    pincode: '',\n    landmark: '',\n    addressType: 'Home'\n  });\n  const [errors, setErrors] = useState({});\n\n  const addressTypes = ['Home', 'Work', 'Other'];\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    if (errors?.[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ''\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData?.name?.trim()) {\n      newErrors.name = 'Name is required';\n    }\n    \n    if (!formData?.phone?.trim()) {\n      newErrors.phone = 'Phone number is required';\n    } else if (!/^\\d{10}$/?.test(formData?.phone?.replace(/\\D/g, ''))) {\n      newErrors.phone = 'Please enter a valid 10-digit phone number';\n    }\n    \n    if (!formData?.street?.trim()) {\n      newErrors.street = 'Street address is required';\n    }\n    \n    if (!formData?.city?.trim()) {\n      newErrors.city = 'City is required';\n    }\n    \n    if (!formData?.state?.trim()) {\n      newErrors.state = 'State is required';\n    }\n    \n    if (!formData?.pincode?.trim()) {\n      newErrors.pincode = 'Pincode is required';\n    } else if (!/^\\d{6}$/?.test(formData?.pincode)) {\n      newErrors.pincode = 'Please enter a valid 6-digit pincode';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors)?.length === 0;\n  };\n\n  const handleSaveAddress = () => {\n    if (validateForm()) {\n      if (editingAddress) {\n        onUpdateAddress(editingAddress?.id, formData);\n        setEditingAddress(null);\n      } else {\n        onAddAddress(formData);\n        setIsAddingAddress(false);\n      }\n      resetForm();\n    }\n  };\n\n  const handleEditAddress = (address) => {\n    setFormData({\n      name: address?.name,\n      phone: address?.phone,\n      street: address?.street,\n      city: address?.city,\n      state: address?.state,\n      pincode: address?.pincode,\n      landmark: address?.landmark || '',\n      addressType: address?.addressType\n    });\n    setEditingAddress(address);\n    setIsAddingAddress(false);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      phone: '',\n      street: '',\n      city: '',\n      state: '',\n      pincode: '',\n      landmark: '',\n      addressType: 'Home'\n    });\n    setErrors({});\n  };\n\n  const handleCancel = () => {\n    resetForm();\n    setIsAddingAddress(false);\n    setEditingAddress(null);\n  };\n\n  const getAddressTypeIcon = (type) => {\n    switch (type) {\n      case 'Home':\n        return 'Home';\n      case 'Work':\n        return 'Building';\n      default:\n        return 'MapPin';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"font-heading text-2xl font-bold text-foreground\">\n          Address Book\n        </h1>\n        {!isAddingAddress && !editingAddress && (\n          <Button\n            variant=\"default\"\n            onClick={() => setIsAddingAddress(true)}\n            iconName=\"Plus\"\n            iconPosition=\"left\"\n          >\n            Add New Address\n          </Button>\n        )}\n      </div>\n      {/* Add/Edit Address Form */}\n      {(isAddingAddress || editingAddress) && (\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <h3 className=\"font-heading text-lg font-semibold text-foreground mb-4\">\n            {editingAddress ? 'Edit Address' : 'Add New Address'}\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Input\n              label=\"Full Name\"\n              type=\"text\"\n              value={formData?.name}\n              onChange={(e) => handleInputChange('name', e?.target?.value)}\n              error={errors?.name}\n              required\n            />\n\n            <Input\n              label=\"Phone Number\"\n              type=\"tel\"\n              value={formData?.phone}\n              onChange={(e) => handleInputChange('phone', e?.target?.value)}\n              error={errors?.phone}\n              required\n            />\n\n            <div className=\"md:col-span-2\">\n              <Input\n                label=\"Street Address\"\n                type=\"text\"\n                value={formData?.street}\n                onChange={(e) => handleInputChange('street', e?.target?.value)}\n                error={errors?.street}\n                placeholder=\"House/Flat number, Street name\"\n                required\n              />\n            </div>\n\n            <Input\n              label=\"City\"\n              type=\"text\"\n              value={formData?.city}\n              onChange={(e) => handleInputChange('city', e?.target?.value)}\n              error={errors?.city}\n              required\n            />\n\n            <Input\n              label=\"State\"\n              type=\"text\"\n              value={formData?.state}\n              onChange={(e) => handleInputChange('state', e?.target?.value)}\n              error={errors?.state}\n              required\n            />\n\n            <Input\n              label=\"Pincode\"\n              type=\"text\"\n              value={formData?.pincode}\n              onChange={(e) => handleInputChange('pincode', e?.target?.value)}\n              error={errors?.pincode}\n              maxLength={6}\n              required\n            />\n\n            <Input\n              label=\"Landmark (Optional)\"\n              type=\"text\"\n              value={formData?.landmark}\n              onChange={(e) => handleInputChange('landmark', e?.target?.value)}\n              placeholder=\"Near landmark or area\"\n            />\n\n            <div>\n              <label className=\"block font-body font-medium text-foreground mb-2\">\n                Address Type\n              </label>\n              <div className=\"flex space-x-4\">\n                {addressTypes?.map((type) => (\n                  <label key={type} className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"radio\"\n                      name=\"addressType\"\n                      value={type}\n                      checked={formData?.addressType === type}\n                      onChange={(e) => handleInputChange('addressType', e?.target?.value)}\n                      className=\"w-4 h-4 text-primary border-border focus:ring-primary\"\n                    />\n                    <span className=\"font-body text-sm text-foreground\">\n                      {type}\n                    </span>\n                  </label>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex space-x-3 mt-6 pt-6 border-t border-border\">\n            <Button\n              variant=\"default\"\n              onClick={handleSaveAddress}\n            >\n              {editingAddress ? 'Update Address' : 'Save Address'}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleCancel}\n            >\n              Cancel\n            </Button>\n          </div>\n        </div>\n      )}\n      {/* Address List */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n        {addresses?.length === 0 ? (\n          <div className=\"lg:col-span-2 text-center py-12 bg-card border border-border rounded-lg\">\n            <Icon name=\"MapPin\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"font-heading font-semibold text-foreground mb-2\">\n              No addresses saved\n            </h3>\n            <p className=\"font-body text-muted-foreground mb-4\">\n              Add your first address to get started with faster checkout.\n            </p>\n            <Button\n              variant=\"default\"\n              onClick={() => setIsAddingAddress(true)}\n            >\n              Add Address\n            </Button>\n          </div>\n        ) : (\n          addresses?.map((address) => (\n            <div\n              key={address?.id}\n              className={`bg-card border rounded-lg p-4 ${\n                address?.isDefault ? 'border-primary ring-1 ring-primary/20' : 'border-border'\n              }`}\n            >\n              {/* Address Header */}\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Icon \n                    name={getAddressTypeIcon(address?.addressType)} \n                    size={16} \n                    className=\"text-primary\" \n                  />\n                  <span className=\"font-body font-medium text-foreground\">\n                    {address?.addressType}\n                  </span>\n                  {address?.isDefault && (\n                    <span className=\"bg-primary/10 text-primary text-xs font-caption font-medium px-2 py-1 rounded-full\">\n                      Default\n                    </span>\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <button\n                    onClick={() => handleEditAddress(address)}\n                    className=\"p-1 hover:bg-muted rounded transition-colors duration-200\"\n                    aria-label=\"Edit address\"\n                  >\n                    <Icon name=\"Edit\" size={16} className=\"text-muted-foreground\" />\n                  </button>\n                  <button\n                    onClick={() => onDeleteAddress(address?.id)}\n                    className=\"p-1 hover:bg-destructive/10 hover:text-destructive rounded transition-colors duration-200\"\n                    aria-label=\"Delete address\"\n                  >\n                    <Icon name=\"Trash2\" size={16} className=\"text-muted-foreground\" />\n                  </button>\n                </div>\n              </div>\n\n              {/* Address Details */}\n              <div className=\"space-y-1 mb-4\">\n                <p className=\"font-body font-medium text-foreground\">\n                  {address?.name}\n                </p>\n                <p className=\"font-body text-sm text-foreground\">\n                  {address?.street}\n                </p>\n                {address?.landmark && (\n                  <p className=\"font-caption text-sm text-muted-foreground\">\n                    Near {address?.landmark}\n                  </p>\n                )}\n                <p className=\"font-body text-sm text-foreground\">\n                  {address?.city}, {address?.state} {address?.pincode}\n                </p>\n                <p className=\"font-caption text-sm text-muted-foreground\">\n                  Phone: {address?.phone}\n                </p>\n              </div>\n\n              {/* Address Actions */}\n              {!address?.isDefault && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onSetDefault(address?.id)}\n                  fullWidth\n                >\n                  Set as Default\n                </Button>\n              )}\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AddressBook;","size_bytes":11549},"src/pages/user-account-dashboard/components/DashboardOverview.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst DashboardOverview = ({ user, recentOrders, loyaltyPoints }) => {\n  const quickActions = [\n    {\n      title: 'Track Order',\n      description: 'Check your order status',\n      icon: 'Truck',\n      action: 'orders'\n    },\n    {\n      title: 'Reorder',\n      description: 'Buy previous items',\n      icon: 'RotateCcw',\n      action: 'orders'\n    },\n    {\n      title: 'Update Profile',\n      description: 'Edit personal info',\n      icon: 'Edit',\n      action: 'profile'\n    },\n    {\n      title: 'Add Address',\n      description: 'New shipping address',\n      icon: 'Plus',\n      action: 'addresses'\n    }\n  ];\n\n  const stats = [\n    {\n      label: 'Total Orders',\n      value: user?.totalOrders || 0,\n      icon: 'Package',\n      color: 'text-primary'\n    },\n    {\n      label: 'Total Spent',\n      value: `‚Çπ${user?.totalSpent || 0}`,\n      icon: 'CreditCard',\n      color: 'text-primary'\n    },\n    {\n      label: 'Total Saved',\n      value: `‚Çπ${user?.totalSaved || 0}`,\n      icon: 'Wallet',\n      color: 'text-success'\n    },\n    {\n      label: 'Cart Items',\n      value: user?.cartItemCount || 0,\n      icon: 'ShoppingCart',\n      color: 'text-accent'\n    },\n    {\n      label: 'Loyalty Points',\n      value: loyaltyPoints || 0,\n      icon: 'Star',\n      color: 'text-warning'\n    },\n    {\n      label: 'Wishlist Items',\n      value: user?.wishlistCount || 0,\n      icon: 'Heart',\n      color: 'text-destructive'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Welcome Section */}\n      <div className=\"bg-gradient-to-r from-primary/10 to-accent/10 rounded-lg p-6\">\n        <h1 className=\"font-heading text-2xl font-bold text-foreground mb-2\">\n          Welcome back, {user?.name?.split(' ')?.[0]}!\n        </h1>\n        <p className=\"font-body text-muted-foreground\">\n          Manage your orders, profile, and preferences from your dashboard.\n        </p>\n      </div>\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n        {stats?.map((stat, index) => (\n          <div key={index} className=\"bg-card border border-border rounded-lg p-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <Icon name={stat?.icon} size={20} className={stat?.color} />\n              <span className=\"font-data text-lg font-bold text-foreground\">\n                {stat?.value}\n              </span>\n            </div>\n            <p className=\"font-caption text-sm text-muted-foreground\">\n              {stat?.label}\n            </p>\n          </div>\n        ))}\n      </div>\n      {/* Quick Actions */}\n      <div>\n        <h2 className=\"font-heading text-lg font-semibold text-foreground mb-4\">\n          Quick Actions\n        </h2>\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n          {quickActions?.map((action, index) => (\n            <button\n              key={index}\n              className=\"bg-card border border-border rounded-lg p-4 hover:shadow-warm-md transition-shadow duration-200 text-left\"\n            >\n              <div className=\"flex items-center space-x-3 mb-2\">\n                <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Icon name={action?.icon} size={16} className=\"text-primary\" />\n                </div>\n                <h3 className=\"font-body font-medium text-foreground\">\n                  {action?.title}\n                </h3>\n              </div>\n              <p className=\"font-caption text-sm text-muted-foreground\">\n                {action?.description}\n              </p>\n            </button>\n          ))}\n        </div>\n      </div>\n      {/* Recent Orders */}\n      <div>\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"font-heading text-lg font-semibold text-foreground\">\n            Recent Orders\n          </h2>\n          <Button variant=\"outline\" size=\"sm\">\n            View All Orders\n          </Button>\n        </div>\n        <div className=\"space-y-3\">\n          {recentOrders?.slice(0, 3)?.map((order) => (\n            <div key={order?.id} className=\"bg-card border border-border rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-muted rounded-lg overflow-hidden\">\n                    <img\n                      src={order?.items?.[0]?.image}\n                      alt={order?.items?.[0]?.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                  <div>\n                    <p className=\"font-body font-medium text-foreground\">\n                      Order #{order?.orderNumber}\n                    </p>\n                    <p className=\"font-caption text-sm text-muted-foreground\">\n                      {order?.date} ‚Ä¢ {order?.items?.length} items\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-data font-semibold text-foreground\">\n                    ‚Çπ{order?.total?.toFixed(2)}\n                  </p>\n                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-caption font-medium ${\n                    order?.status === 'Delivered' ?'bg-success/10 text-success'\n                      : order?.status === 'Shipped' ?'bg-primary/10 text-primary' :'bg-warning/10 text-warning'\n                  }`}>\n                    {order?.status}\n                  </span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <p className=\"font-caption text-sm text-muted-foreground\">\n                  {order?.items?.[0]?.name}\n                  {order?.items?.length > 1 && ` +${order?.items?.length - 1} more`}\n                </p>\n                <Button variant=\"outline\" size=\"sm\">\n                  Track Order\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardOverview;","size_bytes":6300},"src/pages/user-account-dashboard/components/DashboardSidebar.jsx":{"content":"import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\n\nconst DashboardSidebar = ({ user, onSectionChange, activeSection }) => {\n  const location = useLocation();\n\n  const menuItems = [\n    {\n      id: 'overview',\n      label: 'Dashboard',\n      icon: 'LayoutDashboard',\n      description: 'Account overview'\n    },\n    {\n      id: 'orders',\n      label: 'My Orders',\n      icon: 'Package',\n      description: 'Order history & tracking'\n    },\n    {\n      id: 'profile',\n      label: 'Profile',\n      icon: 'User',\n      description: 'Personal information'\n    },\n    {\n      id: 'addresses',\n      label: 'Address Book',\n      icon: 'MapPin',\n      description: 'Shipping addresses'\n    },\n    {\n      id: 'wishlist',\n      label: 'Wishlist',\n      icon: 'Heart',\n      description: 'Saved products'\n    },\n    {\n      id: 'preferences',\n      label: 'Preferences',\n      icon: 'Settings',\n      description: 'Notifications & settings'\n    }\n  ];\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6 h-fit sticky top-24\">\n      {/* User Info */}\n      <div className=\"flex items-center space-x-3 mb-6 pb-6 border-b border-border\">\n        <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n          <Icon name=\"User\" size={24} className=\"text-primary\" />\n        </div>\n        <div>\n          <h3 className=\"font-heading font-semibold text-foreground\">\n            {user?.name}\n          </h3>\n          <p className=\"font-body text-sm text-muted-foreground\">\n            {user?.email}\n          </p>\n        </div>\n      </div>\n      {/* Navigation Menu */}\n      <nav className=\"space-y-2\">\n        {menuItems?.map((item) => (\n          <button\n            key={item?.id}\n            onClick={() => onSectionChange(item?.id)}\n            className={`w-full flex items-center space-x-3 p-3 rounded-lg transition-colors duration-200 text-left ${\n              activeSection === item?.id\n                ? 'bg-primary text-primary-foreground'\n                : 'hover:bg-muted text-foreground'\n            }`}\n          >\n            <Icon \n              name={item?.icon} \n              size={20} \n              className={activeSection === item?.id ? 'text-primary-foreground' : 'text-muted-foreground'}\n            />\n            <div>\n              <div className={`font-body font-medium ${\n                activeSection === item?.id ? 'text-primary-foreground' : 'text-foreground'\n              }`}>\n                {item?.label}\n              </div>\n              <div className={`font-caption text-xs ${\n                activeSection === item?.id ? 'text-primary-foreground/80' : 'text-muted-foreground'\n              }`}>\n                {item?.description}\n              </div>\n            </div>\n          </button>\n        ))}\n      </nav>\n      {/* Logout Button */}\n      <div className=\"mt-6 pt-6 border-t border-border\">\n        <Link\n          to=\"/homepage\"\n          className=\"w-full flex items-center space-x-3 p-3 rounded-lg text-destructive hover:bg-destructive/10 transition-colors duration-200\"\n        >\n          <Icon name=\"LogOut\" size={20} />\n          <span className=\"font-body font-medium\">Logout</span>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardSidebar;","size_bytes":3353},"src/pages/user-account-dashboard/components/OrderHistory.jsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Image from '../../../components/AppImage';\nimport { downloadInvoice, printInvoice } from '../../../utils/invoiceGenerator';\nimport dataService from '../../../services/dataService';\n\nconst OrderHistory = ({ orders }) => {\n  const { user } = useAuth();\n  const [expandedOrder, setExpandedOrder] = useState(null);\n  const [filterStatus, setFilterStatus] = useState('all');\n\n  const statusOptions = [\n    { value: 'all', label: 'All Orders' },\n    { value: 'Processing', label: 'Processing' },\n    { value: 'Shipped', label: 'Shipped' },\n    { value: 'Delivered', label: 'Delivered' },\n    { value: 'Cancelled', label: 'Cancelled' }\n  ];\n\n  const filteredOrders = filterStatus === 'all' \n    ? orders \n    : orders?.filter(order => order?.status === filterStatus);\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'Delivered':\n        return 'bg-success/10 text-success border-success/20';\n      case 'Shipped':\n        return 'bg-primary/10 text-primary border-primary/20';\n      case 'Processing':\n        return 'bg-warning/10 text-warning border-warning/20';\n      case 'Cancelled':\n        return 'bg-destructive/10 text-destructive border-destructive/20';\n      default:\n        return 'bg-muted/10 text-muted-foreground border-muted/20';\n    }\n  };\n\n  const toggleOrderExpansion = (orderId) => {\n    setExpandedOrder(expandedOrder === orderId ? null : orderId);\n  };\n\n  const handleDownloadInvoice = (order) => {\n    try {\n      const settings = dataService.getSettings();\n      downloadInvoice(order, user, settings);\n    } catch (error) {\n      console.error('Error downloading invoice:', error);\n      alert('Failed to download invoice. Please try again.');\n    }\n  };\n\n  const handlePrintInvoice = (order) => {\n    try {\n      const settings = dataService.getSettings();\n      printInvoice(order, user, settings);\n    } catch (error) {\n      console.error('Error printing invoice:', error);\n      alert('Failed to print invoice. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <h1 className=\"font-heading text-2xl font-bold text-foreground\">\n          Order History\n        </h1>\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Filter\" size={16} className=\"text-muted-foreground\" />\n          <select\n            value={filterStatus}\n            onChange={(e) => setFilterStatus(e?.target?.value)}\n            className=\"font-body text-sm border border-border rounded-lg px-3 py-2 bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary\"\n          >\n            {statusOptions?.map((option) => (\n              <option key={option?.value} value={option?.value}>\n                {option?.label}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      {/* Orders List */}\n      <div className=\"space-y-4\">\n        {filteredOrders?.length === 0 ? (\n          <div className=\"text-center py-12 bg-card border border-border rounded-lg\">\n            <Icon name=\"Package\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"font-heading font-semibold text-foreground mb-2\">\n              No orders found\n            </h3>\n            <p className=\"font-body text-muted-foreground mb-4\">\n              {filterStatus === 'all' ? \"You haven't placed any orders yet.\" : `No orders with status\"${filterStatus}\" found.`\n              }\n            </p>\n            <Button variant=\"default\">\n              Start Shopping\n            </Button>\n          </div>\n        ) : (\n          filteredOrders?.map((order) => (\n            <div key={order?.id} className=\"bg-card border border-border rounded-lg overflow-hidden\">\n              {/* Order Header */}\n              <div className=\"p-4 border-b border-border\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <h3 className=\"font-body font-semibold text-foreground\">\n                        Order #{order?.orderNumber}\n                      </h3>\n                      <p className=\"font-caption text-sm text-muted-foreground\">\n                        Placed on {order?.createdAt ? new Date(order.createdAt).toLocaleDateString() : order?.date} ‚Ä¢ {order?.items?.length} items\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-right\">\n                      <p className=\"font-data font-semibold text-foreground\">\n                        ‚Çπ{order?.total?.toFixed(2)}\n                      </p>\n                      <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-caption font-medium border ${getStatusColor(order?.status)}`}>\n                        {order?.status}\n                      </span>\n                    </div>\n                    <button\n                      onClick={() => toggleOrderExpansion(order?.id)}\n                      className=\"p-2 hover:bg-muted rounded-full transition-colors duration-200\"\n                    >\n                      <Icon \n                        name={expandedOrder === order?.id ? \"ChevronUp\" : \"ChevronDown\"} \n                        size={20} \n                        className=\"text-muted-foreground\"\n                      />\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Order Details */}\n              {expandedOrder === order?.id && (\n                <div className=\"p-4 space-y-4\">\n                  {/* Items */}\n                  <div>\n                    <h4 className=\"font-body font-medium text-foreground mb-3\">\n                      Order Items\n                    </h4>\n                    <div className=\"space-y-3\">\n                      {order?.items?.map((item, index) => (\n                        <div key={index} className=\"flex items-center space-x-3 p-3 bg-muted/30 rounded-lg\">\n                          <div className=\"w-12 h-12 rounded-lg overflow-hidden flex-shrink-0\">\n                            <Image\n                              src={item?.image}\n                              alt={item?.name}\n                              className=\"w-full h-full object-cover\"\n                            />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h5 className=\"font-body font-medium text-foreground truncate\">\n                              {item?.name}\n                            </h5>\n                            <p className=\"font-caption text-sm text-muted-foreground\">\n                              {item?.variant} ‚Ä¢ Qty: {item?.quantity}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-data font-semibold text-foreground\">\n                              ‚Çπ{(item?.price * item?.quantity)?.toFixed(2)}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Shipping Info */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <h4 className=\"font-body font-medium text-foreground mb-2\">\n                        Shipping Address\n                      </h4>\n                      <div className=\"bg-muted/30 rounded-lg p-3\">\n                        <p className=\"font-body text-sm text-foreground\">\n                          {order?.shippingAddress?.name}\n                        </p>\n                        <p className=\"font-caption text-sm text-muted-foreground\">\n                          {order?.shippingAddress?.street}\n                        </p>\n                        <p className=\"font-caption text-sm text-muted-foreground\">\n                          {order?.shippingAddress?.city}, {order?.shippingAddress?.state} {order?.shippingAddress?.pincode}\n                        </p>\n                        <p className=\"font-caption text-sm text-muted-foreground\">\n                          {order?.shippingAddress?.phone}\n                        </p>\n                      </div>\n                    </div>\n                    <div>\n                      <h4 className=\"font-body font-medium text-foreground mb-2\">\n                        Order Summary\n                      </h4>\n                      <div className=\"bg-muted/30 rounded-lg p-3 space-y-2\">\n                        <div className=\"flex justify-between font-caption text-sm\">\n                          <span className=\"text-muted-foreground\">Subtotal</span>\n                          <span className=\"font-data\">‚Çπ{order?.subtotal?.toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between font-caption text-sm\">\n                          <span className=\"text-muted-foreground\">Shipping</span>\n                          <span className=\"font-data\">\n                            {order?.shipping === 0 ? 'Free' : `‚Çπ${order?.shipping?.toFixed(2)}`}\n                          </span>\n                        </div>\n                        {order?.discount > 0 && (\n                          <div className=\"flex justify-between font-caption text-sm\">\n                            <span className=\"text-muted-foreground\">Discount</span>\n                            <span className=\"font-data text-success\">-‚Çπ{order?.discount?.toFixed(2)}</span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between font-body font-semibold pt-2 border-t border-border\">\n                          <span>Total</span>\n                          <span className=\"font-data\">‚Çπ{order?.total?.toFixed(2)}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Tracking Info */}\n                  {order?.trackingNumber && (\n                    <div>\n                      <h4 className=\"font-body font-medium text-foreground mb-2\">\n                        Tracking Information\n                      </h4>\n                      <div className=\"bg-muted/30 rounded-lg p-3\">\n                        <p className=\"font-caption text-sm text-muted-foreground mb-1\">\n                          Tracking Number\n                        </p>\n                        <p className=\"font-data font-medium text-foreground\">\n                          {order?.trackingNumber}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Action Buttons */}\n                  <div className=\"flex flex-wrap gap-2 pt-2\">\n                    {order?.status === 'Delivered' && (\n                      <Button variant=\"default\" size=\"sm\">\n                        Reorder\n                      </Button>\n                    )}\n                    {(order?.status === 'Processing' || order?.status === 'Shipped') && (\n                      <Button variant=\"outline\" size=\"sm\">\n                        Track Order\n                      </Button>\n                    )}\n                    {order?.status === 'Processing' && (\n                      <Button variant=\"destructive\" size=\"sm\">\n                        Cancel Order\n                      </Button>\n                    )}\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleDownloadInvoice(order)}\n                    >\n                      Download Invoice\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handlePrintInvoice(order)}\n                    >\n                      Print Invoice\n                    </Button>\n                    {order?.status === 'Delivered' && (\n                      <Button variant=\"outline\" size=\"sm\">\n                        Return/Exchange\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default OrderHistory;","size_bytes":12814},"src/pages/user-account-dashboard/components/PreferencesSection.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst PreferencesSection = ({ preferences, onUpdatePreferences }) => {\n  const [formData, setFormData] = useState({\n    emailNotifications: {\n      orderUpdates: preferences?.emailNotifications?.orderUpdates ?? true,\n      promotions: preferences?.emailNotifications?.promotions ?? true,\n      newsletter: preferences?.emailNotifications?.newsletter ?? false,\n      productRecommendations: preferences?.emailNotifications?.productRecommendations ?? false,\n      priceDropAlerts: preferences?.emailNotifications?.priceDropAlerts ?? false\n    },\n    smsNotifications: {\n      orderUpdates: preferences?.smsNotifications?.orderUpdates ?? true,\n      deliveryUpdates: preferences?.smsNotifications?.deliveryUpdates ?? true,\n      promotions: preferences?.smsNotifications?.promotions ?? false\n    },\n    privacy: {\n      profileVisibility: preferences?.privacy?.profileVisibility ?? 'private',\n      dataSharing: preferences?.privacy?.dataSharing ?? false,\n      marketingCommunication: preferences?.privacy?.marketingCommunication ?? false\n    },\n    shopping: {\n      currency: preferences?.shopping?.currency ?? 'INR',\n      language: preferences?.shopping?.language ?? 'English',\n      defaultPaymentMethod: preferences?.shopping?.defaultPaymentMethod ?? 'COD',\n      savePaymentMethods: preferences?.shopping?.savePaymentMethods ?? false\n    }\n  });\n\n  const [hasChanges, setHasChanges] = useState(false);\n\n  const handleEmailNotificationChange = (key, value) => {\n    setFormData(prev => ({\n      ...prev,\n      emailNotifications: {\n        ...prev?.emailNotifications,\n        [key]: value\n      }\n    }));\n    setHasChanges(true);\n  };\n\n  const handleSmsNotificationChange = (key, value) => {\n    setFormData(prev => ({\n      ...prev,\n      smsNotifications: {\n        ...prev?.smsNotifications,\n        [key]: value\n      }\n    }));\n    setHasChanges(true);\n  };\n\n  const handlePrivacyChange = (key, value) => {\n    setFormData(prev => ({\n      ...prev,\n      privacy: {\n        ...prev?.privacy,\n        [key]: value\n      }\n    }));\n    setHasChanges(true);\n  };\n\n  const handleShoppingChange = (key, value) => {\n    setFormData(prev => ({\n      ...prev,\n      shopping: {\n        ...prev?.shopping,\n        [key]: value\n      }\n    }));\n    setHasChanges(true);\n  };\n\n  const handleSavePreferences = () => {\n    onUpdatePreferences(formData);\n    setHasChanges(false);\n  };\n\n  const handleResetPreferences = () => {\n    setFormData({\n      emailNotifications: {\n        orderUpdates: preferences?.emailNotifications?.orderUpdates ?? true,\n        promotions: preferences?.emailNotifications?.promotions ?? true,\n        newsletter: preferences?.emailNotifications?.newsletter ?? false,\n        productRecommendations: preferences?.emailNotifications?.productRecommendations ?? false,\n        priceDropAlerts: preferences?.emailNotifications?.priceDropAlerts ?? false\n      },\n      smsNotifications: {\n        orderUpdates: preferences?.smsNotifications?.orderUpdates ?? true,\n        deliveryUpdates: preferences?.smsNotifications?.deliveryUpdates ?? true,\n        promotions: preferences?.smsNotifications?.promotions ?? false\n      },\n      privacy: {\n        profileVisibility: preferences?.privacy?.profileVisibility ?? 'private',\n        dataSharing: preferences?.privacy?.dataSharing ?? false,\n        marketingCommunication: preferences?.privacy?.marketingCommunication ?? false\n      },\n      shopping: {\n        currency: preferences?.shopping?.currency ?? 'INR',\n        language: preferences?.shopping?.language ?? 'English',\n        defaultPaymentMethod: preferences?.shopping?.defaultPaymentMethod ?? 'COD',\n        savePaymentMethods: preferences?.shopping?.savePaymentMethods ?? false\n      }\n    });\n    setHasChanges(false);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"font-heading text-2xl font-bold text-foreground\">\n          Preferences & Settings\n        </h1>\n        {hasChanges && (\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleResetPreferences}\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"default\"\n              size=\"sm\"\n              onClick={handleSavePreferences}\n            >\n              Save Changes\n            </Button>\n          </div>\n        )}\n      </div>\n      {/* Email Notifications */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Icon name=\"Mail\" size={20} className=\"text-primary\" />\n          <h3 className=\"font-heading text-lg font-semibold text-foreground\">\n            Email Notifications\n          </h3>\n        </div>\n        <div className=\"space-y-4\">\n          <Checkbox\n            label=\"Order Updates\"\n            description=\"Receive emails about order confirmations, shipping, and delivery\"\n            checked={formData?.emailNotifications?.orderUpdates}\n            onChange={(e) => handleEmailNotificationChange('orderUpdates', e?.target?.checked)}\n          />\n          <Checkbox\n            label=\"Promotions & Offers\"\n            description=\"Get notified about special deals, discounts, and seasonal offers\"\n            checked={formData?.emailNotifications?.promotions}\n            onChange={(e) => handleEmailNotificationChange('promotions', e?.target?.checked)}\n          />\n          <Checkbox\n            label=\"Newsletter\"\n            description=\"Weekly newsletter with recipes, tips, and product highlights\"\n            checked={formData?.emailNotifications?.newsletter}\n            onChange={(e) => handleEmailNotificationChange('newsletter', e?.target?.checked)}\n          />\n          <Checkbox\n            label=\"Product Recommendations\"\n            description=\"Personalized product suggestions based on your preferences\"\n            checked={formData?.emailNotifications?.productRecommendations}\n            onChange={(e) => handleEmailNotificationChange('productRecommendations', e?.target?.checked)}\n          />\n          <Checkbox\n            label=\"Price Drop Alerts\"\n            description=\"Get notified when items in your wishlist go on sale\"\n            checked={formData?.emailNotifications?.priceDropAlerts}\n            onChange={(e) => handleEmailNotificationChange('priceDropAlerts', e?.target?.checked)}\n          />\n        </div>\n      </div>\n      {/* SMS Notifications */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Icon name=\"MessageSquare\" size={20} className=\"text-primary\" />\n          <h3 className=\"font-heading text-lg font-semibold text-foreground\">\n            SMS Notifications\n          </h3>\n        </div>\n        <div className=\"space-y-4\">\n          <Checkbox\n            label=\"Order Updates\"\n            description=\"SMS alerts for order confirmations and important updates\"\n            checked={formData?.smsNotifications?.orderUpdates}\n            onChange={(e) => handleSmsNotificationChange('orderUpdates', e?.target?.checked)}\n          />\n          <Checkbox\n            label=\"Delivery Updates\"\n            description=\"Real-time SMS updates about your delivery status\"\n            checked={formData?.smsNotifications?.deliveryUpdates}\n            onChange={(e) => handleSmsNotificationChange('deliveryUpdates', e?.target?.checked)}\n          />\n          <Checkbox\n            label=\"Promotional SMS\"\n            description=\"Receive SMS about flash sales and limited-time offers\"\n            checked={formData?.smsNotifications?.promotions}\n            onChange={(e) => handleSmsNotificationChange('promotions', e?.target?.checked)}\n          />\n        </div>\n      </div>\n      {/* Privacy Settings */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Icon name=\"Shield\" size={20} className=\"text-primary\" />\n          <h3 className=\"font-heading text-lg font-semibold text-foreground\">\n            Privacy Settings\n          </h3>\n        </div>\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block font-body font-medium text-foreground mb-2\">\n              Profile Visibility\n            </label>\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"radio\"\n                  name=\"profileVisibility\"\n                  value=\"public\"\n                  checked={formData?.privacy?.profileVisibility === 'public'}\n                  onChange={(e) => handlePrivacyChange('profileVisibility', e?.target?.value)}\n                  className=\"w-4 h-4 text-primary border-border focus:ring-primary\"\n                />\n                <span className=\"font-body text-sm text-foreground\">Public</span>\n              </label>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"radio\"\n                  name=\"profileVisibility\"\n                  value=\"private\"\n                  checked={formData?.privacy?.profileVisibility === 'private'}\n                  onChange={(e) => handlePrivacyChange('profileVisibility', e?.target?.value)}\n                  className=\"w-4 h-4 text-primary border-border focus:ring-primary\"\n                />\n                <span className=\"font-body text-sm text-foreground\">Private</span>\n              </label>\n            </div>\n          </div>\n          <Checkbox\n            label=\"Data Sharing\"\n            description=\"Allow sharing anonymized data for product improvement\"\n            checked={formData?.privacy?.dataSharing}\n            onChange={(e) => handlePrivacyChange('dataSharing', e?.target?.checked)}\n          />\n          <Checkbox\n            label=\"Marketing Communication\"\n            description=\"Allow third-party partners to send relevant offers\"\n            checked={formData?.privacy?.marketingCommunication}\n            onChange={(e) => handlePrivacyChange('marketingCommunication', e?.target?.checked)}\n          />\n        </div>\n      </div>\n      {/* Shopping Preferences */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Icon name=\"ShoppingBag\" size={20} className=\"text-primary\" />\n          <h3 className=\"font-heading text-lg font-semibold text-foreground\">\n            Shopping Preferences\n          </h3>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block font-body font-medium text-foreground mb-2\">\n              Currency\n            </label>\n            <select\n              value={formData?.shopping?.currency}\n              onChange={(e) => handleShoppingChange('currency', e?.target?.value)}\n              className=\"w-full font-body text-sm border border-border rounded-lg px-3 py-2 bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary\"\n            >\n              <option value=\"INR\">Indian Rupee (‚Çπ)</option>\n              <option value=\"USD\">US Dollar ($)</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block font-body font-medium text-foreground mb-2\">\n              Language\n            </label>\n            <select\n              value={formData?.shopping?.language}\n              onChange={(e) => handleShoppingChange('language', e?.target?.value)}\n              className=\"w-full font-body text-sm border border-border rounded-lg px-3 py-2 bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary\"\n            >\n              <option value=\"English\">English</option>\n              <option value=\"Hindi\">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>\n              <option value=\"Tamil\">‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç</option>\n              <option value=\"Telugu\">‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block font-body font-medium text-foreground mb-2\">\n              Default Payment Method\n            </label>\n            <select\n              value={formData?.shopping?.defaultPaymentMethod}\n              onChange={(e) => handleShoppingChange('defaultPaymentMethod', e?.target?.value)}\n              className=\"w-full font-body text-sm border border-border rounded-lg px-3 py-2 bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary\"\n            >\n              <option value=\"COD\">Cash on Delivery</option>\n              <option value=\"UPI\">UPI</option>\n              <option value=\"Card\">Credit/Debit Card</option>\n              <option value=\"NetBanking\">Net Banking</option>\n            </select>\n          </div>\n          <div className=\"flex items-center\">\n            <Checkbox\n              label=\"Save Payment Methods\"\n              description=\"Securely save payment methods for faster checkout\"\n              checked={formData?.shopping?.savePaymentMethods}\n              onChange={(e) => handleShoppingChange('savePaymentMethods', e?.target?.checked)}\n            />\n          </div>\n        </div>\n      </div>\n      {/* Account Actions */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Icon name=\"Settings\" size={20} className=\"text-primary\" />\n          <h3 className=\"font-heading text-lg font-semibold text-foreground\">\n            Account Actions\n          </h3>\n        </div>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg\">\n            <div>\n              <h4 className=\"font-body font-medium text-foreground\">\n                Download Account Data\n              </h4>\n              <p className=\"font-caption text-sm text-muted-foreground\">\n                Get a copy of all your account information and order history\n              </p>\n            </div>\n            <Button variant=\"outline\" size=\"sm\">\n              Download\n            </Button>\n          </div>\n          <div className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg\">\n            <div>\n              <h4 className=\"font-body font-medium text-foreground\">\n                Delete Account\n              </h4>\n              <p className=\"font-caption text-sm text-muted-foreground\">\n                Permanently delete your account and all associated data\n              </p>\n            </div>\n            <Button variant=\"destructive\" size=\"sm\">\n              Delete Account\n            </Button>\n          </div>\n        </div>\n      </div>\n      {/* Save Changes Button - Mobile */}\n      {hasChanges && (\n        <div className=\"sticky bottom-4 bg-background border border-border rounded-lg p-4 shadow-warm-lg md:hidden\">\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={handleResetPreferences}\n              fullWidth\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"default\"\n              onClick={handleSavePreferences}\n              fullWidth\n            >\n              Save Changes\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PreferencesSection;","size_bytes":15691},"src/pages/user-account-dashboard/components/ProfileManagement.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nconst ProfileManagement = ({ user, onUpdateProfile }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [isChangingPassword, setIsChangingPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    name: user?.name,\n    email: user?.email,\n    phone: user?.phone,\n    dateOfBirth: user?.dateOfBirth || '',\n    gender: user?.gender || ''\n  });\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n  const [errors, setErrors] = useState({});\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    if (errors?.[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ''\n      }));\n    }\n  };\n\n  const handlePasswordChange = (field, value) => {\n    setPasswordData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    if (errors?.[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ''\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData?.name?.trim()) {\n      newErrors.name = 'Name is required';\n    }\n    \n    if (!formData?.email?.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/?.test(formData?.email)) {\n      newErrors.email = 'Please enter a valid email';\n    }\n    \n    if (!formData?.phone?.trim()) {\n      newErrors.phone = 'Phone number is required';\n    } else if (!/^\\d{10}$/?.test(formData?.phone?.replace(/\\D/g, ''))) {\n      newErrors.phone = 'Please enter a valid 10-digit phone number';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors)?.length === 0;\n  };\n\n  const validatePasswordForm = () => {\n    const newErrors = {};\n    \n    if (!passwordData?.currentPassword) {\n      newErrors.currentPassword = 'Current password is required';\n    }\n    \n    if (!passwordData?.newPassword) {\n      newErrors.newPassword = 'New password is required';\n    } else if (passwordData?.newPassword?.length < 8) {\n      newErrors.newPassword = 'Password must be at least 8 characters';\n    }\n    \n    if (passwordData?.newPassword !== passwordData?.confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors)?.length === 0;\n  };\n\n  const handleSaveProfile = () => {\n    if (validateForm()) {\n      onUpdateProfile(formData);\n      setIsEditing(false);\n    }\n  };\n\n  const handleChangePassword = () => {\n    if (validatePasswordForm()) {\n      // Handle password change\n      console.log('Password change requested');\n      setIsChangingPassword(false);\n      setPasswordData({\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      });\n    }\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      name: user?.name,\n      email: user?.email,\n      phone: user?.phone,\n      dateOfBirth: user?.dateOfBirth || '',\n      gender: user?.gender || ''\n    });\n    setIsEditing(false);\n    setIsChangingPassword(false);\n    setErrors({});\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"font-heading text-2xl font-bold text-foreground\">\n          Profile Management\n        </h1>\n        {!isEditing && !isChangingPassword && (\n          <Button\n            variant=\"outline\"\n            onClick={() => setIsEditing(true)}\n            iconName=\"Edit\"\n            iconPosition=\"left\"\n          >\n            Edit Profile\n          </Button>\n        )}\n      </div>\n      {/* Profile Information */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <div className=\"flex items-center space-x-4 mb-6\">\n          <div className=\"w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center\">\n            <Icon name=\"User\" size={32} className=\"text-primary\" />\n          </div>\n          <div>\n            <h2 className=\"font-heading text-xl font-semibold text-foreground\">\n              {user?.name}\n            </h2>\n            <p className=\"font-body text-muted-foreground\">\n              Member since {user?.memberSince}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Input\n            label=\"Full Name\"\n            type=\"text\"\n            value={formData?.name}\n            onChange={(e) => handleInputChange('name', e?.target?.value)}\n            disabled={!isEditing}\n            error={errors?.name}\n            required\n          />\n\n          <Input\n            label=\"Email Address\"\n            type=\"email\"\n            value={formData?.email}\n            onChange={(e) => handleInputChange('email', e?.target?.value)}\n            disabled={!isEditing}\n            error={errors?.email}\n            required\n          />\n\n          <Input\n            label=\"Phone Number\"\n            type=\"tel\"\n            value={formData?.phone}\n            onChange={(e) => handleInputChange('phone', e?.target?.value)}\n            disabled={!isEditing}\n            error={errors?.phone}\n            required\n          />\n\n          <Input\n            label=\"Date of Birth\"\n            type=\"date\"\n            value={formData?.dateOfBirth}\n            onChange={(e) => handleInputChange('dateOfBirth', e?.target?.value)}\n            disabled={!isEditing}\n          />\n\n          <div className=\"md:col-span-2\">\n            <label className=\"block font-body font-medium text-foreground mb-2\">\n              Gender\n            </label>\n            <div className=\"flex space-x-4\">\n              {['Male', 'Female', 'Other']?.map((option) => (\n                <label key={option} className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"radio\"\n                    name=\"gender\"\n                    value={option}\n                    checked={formData?.gender === option}\n                    onChange={(e) => handleInputChange('gender', e?.target?.value)}\n                    disabled={!isEditing}\n                    className=\"w-4 h-4 text-primary border-border focus:ring-primary\"\n                  />\n                  <span className=\"font-body text-sm text-foreground\">\n                    {option}\n                  </span>\n                </label>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {isEditing && (\n          <div className=\"flex space-x-3 mt-6 pt-6 border-t border-border\">\n            <Button\n              variant=\"default\"\n              onClick={handleSaveProfile}\n            >\n              Save Changes\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleCancel}\n            >\n              Cancel\n            </Button>\n          </div>\n        )}\n      </div>\n      {/* Password Change Section */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"font-heading text-lg font-semibold text-foreground\">\n            Password & Security\n          </h3>\n          {!isChangingPassword && !isEditing && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsChangingPassword(true)}\n            >\n              Change Password\n            </Button>\n          )}\n        </div>\n\n        {isChangingPassword ? (\n          <div className=\"space-y-4\">\n            <Input\n              label=\"Current Password\"\n              type=\"password\"\n              value={passwordData?.currentPassword}\n              onChange={(e) => handlePasswordChange('currentPassword', e?.target?.value)}\n              error={errors?.currentPassword}\n              required\n            />\n\n            <Input\n              label=\"New Password\"\n              type=\"password\"\n              value={passwordData?.newPassword}\n              onChange={(e) => handlePasswordChange('newPassword', e?.target?.value)}\n              error={errors?.newPassword}\n              description=\"Password must be at least 8 characters long\"\n              required\n            />\n\n            <Input\n              label=\"Confirm New Password\"\n              type=\"password\"\n              value={passwordData?.confirmPassword}\n              onChange={(e) => handlePasswordChange('confirmPassword', e?.target?.value)}\n              error={errors?.confirmPassword}\n              required\n            />\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                variant=\"default\"\n                onClick={handleChangePassword}\n              >\n                Update Password\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={handleCancel}\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-muted-foreground\">\n            <p className=\"font-body text-sm\">\n              Last password change: {user?.lastPasswordChange || 'Never'}\n            </p>\n          </div>\n        )}\n      </div>\n      {/* Account Statistics */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"font-heading text-lg font-semibold text-foreground mb-4\">\n          Account Statistics\n        </h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"font-data text-2xl font-bold text-primary\">\n              {user?.totalOrders}\n            </div>\n            <div className=\"font-caption text-sm text-muted-foreground\">\n              Total Orders\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"font-data text-2xl font-bold text-success\">\n              ‚Çπ{user?.totalSpent}\n            </div>\n            <div className=\"font-caption text-sm text-muted-foreground\">\n              Total Spent\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"font-data text-2xl font-bold text-warning\">\n              {user?.loyaltyPoints}\n            </div>\n            <div className=\"font-caption text-sm text-muted-foreground\">\n              Loyalty Points\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"font-data text-2xl font-bold text-destructive\">\n              ‚Çπ{user?.totalSaved}\n            </div>\n            <div className=\"font-caption text-sm text-muted-foreground\">\n              Total Saved\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileManagement;","size_bytes":10940},"src/pages/user-account-dashboard/components/WishlistSection.jsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Image from '../../../components/AppImage';\n\nconst WishlistSection = ({ wishlistItems, onRemoveFromWishlist, onAddToCart }) => {\n  const [sortBy, setSortBy] = useState('recent');\n\n  const sortOptions = [\n    { value: 'recent', label: 'Recently Added' },\n    { value: 'name', label: 'Name A-Z' },\n    { value: 'price-low', label: 'Price: Low to High' },\n    { value: 'price-high', label: 'Price: High to Low' }\n  ];\n\n  const sortedItems = [...wishlistItems]?.sort((a, b) => {\n    switch (sortBy) {\n      case 'name':\n        return a?.name?.localeCompare(b?.name);\n      case 'price-low':\n        return a?.price - b?.price;\n      case 'price-high':\n        return b?.price - a?.price;\n      case 'recent':\n      default:\n        return new Date(b.addedDate) - new Date(a.addedDate);\n    }\n  });\n\n  const handleAddToCart = (item) => {\n    onAddToCart({\n      id: item?.id,\n      name: item?.name,\n      price: item?.price,\n      image: item?.image,\n      variant: item?.selectedVariant || item?.variants?.[0],\n      quantity: 1\n    });\n  };\n\n  const calculateDiscount = (originalPrice, salePrice) => {\n    return Math.round(((originalPrice - salePrice) / originalPrice) * 100);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <h1 className=\"font-heading text-2xl font-bold text-foreground\">\n          My Wishlist ({wishlistItems?.length})\n        </h1>\n        {wishlistItems?.length > 0 && (\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"ArrowUpDown\" size={16} className=\"text-muted-foreground\" />\n            <select\n              value={sortBy}\n              onChange={(e) => setSortBy(e?.target?.value)}\n              className=\"font-body text-sm border border-border rounded-lg px-3 py-2 bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary\"\n            >\n              {sortOptions?.map((option) => (\n                <option key={option?.value} value={option?.value}>\n                  {option?.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        )}\n      </div>\n      {/* Wishlist Items */}\n      {wishlistItems?.length === 0 ? (\n        <div className=\"text-center py-12 bg-card border border-border rounded-lg\">\n          <Icon name=\"Heart\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"font-heading font-semibold text-foreground mb-2\">\n            Your wishlist is empty\n          </h3>\n          <p className=\"font-body text-muted-foreground mb-4\">\n            Save your favorite products to buy them later.\n          </p>\n          <Link to=\"/product-collection-grid\">\n            <Button variant=\"default\">\n              Start Shopping\n            </Button>\n          </Link>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {sortedItems?.map((item) => (\n            <div key={item?.id} className=\"bg-card border border-border rounded-lg overflow-hidden hover:shadow-warm-md transition-shadow duration-200\">\n              {/* Product Image */}\n              <div className=\"relative aspect-square overflow-hidden\">\n                <Image\n                  src={item?.image}\n                  alt={item?.name}\n                  className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-300\"\n                />\n                \n                {/* Badges */}\n                <div className=\"absolute top-2 left-2 flex flex-col space-y-1\">\n                  {item?.originalPrice > item?.price && (\n                    <span className=\"bg-destructive text-destructive-foreground text-xs font-caption font-bold px-2 py-1 rounded\">\n                      {calculateDiscount(item?.originalPrice, item?.price)}% OFF\n                    </span>\n                  )}\n                  {item?.badges?.map((badge, index) => (\n                    <span\n                      key={index}\n                      className=\"bg-success text-success-foreground text-xs font-caption font-medium px-2 py-1 rounded\"\n                    >\n                      {badge}\n                    </span>\n                  ))}\n                </div>\n\n                {/* Remove from Wishlist */}\n                <button\n                  onClick={() => onRemoveFromWishlist(item?.id)}\n                  className=\"absolute top-2 right-2 w-8 h-8 bg-background/80 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-background transition-colors duration-200\"\n                  aria-label=\"Remove from wishlist\"\n                >\n                  <Icon name=\"X\" size={16} className=\"text-foreground\" />\n                </button>\n\n                {/* Stock Status */}\n                {!item?.inStock && (\n                  <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n                    <span className=\"bg-destructive text-destructive-foreground text-sm font-caption font-medium px-3 py-1 rounded\">\n                      Out of Stock\n                    </span>\n                  </div>\n                )}\n              </div>\n\n              {/* Product Info */}\n              <div className=\"p-4\">\n                <Link\n                  to={`/product-detail-page?id=${item?.id}`}\n                  className=\"block hover:text-primary transition-colors duration-200\"\n                >\n                  <h3 className=\"font-body font-medium text-foreground mb-2 line-clamp-2\">\n                    {item?.name}\n                  </h3>\n                </Link>\n\n                {/* Variant Selection */}\n                {item?.variants && item?.variants?.length > 1 && (\n                  <div className=\"mb-3\">\n                    <p className=\"font-caption text-xs text-muted-foreground mb-1\">\n                      Size/Weight\n                    </p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {item?.variants?.slice(0, 3)?.map((variant, index) => (\n                        <span\n                          key={index}\n                          className=\"text-xs font-caption px-2 py-1 bg-muted rounded border border-border\"\n                        >\n                          {variant}\n                        </span>\n                      ))}\n                      {item?.variants?.length > 3 && (\n                        <span className=\"text-xs font-caption text-muted-foreground\">\n                          +{item?.variants?.length - 3} more\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {/* Price */}\n                <div className=\"flex items-center space-x-2 mb-3\">\n                  <span className=\"font-data font-bold text-foreground\">\n                    ‚Çπ{item?.price?.toFixed(2)}\n                  </span>\n                  {item?.originalPrice > item?.price && (\n                    <span className=\"font-data text-sm text-muted-foreground line-through\">\n                      ‚Çπ{item?.originalPrice?.toFixed(2)}\n                    </span>\n                  )}\n                </div>\n\n                {/* Rating */}\n                {item?.rating && (\n                  <div className=\"flex items-center space-x-1 mb-3\">\n                    <div className=\"flex items-center\">\n                      {[...Array(5)]?.map((_, i) => (\n                        <Icon\n                          key={i}\n                          name=\"Star\"\n                          size={12}\n                          className={`${\n                            i < Math.floor(item?.rating)\n                              ? 'text-warning fill-current' :'text-muted-foreground'\n                          }`}\n                        />\n                      ))}\n                    </div>\n                    <span className=\"font-caption text-xs text-muted-foreground\">\n                      ({item?.reviewCount})\n                    </span>\n                  </div>\n                )}\n\n                {/* Added Date */}\n                <p className=\"font-caption text-xs text-muted-foreground mb-3\">\n                  Added on {new Date(item.addedDate)?.toLocaleDateString('en-IN')}\n                </p>\n\n                {/* Actions */}\n                <div className=\"space-y-2\">\n                  <Button\n                    variant=\"default\"\n                    size=\"sm\"\n                    fullWidth\n                    onClick={() => handleAddToCart(item)}\n                    disabled={!item?.inStock}\n                    iconName=\"ShoppingCart\"\n                    iconPosition=\"left\"\n                  >\n                    {item?.inStock ? 'Add to Cart' : 'Out of Stock'}\n                  </Button>\n                  <Link to={`/product-detail-page?id=${item?.id}`}>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      fullWidth\n                    >\n                      View Details\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n      {/* Recommendations */}\n      {wishlistItems?.length > 0 && (\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-heading text-lg font-semibold text-foreground\">\n              You might also like\n            </h3>\n            <Link to=\"/product-collection-grid\">\n              <Button variant=\"outline\" size=\"sm\">\n                View All\n              </Button>\n            </Link>\n          </div>\n          <p className=\"font-body text-muted-foreground\">\n            Based on your wishlist, we recommend checking out our featured collections and new arrivals.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WishlistSection;","size_bytes":10230},"src/utils/invoiceGenerator.js":{"content":"// Invoice generator utility\nexport const generateInvoice = (order, user, settings = {}) => {\n  const siteName = settings.siteName || \"Neenu's Natural\";\n  const currentDate = new Date().toLocaleDateString('en-IN');\n  const orderDate = order.createdAt ? new Date(order.createdAt).toLocaleDateString('en-IN') : 'N/A';\n  \n  const invoiceHTML = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Invoice - ${order.orderNumber || order.orderId}</title>\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f9f9f9;\n        }\n        .invoice-container {\n            background: white;\n            padding: 40px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        .header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 40px;\n            border-bottom: 2px solid #e67e22;\n            padding-bottom: 20px;\n        }\n        .company-info h1 {\n            color: #e67e22;\n            margin: 0;\n            font-size: 28px;\n        }\n        .company-info p {\n            margin: 5px 0;\n            color: #666;\n        }\n        .invoice-info {\n            text-align: right;\n        }\n        .invoice-info h2 {\n            color: #333;\n            margin: 0;\n            font-size: 24px;\n        }\n        .invoice-details {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 30px;\n            margin-bottom: 40px;\n        }\n        .bill-to, .ship-to {\n            background: #f8f9fa;\n            padding: 20px;\n            border-radius: 6px;\n        }\n        .bill-to h3, .ship-to h3 {\n            margin-top: 0;\n            color: #e67e22;\n            border-bottom: 1px solid #ddd;\n            padding-bottom: 8px;\n        }\n        .order-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 30px;\n        }\n        .order-table th {\n            background: #e67e22;\n            color: white;\n            padding: 12px;\n            text-align: left;\n            font-weight: 600;\n        }\n        .order-table td {\n            padding: 12px;\n            border-bottom: 1px solid #eee;\n        }\n        .order-table tr:nth-child(even) {\n            background: #f8f9fa;\n        }\n        .totals {\n            margin-left: auto;\n            width: 300px;\n        }\n        .totals-row {\n            display: flex;\n            justify-content: space-between;\n            padding: 8px 0;\n            border-bottom: 1px solid #eee;\n        }\n        .totals-row.total {\n            font-weight: bold;\n            font-size: 18px;\n            border-top: 2px solid #e67e22;\n            border-bottom: 2px solid #e67e22;\n            color: #e67e22;\n        }\n        .footer {\n            margin-top: 40px;\n            text-align: center;\n            padding-top: 20px;\n            border-top: 1px solid #ddd;\n            color: #666;\n        }\n        .payment-info {\n            background: #e8f5e8;\n            padding: 15px;\n            border-radius: 6px;\n            margin: 20px 0;\n            border-left: 4px solid #28a745;\n        }\n        @media print {\n            body { background: white; }\n            .invoice-container { box-shadow: none; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"invoice-container\">\n        <div class=\"header\">\n            <div class=\"company-info\">\n                <h1>${siteName}</h1>\n                <p>Natural & Organic Products</p>\n                <p>Email: info@neenusnatural.com</p>\n                <p>Phone: +91 7892783668</p>\n            </div>\n            <div class=\"invoice-info\">\n                <h2>INVOICE</h2>\n                <p><strong>Invoice #:</strong> ${order.orderNumber || order.orderId}</p>\n                <p><strong>Date:</strong> ${currentDate}</p>\n                <p><strong>Order Date:</strong> ${orderDate}</p>\n            </div>\n        </div>\n\n        <div class=\"invoice-details\">\n            <div class=\"bill-to\">\n                <h3>Bill To:</h3>\n                <p><strong>${order.customerName || user.name}</strong></p>\n                <p>${order.customerEmail || user.email}</p>\n                <p>${order.customerPhone || user.phone}</p>\n            </div>\n            <div class=\"ship-to\">\n                <h3>Ship To:</h3>\n                <p><strong>${order.shippingAddress?.firstName} ${order.shippingAddress?.lastName}</strong></p>\n                <p>${order.shippingAddress?.address}</p>\n                ${order.shippingAddress?.apartment ? `<p>${order.shippingAddress.apartment}</p>` : ''}\n                <p>${order.shippingAddress?.city}, ${order.shippingAddress?.state} ${order.shippingAddress?.pincode}</p>\n                <p>${order.shippingAddress?.phone}</p>\n            </div>\n        </div>\n\n        <table class=\"order-table\">\n            <thead>\n                <tr>\n                    <th>Item</th>\n                    <th>Quantity</th>\n                    <th>Unit Price</th>\n                    <th>Total</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${order.items?.map(item => `\n                    <tr>\n                        <td>\n                            <strong>${item.name}</strong>\n                            ${item.variant ? `<br><small>Variant: ${item.variant}</small>` : ''}\n                        </td>\n                        <td>${item.quantity}</td>\n                        <td>‚Çπ${parseFloat(item.price || 0).toFixed(2)}</td>\n                        <td>‚Çπ${(parseFloat(item.price || 0) * parseInt(item.quantity || 0)).toFixed(2)}</td>\n                    </tr>\n                `).join('') || ''}\n            </tbody>\n        </table>\n\n        <div class=\"totals\">\n            <div class=\"totals-row\">\n                <span>Subtotal:</span>\n                <span>‚Çπ${parseFloat(order.subtotal || 0).toFixed(2)}</span>\n            </div>\n            <div class=\"totals-row\">\n                <span>Shipping:</span>\n                <span>${parseFloat(order.shipping || 0) === 0 ? 'Free' : `‚Çπ${parseFloat(order.shipping || 0).toFixed(2)}`}</span>\n            </div>\n            ${parseFloat(order.discount || 0) > 0 ? `\n                <div class=\"totals-row\">\n                    <span>Discount:</span>\n                    <span>-‚Çπ${parseFloat(order.discount || 0).toFixed(2)}</span>\n                </div>\n            ` : ''}\n            <div class=\"totals-row total\">\n                <span>Total:</span>\n                <span>‚Çπ${parseFloat(order.total || 0).toFixed(2)}</span>\n            </div>\n        </div>\n\n        <div class=\"payment-info\">\n            <p><strong>Payment Method:</strong> ${order.paymentMethod === 'cod' ? 'Cash on Delivery' : order.paymentMethod || 'Not specified'}</p>\n            <p><strong>Order Status:</strong> ${order.status || 'Pending'}</p>\n        </div>\n\n        <div class=\"footer\">\n            <p>Thank you for shopping with ${siteName}!</p>\n            <p>For any queries, contact us at info@neenusnatural.com or +91 7892783668</p>\n            <p><em>This is a computer-generated invoice and does not require a signature.</em></p>\n        </div>\n    </div>\n</body>\n</html>`;\n\n  return invoiceHTML;\n};\n\nexport const downloadInvoice = (order, user, settings = {}) => {\n  const invoiceHTML = generateInvoice(order, user, settings);\n  const blob = new Blob([invoiceHTML], { type: 'text/html' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = `Invoice-${order.orderNumber || order.orderId}.html`;\n  link.click();\n  URL.revokeObjectURL(url);\n};\n\nexport const printInvoice = (order, user, settings = {}) => {\n  const invoiceHTML = generateInvoice(order, user, settings);\n  const printWindow = window.open('', '_blank');\n  printWindow.document.write(invoiceHTML);\n  printWindow.document.close();\n  printWindow.focus();\n  printWindow.print();\n};","size_bytes":8239}},"version":1}